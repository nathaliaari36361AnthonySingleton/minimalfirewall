--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/AdaptiveUI.cs
--------------------------------------------------------------------------------
﻿// File: AdaptiveUI.cs
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MinimalFirewall
{

    public struct ProtocolTypes : IEquatable<ProtocolTypes>
    {
        public static ProtocolTypes Any { get; } = new ProtocolTypes("Any", 256, false, false);
        public static ProtocolTypes TCP { get; } = new ProtocolTypes("TCP", 6, true, false);
        public static ProtocolTypes UDP { get; } = new ProtocolTypes("UDP", 17, true, false);
        public static ProtocolTypes ICMPv4 { get; } = new ProtocolTypes("ICMPv4", 1, false, true);
        public static ProtocolTypes ICMPv6 { get; } = new ProtocolTypes("ICMPv6", 58, false, true);
        public static ProtocolTypes IGMP { get; } = new ProtocolTypes("IGMP", 2, false, false);

        public string Name { get; }
        public short Value { get; }
        public bool SupportsPorts { get; }
        public bool SupportsIcmp { get; }

        private ProtocolTypes(string name, short value, bool supportsPorts, bool supportsIcmp)
        {
            Name = name;
            Value = value;
            SupportsPorts = supportsPorts;
            SupportsIcmp = supportsIcmp;
        }

        public override string ToString() => Name;
        public bool Equals(ProtocolTypes other) => this.Value == other.Value;
        public override bool Equals(object? obj) => obj is ProtocolTypes other && Equals(other);
        public override int GetHashCode() => Value.GetHashCode();
    }


    public class FirewallRuleViewModel : INotifyPropertyChanged
    {
        private ProtocolTypes _selectedProtocol;
        public ProtocolTypes SelectedProtocol
        {
            get => _selectedProtocol;
            set
            {
                if (_selectedProtocol.Equals(value)) return;
                _selectedProtocol = value;

                OnPropertyChanged();
                OnPropertyChanged(nameof(IsPortSectionVisible));
                OnPropertyChanged(nameof(IsIcmpSectionVisible));
            }
        }

        public bool IsPortSectionVisible => SelectedProtocol.SupportsPorts;
        public bool IsIcmpSectionVisible => SelectedProtocol.SupportsIcmp;

        public FirewallRuleViewModel()
        {
            SelectedProtocol = ProtocolTypes.Any;
        }

        public event PropertyChangedEventHandler? PropertyChanged;
        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/App.config
--------------------------------------------------------------------------------
﻿<?xml version="1.0" encoding="utf-8" ?>
<configuration>
</configuration>

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/app.manifest
--------------------------------------------------------------------------------
﻿<?xml version="1.0" encoding="utf-8"?>
<assembly manifestVersion="1.0" xmlns="urn:schemas-microsoft-com:asm.v1">
	<assemblyIdentity version="1.0.0.0" name="MinimalFirewall.app"/>

	<application xmlns="urn:schemas-microsoft-com:asm.v3">
		<windowsSettings>
			<dpiAware xmlns="http://schemas.microsoft.com/SMI/2005/WindowsSettings">true/PM</dpiAware>
			<dpiAwareness xmlns="http://schemas.microsoft.com/SMI/2016/WindowsSettings">PerMonitorV2, System</dpiAwareness>
		</windowsSettings>
	</application>

	<trustInfo xmlns="urn:schemas-microsoft-com:asm.v2">
		<security>
			<requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">
				<requestedExecutionLevel level="requireAdministrator" uiAccess="false" />
			</requestedPrivileges>
		</security>
	</trustInfo>

	<compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
		<application>
			<supportedOS Id="{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}" />
			<supportedOS Id="{1f676c76-80e1-4239-95bb-83d0f6d0da78}" />
			<supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}" />
			<supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}" />
			<supportedOS Id="{e2011457-1546-43c5-a5fe-008deee3d3f0}" />
		</application>
	</compatibility>

</assembly>

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/Appdata.cs
--------------------------------------------------------------------------------
﻿// File: AppData.cs
using System;
using System.IO;

namespace MinimalFirewall
{
    internal static class AppData
    {
        private static readonly string _folderPath = Path.Combine(
            Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
            "MinimalFirewall");

        public static string GetPath(string fileName)
        {
            Directory.CreateDirectory(_folderPath);
            return Path.Combine(_folderPath, fileName);
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/AppSettings.cs
--------------------------------------------------------------------------------
﻿// File: AppSettings.cs
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Windows.Forms;
namespace MinimalFirewall
{
    public class AppSettings : INotifyPropertyChanged
    {
        private static string GetSettingsPath()
        {
            string exeDirectory = Path.GetDirectoryName(Environment.ProcessPath)!;
            return Path.Combine(exeDirectory, "settings.json");
        }

        private static readonly string _configPath = GetSettingsPath();
        private bool _isPopupsEnabled = false;
        private bool _isLoggingEnabled;
        private string _theme = "Dark";
        private bool _startOnSystemStartup;
        private bool _closeToTray = true;
        private int _autoRefreshIntervalMinutes = 10;
        private bool _isTrafficMonitorEnabled = false;
        private bool _showAppIcons = true;
        private bool _autoAllowSystemTrusted = false;
        private bool _alertOnForeignRules = true;
        private bool _filterPrograms = true;
        private bool _filterServices = true;
        private bool _filterUwp = true;
        private bool _filterWildcards = true;
        private bool _filterSystem = false;
        private string _rulesSearchText = "";
        private int _rulesSortColumn = -1;
        private int _rulesSortOrder = 0;
        private string _auditSearchText = "";
        private int _auditSortColumn = -1;
        private int _auditSortOrder = 0;
        private int _liveConnectionsSortColumn = -1;
        private int _liveConnectionsSortOrder = 0;

        public bool IsPopupsEnabled { get => _isPopupsEnabled; set => SetField(ref _isPopupsEnabled, value); }
        public bool IsLoggingEnabled { get => _isLoggingEnabled; set => SetField(ref _isLoggingEnabled, value); }
        public string Theme { get => _theme; set => SetField(ref _theme, value); }
        public bool StartOnSystemStartup { get => _startOnSystemStartup; set => SetField(ref _startOnSystemStartup, value); }
        public bool CloseToTray { get => _closeToTray; set => SetField(ref _closeToTray, value); }
        public int AutoRefreshIntervalMinutes { get => _autoRefreshIntervalMinutes; set => SetField(ref _autoRefreshIntervalMinutes, value); }
        public bool IsTrafficMonitorEnabled { get => _isTrafficMonitorEnabled; set => SetField(ref _isTrafficMonitorEnabled, value); }
        public bool ShowAppIcons { get => _showAppIcons; set => SetField(ref _showAppIcons, value); }
        public bool AutoAllowSystemTrusted { get => _autoAllowSystemTrusted; set => SetField(ref _autoAllowSystemTrusted, value); }
        public bool AlertOnForeignRules { get => _alertOnForeignRules; set => SetField(ref _alertOnForeignRules, value); }
        public bool FilterPrograms { get => _filterPrograms; set => SetField(ref _filterPrograms, value); }
        public bool FilterServices { get => _filterServices; set => SetField(ref _filterServices, value); }
        public bool FilterUwp { get => _filterUwp; set => SetField(ref _filterUwp, value); }
        public bool FilterWildcards { get => _filterWildcards; set => SetField(ref _filterWildcards, value); }
        public bool FilterSystem { get => _filterSystem; set => SetField(ref _filterSystem, value); }
        public string RulesSearchText { get => _rulesSearchText; set => SetField(ref _rulesSearchText, value); }
        public int RulesSortColumn { get => _rulesSortColumn; set => SetField(ref _rulesSortColumn, value); }
        public int RulesSortOrder { get => _rulesSortOrder; set => SetField(ref _rulesSortOrder, value); }
        public string AuditSearchText { get => _auditSearchText; set => SetField(ref _auditSearchText, value); }
        public int AuditSortColumn { get => _auditSortColumn; set => SetField(ref _auditSortColumn, value); }
        public int AuditSortOrder { get => _auditSortOrder; set => SetField(ref _auditSortOrder, value); }
        public int LiveConnectionsSortColumn { get => _liveConnectionsSortColumn; set => SetField(ref _liveConnectionsSortColumn, value); }
        public int LiveConnectionsSortOrder { get => _liveConnectionsSortOrder; set => SetField(ref _liveConnectionsSortOrder, value); }

        public Point WindowLocation { get; set; } = new Point(100, 100);
        public Size WindowSize { get; set; } = new Size(1280, 800);
        public int WindowState { get; set; } = (int)FormWindowState.Maximized;

        public event PropertyChangedEventHandler? PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        protected bool SetField<T>(ref T field, T value, [CallerMemberName] string? propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value)) return false;
            field = value;
            OnPropertyChanged(propertyName!);
            Save();
            return true;
        }

        public void Save()
        {
            try
            {
                string json = JsonSerializer.Serialize(this, AppSettingsJsonContext.Default.AppSettings);
                File.WriteAllText(_configPath, json);
            }
            catch (Exception ex) when (ex is IOException or UnauthorizedAccessException)
            {
                Debug.WriteLine($"[ERROR] Failed to save settings due to a file error: {ex.Message}");
            }
        }

        public static AppSettings Load()
        {
            try
            {
                if (File.Exists(_configPath))
                {
                    string json = File.ReadAllText(_configPath);
                    return JsonSerializer.Deserialize(json, AppSettingsJsonContext.Default.AppSettings) ?? new AppSettings();
                }
            }
            catch (Exception ex) when (ex is IOException or UnauthorizedAccessException or JsonException)
            {
                Debug.WriteLine($"[ERROR] Failed to load settings: {ex.Message}");
            }
            return new AppSettings();
        }
    }

    [JsonSourceGenerationOptions(WriteIndented = true)]
    [JsonSerializable(typeof(AppSettings))]
    internal partial class AppSettingsJsonContext : JsonSerializerContext
    {
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/AuditControl.cs
--------------------------------------------------------------------------------
﻿using MinimalFirewall.TypedObjects;
using System.ComponentModel;
using DarkModeForms;
using System.Diagnostics;
using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
namespace MinimalFirewall
{
    public partial class AuditControl : UserControl
    {
        private IContainer components = null;
        private MainViewModel _viewModel = null!;
        private AppSettings _appSettings = null!;
        private ForeignRuleTracker _foreignRuleTracker;
        private FirewallSentryService _firewallSentryService;
        private DarkModeCS _dm;
        private BindingSource _bindingSource;
        private int _sortColumn = -1;
        private SortOrder _sortOrder = SortOrder.None;
        public AuditControl()
        {
            InitializeComponent();
            this.DoubleBuffered = true;
        }

        public void Initialize(
            MainViewModel viewModel,
            ForeignRuleTracker foreignRuleTracker,
            FirewallSentryService firewallSentryService,
            AppSettings appSettings,
            DarkModeCS dm)
        {
            _viewModel = viewModel;
            _foreignRuleTracker = foreignRuleTracker;
            _firewallSentryService = firewallSentryService;
            _appSettings = appSettings;
            _dm = dm;

            systemChangesDataGridView.AutoGenerateColumns = false;
            _bindingSource = new BindingSource();
            systemChangesDataGridView.DataSource = _bindingSource;
            _viewModel.SystemChangesUpdated += OnSystemChangesUpdated;

            auditSearchTextBox.Text = _appSettings.AuditSearchText;
            _sortColumn = _appSettings.AuditSortColumn;
            _sortOrder = (SortOrder)_appSettings.AuditSortOrder;
        }

        private void OnSystemChangesUpdated()
        {
            if (this.InvokeRequired)
            {
                this.Invoke(OnSystemChangesUpdated);
                return;
            }
            ApplySearchFilter();
        }

        public void ApplyThemeFixes()
        {
            if (_dm == null) return;
            rebuildBaselineButton.FlatAppearance.BorderSize = 1;
            rebuildBaselineButton.FlatAppearance.BorderColor = _dm.OScolors.ControlDark;
            if (_dm.IsDarkMode)
            {
                rebuildBaselineButton.ForeColor = Color.White;
            }
            else
            {
                rebuildBaselineButton.ForeColor = SystemColors.ControlText;
            }
        }

        public void ApplySearchFilter()
        {
            if (systemChangesDataGridView is null || _viewModel?.SystemChanges is null) return;
            string searchText = auditSearchTextBox.Text;

            var filteredChanges = string.IsNullOrWhiteSpace(searchText) ?
                _viewModel.SystemChanges : _viewModel.SystemChanges.Where(c => c.Rule?.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) == true ||
                                                   c.Rule?.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase) == true ||

                                                   c.Rule?.ApplicationName.Contains(searchText, StringComparison.OrdinalIgnoreCase) == true);
            _bindingSource.DataSource = filteredChanges.ToList();
            _bindingSource.ResetBindings(false);
            systemChangesDataGridView.Refresh();
        }

        private void AcceptAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (_viewModel.SystemChanges.Count == 0) return;
            var result = DarkModeForms.Messenger.MessageBox($"Are you sure you want to accept all {_viewModel.SystemChanges.Count} detected changes? They will be hidden from this list.", "Confirm Accept All", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (result == DialogResult.Yes)
            {
                _viewModel.AcceptAllForeignRules();
            }
        }

        private async void rebuildBaselineButton_Click(object sender, EventArgs e)
        {
            if (_viewModel != null)
            {
                var result = DarkModeForms.Messenger.MessageBox("This will clear all accepted (hidden) rules from the Audit list, causing them to be displayed again. Are you sure?", "Clear Accepted Rules", MessageBoxButtons.YesNo,

                                       MessageBoxIcon.Warning);
                if (result != DialogResult.Yes) return;

                await _viewModel.RebuildBaselineAsync();
            }
        }

        private void auditSearchTextBox_TextChanged(object sender, EventArgs e)
        {
            _appSettings.AuditSearchText = auditSearchTextBox.Text;
            ApplySearchFilter();
        }

        private void systemChangesDataGridView_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            var propertyName = systemChangesDataGridView.Columns[e.ColumnIndex].DataPropertyName;
            if (string.IsNullOrEmpty(propertyName)) return;

            if (propertyName.StartsWith("Rule."))
            {
                propertyName = propertyName.Substring(5);
            }

            _sortOrder = (_sortColumn == e.ColumnIndex && _sortOrder == SortOrder.Ascending) ?
                         SortOrder.Descending : SortOrder.Ascending;
            _sortColumn = e.ColumnIndex;
            if (_bindingSource.DataSource is List<FirewallRuleChange> list)
            {
                var sortedList = (_sortOrder == SortOrder.Ascending)
                    ? list.OrderBy(c => GetPropertyValue(c.Rule, propertyName)).ToList()
                    : list.OrderByDescending(c => GetPropertyValue(c.Rule, propertyName)).ToList();
                _bindingSource.DataSource = sortedList;
                _bindingSource.ResetBindings(false);
            }

            _appSettings.AuditSortColumn = _sortColumn;
            _appSettings.AuditSortOrder = (int)_sortOrder;
        }

        private static object GetPropertyValue(object obj, string propertyName)
        {
            if (obj == null || string.IsNullOrEmpty(propertyName)) return string.Empty;
            return obj.GetType().GetProperty(propertyName)?.GetValue(obj, null) ?? string.Empty;
        }

        private bool TryGetSelectedAppContext(out string? appPath)
        {
            appPath = null;
            if (systemChangesDataGridView.SelectedRows.Count == 0)
            {
                return false;
            }

            if (systemChangesDataGridView.SelectedRows[0].DataBoundItem is FirewallRuleChange change)
            {
                appPath = change.Rule?.ApplicationName;
            }

            return !string.IsNullOrEmpty(appPath);
        }

        private void auditContextMenu_Opening(object sender, CancelEventArgs e)
        {
            if (!TryGetSelectedAppContext(out string? appPath))
            {
                openFileLocationToolStripMenuItem.Enabled = false;
                return;
            }

            openFileLocationToolStripMenuItem.Enabled = !string.IsNullOrEmpty(appPath) && (File.Exists(appPath) || Directory.Exists(appPath));
        }

        private void openFileLocationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (!TryGetSelectedAppContext(out string? appPath))
            {
                DarkModeForms.Messenger.MessageBox("The path for this item is not available.", "Path Not Found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            bool pathExists = File.Exists(appPath) || Directory.Exists(appPath);
            if (!pathExists)
            {
                DarkModeForms.Messenger.MessageBox("The file or folder path for this item could not be found.", "Path Not Found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            try
            {
                Process.Start("explorer.exe", $"/select, \"{appPath}\"");
            }
            catch (Exception ex) when (ex is Win32Exception or FileNotFoundException)
            {
                DarkModeForms.Messenger.MessageBox($"Could not open file location.\n\nError: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void copyDetailsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (systemChangesDataGridView.SelectedRows.Count > 0)
            {
                var details = new System.Text.StringBuilder();

                foreach (DataGridViewRow row in systemChangesDataGridView.SelectedRows)
                {
                    if (row.DataBoundItem is FirewallRuleChange change)
                    {
                        if (details.Length > 0)
                        {
                            details.AppendLine();
                            details.AppendLine();
                        }

                        details.AppendLine($"Type: Audited Change ({change.Type})");
                        if (change.Rule != null)
                        {
                            details.AppendLine($"Rule Name: {change.Rule.Name}");
                            details.AppendLine($"Application: {change.Rule.ApplicationName}");
                            details.AppendLine($"Action: {change.Rule.Status}");
                            details.AppendLine($"Direction: {change.Rule.Direction}");
                            details.AppendLine($"Protocol: {change.Rule.ProtocolName}");
                            details.AppendLine($"Local Ports: {change.Rule.LocalPorts}");
                            details.AppendLine($"Remote Ports: {change.Rule.RemotePorts}");
                            details.AppendLine($"Local Addresses: {change.Rule.LocalAddresses}");
                            details.AppendLine($"Remote Addresses: {change.Rule.RemoteAddresses}");
                        }
                    }
                }

                if (details.Length > 0)
                {
                    Clipboard.SetText(details.ToString());
                }
            }
        }

        private void systemChangesDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex < 0) return;
            var grid = (DataGridView)sender;
            var column = grid.Columns[e.ColumnIndex];

            if (grid.Rows[e.RowIndex].DataBoundItem is FirewallRuleChange change)
            {
                if (column is DataGridViewButtonColumn)
                {
                    if (column.Name == "acceptButtonColumn")
                    {
                        _viewModel.AcceptForeignRule(change);
                    }
                    else if (column.Name == "deleteButtonColumn")
                    {
                        _viewModel.DeleteForeignRule(change);
                    }
                }
            }
        }

        private void systemChangesDataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            if (e.RowIndex < 0) return;
            var grid = (DataGridView)sender;
            if (grid.Rows[e.RowIndex].DataBoundItem is not FirewallRuleChange change || change.Rule == null) return;

            var column = grid.Columns[e.ColumnIndex];
            if (column == advNameColumn) e.Value = change.Rule.Name;
            else if (column == advStatusColumn) e.Value = change.Rule.Status;
            else if (column == advProtocolColumn) e.Value = change.Rule.ProtocolName;
            else if (column == advLocalPortsColumn) e.Value = change.Rule.LocalPorts;
            else if (column == advRemotePortsColumn) e.Value = change.Rule.RemotePorts;
            else if (column == advLocalAddressColumn) e.Value = change.Rule.LocalAddresses;
            else if (column == advRemoteAddressColumn) e.Value = change.Rule.RemoteAddresses;
            else if (column == advProgramColumn) e.Value = change.Rule.ApplicationName;
            else if (column == advServiceColumn) e.Value = change.Rule.ServiceName;
            else if (column == advProfilesColumn) e.Value = change.Rule.Profiles;
            else if (column == advGroupingColumn) e.Value = change.Rule.Grouping;
            else if (column == advDescColumn) e.Value = change.Rule.Description;

            Color rowBackColor;
            switch (change.Type)
            {
                case ChangeType.New:
                    rowBackColor = Color.FromArgb(204, 255, 204);
                    break;
                case ChangeType.Modified:
                    rowBackColor = change.Rule.Status.Contains("Allow", StringComparison.OrdinalIgnoreCase)
                        ? Color.FromArgb(204, 255, 204)
                        : Color.FromArgb(255, 204, 204);
                    break;
                case ChangeType.Deleted:
                    rowBackColor = Color.FromArgb(255, 204, 204);
                    break;
                default:
                    rowBackColor = e.CellStyle.BackColor;
                    break;
            }

            if (column.Name == "acceptButtonColumn")
            {
                e.CellStyle.BackColor = Color.FromArgb(108, 117, 125);
                e.CellStyle.ForeColor = Color.White;
            }
            else if (column.Name == "deleteButtonColumn")
            {
                e.CellStyle.BackColor = Color.FromArgb(52, 58, 64);
                e.CellStyle.ForeColor = Color.White;
            }
            else
            {
                e.CellStyle.BackColor = rowBackColor;
                e.CellStyle.ForeColor = Color.Black;
            }

            if (grid.Rows[e.RowIndex].Selected)
            {
                e.CellStyle.SelectionBackColor = SystemColors.Highlight;
                e.CellStyle.SelectionForeColor = SystemColors.HighlightText;
            }
            else
            {
                e.CellStyle.SelectionBackColor = e.CellStyle.BackColor;
                e.CellStyle.SelectionForeColor = e.CellStyle.ForeColor;
            }
        }

        private void systemChangesDataGridView_RowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)
        {
            var grid = (DataGridView)sender;
            var row = grid.Rows[e.RowIndex];

            if (row.Selected) return;
            var mouseOverRow = grid.HitTest(grid.PointToClient(MousePosition).X, grid.PointToClient(MousePosition).Y).RowIndex;
            if (e.RowIndex == mouseOverRow)
            {
                using var overlayBrush = new SolidBrush(Color.FromArgb(25, Color.Black));
                e.Graphics.FillRectangle(overlayBrush, e.RowBounds);
            }
        }

        private void systemChangesDataGridView_CellMouseEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                var grid = (DataGridView)sender;
                grid.InvalidateRow(e.RowIndex);
            }
        }

        private void systemChangesDataGridView_CellMouseLeave(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                var grid = (DataGridView)sender;
                grid.InvalidateRow(e.RowIndex);
            }
        }

        private void systemChangesDataGridView_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right && e.RowIndex >= 0)
            {
                var grid = (DataGridView)sender;
                var clickedRow = grid.Rows[e.RowIndex];

                if (!clickedRow.Selected)
                {
                    grid.ClearSelection();
                    clickedRow.Selected = true;
                }
            }
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/AuditControl.Designer.cs
--------------------------------------------------------------------------------
﻿namespace MinimalFirewall
{
    partial class AuditControl
    {
        private System.Windows.Forms.TextBox auditSearchTextBox;
        private System.Windows.Forms.Button rebuildBaselineButton;
        private System.Windows.Forms.ContextMenuStrip auditContextMenu;
        private System.Windows.Forms.ToolStripMenuItem acceptAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem copyDetailsToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
        private System.Windows.Forms.ToolStripMenuItem openFileLocationToolStripMenuItem;
        private System.Windows.Forms.Panel topPanel;
        private System.Windows.Forms.DataGridView systemChangesDataGridView;
        private System.Windows.Forms.DataGridViewButtonColumn acceptButtonColumn;
        private System.Windows.Forms.DataGridViewButtonColumn deleteButtonColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advNameColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advStatusColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advProtocolColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advLocalPortsColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advRemotePortsColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advLocalAddressColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advRemoteAddressColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advProgramColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advServiceColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advProfilesColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advGroupingColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advDescColumn;
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle1 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle2 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle3 = new System.Windows.Forms.DataGridViewCellStyle();
            this.auditSearchTextBox = new System.Windows.Forms.TextBox();
            this.rebuildBaselineButton = new System.Windows.Forms.Button();
            this.auditContextMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.acceptAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.copyDetailsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.openFileLocationToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.topPanel = new System.Windows.Forms.Panel();
            this.systemChangesDataGridView = new System.Windows.Forms.DataGridView();
            this.acceptButtonColumn = new System.Windows.Forms.DataGridViewButtonColumn();
            this.deleteButtonColumn = new System.Windows.Forms.DataGridViewButtonColumn();
            this.advNameColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advStatusColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advProtocolColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advLocalPortsColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advRemotePortsColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advLocalAddressColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advRemoteAddressColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advProgramColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advServiceColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advProfilesColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advGroupingColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advDescColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.auditContextMenu.SuspendLayout();
            this.topPanel.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.systemChangesDataGridView)).BeginInit();
            this.SuspendLayout();
            // 
            // auditSearchTextBox
            // 
            this.auditSearchTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.auditSearchTextBox.Location = new System.Drawing.Point(707, 27);
            this.auditSearchTextBox.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.auditSearchTextBox.Name = "auditSearchTextBox";
            this.auditSearchTextBox.PlaceholderText = "Search changes...";
            this.auditSearchTextBox.Size = new System.Drawing.Size(285, 27);
            this.auditSearchTextBox.TabIndex = 3;
            this.auditSearchTextBox.TextChanged += new System.EventHandler(this.auditSearchTextBox_TextChanged);
            // 
            // rebuildBaselineButton
            // 
            this.rebuildBaselineButton.Location = new System.Drawing.Point(3, 17);
            this.rebuildBaselineButton.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.rebuildBaselineButton.Name = "rebuildBaselineButton";
            this.rebuildBaselineButton.Size = new System.Drawing.Size(173, 48);
            this.rebuildBaselineButton.TabIndex = 2;
            this.rebuildBaselineButton.Text = "Rebuild Baseline";
            this.rebuildBaselineButton.Click += new System.EventHandler(this.rebuildBaselineButton_Click);
            // 
            // auditContextMenu
            // 
            this.auditContextMenu.ImageScalingSize = new System.Drawing.Size(20, 20);
            this.auditContextMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.acceptAllToolStripMenuItem,
            this.copyDetailsToolStripMenuItem,
            this.toolStripSeparator1,
            this.openFileLocationToolStripMenuItem});
            this.auditContextMenu.Name = "auditContextMenu";
            this.auditContextMenu.Size = new System.Drawing.Size(207, 88);
            this.auditContextMenu.Opening += new System.ComponentModel.CancelEventHandler(this.auditContextMenu_Opening);
            // 
            // acceptAllToolStripMenuItem
            // 
            this.acceptAllToolStripMenuItem.Name = "acceptAllToolStripMenuItem";
            this.acceptAllToolStripMenuItem.Size = new System.Drawing.Size(206, 24);
            this.acceptAllToolStripMenuItem.Text = "Accept All Changes";
            this.acceptAllToolStripMenuItem.Click += new System.EventHandler(this.AcceptAllToolStripMenuItem_Click);
            // 
            // copyDetailsToolStripMenuItem
            // 
            this.copyDetailsToolStripMenuItem.Name = "copyDetailsToolStripMenuItem";
            this.copyDetailsToolStripMenuItem.Size = new System.Drawing.Size(206, 24);
            this.copyDetailsToolStripMenuItem.Text = "Copy Details";
            this.copyDetailsToolStripMenuItem.Click += new System.EventHandler(this.copyDetailsToolStripMenuItem_Click);
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            this.toolStripSeparator1.Size = new System.Drawing.Size(203, 6);
            // 
            // openFileLocationToolStripMenuItem
            // 
            this.openFileLocationToolStripMenuItem.Name = "openFileLocationToolStripMenuItem";
            this.openFileLocationToolStripMenuItem.Size = new System.Drawing.Size(206, 24);
            this.openFileLocationToolStripMenuItem.Text = "Open File Location";
            this.openFileLocationToolStripMenuItem.Click += new System.EventHandler(this.openFileLocationToolStripMenuItem_Click);
            // 
            // topPanel
            // 
            this.topPanel.Controls.Add(this.rebuildBaselineButton);
            this.topPanel.Controls.Add(this.auditSearchTextBox);
            this.topPanel.Dock = System.Windows.Forms.DockStyle.Top;
            this.topPanel.Location = new System.Drawing.Point(0, 0);
            this.topPanel.Name = "topPanel";
            this.topPanel.Size = new System.Drawing.Size(1000, 77);
            this.topPanel.TabIndex = 4;
            // 
            // systemChangesDataGridView
            // 
            this.systemChangesDataGridView.AllowUserToAddRows = false;
            this.systemChangesDataGridView.AllowUserToDeleteRows = false;
            this.systemChangesDataGridView.AllowUserToResizeRows = false;
            this.systemChangesDataGridView.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            this.systemChangesDataGridView.BackgroundColor = System.Drawing.SystemColors.Control;
            this.systemChangesDataGridView.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.systemChangesDataGridView.CellBorderStyle = System.Windows.Forms.DataGridViewCellBorderStyle.None;
            this.systemChangesDataGridView.ColumnHeadersBorderStyle = System.Windows.Forms.DataGridViewHeaderBorderStyle.None;
            dataGridViewCellStyle1.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle1.BackColor = System.Drawing.SystemColors.Control;
            dataGridViewCellStyle1.Font = new System.Drawing.Font("Segoe UI", 9F);
            dataGridViewCellStyle1.ForeColor = System.Drawing.SystemColors.WindowText;
            dataGridViewCellStyle1.SelectionBackColor = System.Drawing.SystemColors.Highlight;
            dataGridViewCellStyle1.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
            dataGridViewCellStyle1.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
            this.systemChangesDataGridView.ColumnHeadersDefaultCellStyle = dataGridViewCellStyle1;
            this.systemChangesDataGridView.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.systemChangesDataGridView.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
            this.acceptButtonColumn,
            this.deleteButtonColumn,
            this.advNameColumn,
            this.advStatusColumn,
            this.advProtocolColumn,
            this.advLocalPortsColumn,
            this.advRemotePortsColumn,
            this.advLocalAddressColumn,
            this.advRemoteAddressColumn,
            this.advProgramColumn,
            this.advServiceColumn,
            this.advProfilesColumn,
            this.advGroupingColumn,
            this.advDescColumn});
            this.systemChangesDataGridView.ContextMenuStrip = this.auditContextMenu;
            this.systemChangesDataGridView.Dock = System.Windows.Forms.DockStyle.Fill;
            this.systemChangesDataGridView.EnableHeadersVisualStyles = false;
            this.systemChangesDataGridView.GridColor = System.Drawing.SystemColors.Control;
            this.systemChangesDataGridView.Location = new System.Drawing.Point(0, 77);
            this.systemChangesDataGridView.MultiSelect = true;
            this.systemChangesDataGridView.Name = "systemChangesDataGridView";
            this.systemChangesDataGridView.ReadOnly = true;
            this.systemChangesDataGridView.RowHeadersVisible = false;
            this.systemChangesDataGridView.RowTemplate.Height = 28;
            this.systemChangesDataGridView.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.systemChangesDataGridView.ShowCellToolTips = true;
            this.systemChangesDataGridView.Size = new System.Drawing.Size(1000, 843);
            this.systemChangesDataGridView.TabIndex = 5;
            this.systemChangesDataGridView.CellContentClick += new System.Windows.Forms.DataGridViewCellEventHandler(this.systemChangesDataGridView_CellContentClick);
            this.systemChangesDataGridView.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(this.systemChangesDataGridView_CellFormatting);
            this.systemChangesDataGridView.CellMouseDown += new System.Windows.Forms.DataGridViewCellMouseEventHandler(this.systemChangesDataGridView_CellMouseDown);
            this.systemChangesDataGridView.CellMouseEnter += new System.Windows.Forms.DataGridViewCellEventHandler(this.systemChangesDataGridView_CellMouseEnter);
            this.systemChangesDataGridView.CellMouseLeave += new System.Windows.Forms.DataGridViewCellEventHandler(this.systemChangesDataGridView_CellMouseLeave);
            this.systemChangesDataGridView.ColumnHeaderMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(this.systemChangesDataGridView_ColumnHeaderMouseClick);
            this.systemChangesDataGridView.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler(this.systemChangesDataGridView_RowPostPaint);
            // 
            // acceptButtonColumn
            // 
            this.acceptButtonColumn.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None;
            dataGridViewCellStyle2.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleCenter;
            dataGridViewCellStyle2.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
            this.acceptButtonColumn.DefaultCellStyle = dataGridViewCellStyle2;
            this.acceptButtonColumn.FillWeight = 15F;
            this.acceptButtonColumn.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.acceptButtonColumn.HeaderText = "Action";
            this.acceptButtonColumn.MinimumWidth = 70;
            this.acceptButtonColumn.Name = "acceptButtonColumn";
            this.acceptButtonColumn.ReadOnly = true;
            this.acceptButtonColumn.Text = "Accept";
            this.acceptButtonColumn.UseColumnTextForButtonValue = true;
            this.acceptButtonColumn.Width = 70;
            // 
            // deleteButtonColumn
            // 
            this.deleteButtonColumn.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None;
            dataGridViewCellStyle3.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleCenter;
            dataGridViewCellStyle3.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
            this.deleteButtonColumn.DefaultCellStyle = dataGridViewCellStyle3;
            this.deleteButtonColumn.FillWeight = 15F;
            this.deleteButtonColumn.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.deleteButtonColumn.HeaderText = "";
            this.deleteButtonColumn.MinimumWidth = 70;
            this.deleteButtonColumn.Name = "deleteButtonColumn";
            this.deleteButtonColumn.ReadOnly = true;
            this.deleteButtonColumn.Text = "Delete";
            this.deleteButtonColumn.UseColumnTextForButtonValue = true;
            this.deleteButtonColumn.Width = 70;
            // 
            // advNameColumn
            // 
            this.advNameColumn.DataPropertyName = "Rule.Name";
            this.advNameColumn.FillWeight = 20F;
            this.advNameColumn.HeaderText = "Name";
            this.advNameColumn.Name = "advNameColumn";
            this.advNameColumn.ReadOnly = true;
            // 
            // advStatusColumn
            // 
            this.advStatusColumn.DataPropertyName = "Rule.Status";
            this.advStatusColumn.FillWeight = 15F;
            this.advStatusColumn.HeaderText = "Action";
            this.advStatusColumn.Name = "advStatusColumn";
            this.advStatusColumn.ReadOnly = true;
            // 
            // advProtocolColumn
            // 
            this.advProtocolColumn.DataPropertyName = "Rule.ProtocolName";
            this.advProtocolColumn.FillWeight = 8F;
            this.advProtocolColumn.HeaderText = "Protocol";
            this.advProtocolColumn.Name = "advProtocolColumn";
            this.advProtocolColumn.ReadOnly = true;
            // 
            // advLocalPortsColumn
            // 
            this.advLocalPortsColumn.DataPropertyName = "Rule.LocalPorts";
            this.advLocalPortsColumn.FillWeight = 12F;
            this.advLocalPortsColumn.HeaderText = "Local Ports";
            this.advLocalPortsColumn.Name = "advLocalPortsColumn";
            this.advLocalPortsColumn.ReadOnly = true;
            // 
            // advRemotePortsColumn
            // 
            this.advRemotePortsColumn.DataPropertyName = "Rule.RemotePorts";
            this.advRemotePortsColumn.FillWeight = 12F;
            this.advRemotePortsColumn.HeaderText = "Remote Ports";
            this.advRemotePortsColumn.Name = "advRemotePortsColumn";
            this.advRemotePortsColumn.ReadOnly = true;
            // 
            // advLocalAddressColumn
            // 
            this.advLocalAddressColumn.DataPropertyName = "Rule.LocalAddresses";
            this.advLocalAddressColumn.FillWeight = 15F;
            this.advLocalAddressColumn.HeaderText = "Local Address";
            this.advLocalAddressColumn.Name = "advLocalAddressColumn";
            this.advLocalAddressColumn.ReadOnly = true;
            // 
            // advRemoteAddressColumn
            // 
            this.advRemoteAddressColumn.DataPropertyName = "Rule.RemoteAddresses";
            this.advRemoteAddressColumn.FillWeight = 15F;
            this.advRemoteAddressColumn.HeaderText = "Remote Address";
            this.advRemoteAddressColumn.Name = "advRemoteAddressColumn";
            this.advRemoteAddressColumn.ReadOnly = true;
            // 
            // advProgramColumn
            // 
            this.advProgramColumn.DataPropertyName = "Rule.ApplicationName";
            this.advProgramColumn.FillWeight = 25F;
            this.advProgramColumn.HeaderText = "Application";
            this.advProgramColumn.Name = "advProgramColumn";
            this.advProgramColumn.ReadOnly = true;
            // 
            // advServiceColumn
            // 
            this.advServiceColumn.DataPropertyName = "Rule.ServiceName";
            this.advServiceColumn.FillWeight = 15F;
            this.advServiceColumn.HeaderText = "Service";
            this.advServiceColumn.Name = "advServiceColumn";
            this.advServiceColumn.ReadOnly = true;
            // 
            // advProfilesColumn
            // 
            this.advProfilesColumn.DataPropertyName = "Rule.Profiles";
            this.advProfilesColumn.FillWeight = 10F;
            this.advProfilesColumn.HeaderText = "Profiles";
            this.advProfilesColumn.Name = "advProfilesColumn";
            this.advProfilesColumn.ReadOnly = true;
            // 
            // advGroupingColumn
            // 
            this.advGroupingColumn.DataPropertyName = "Rule.Grouping";
            this.advGroupingColumn.FillWeight = 15F;
            this.advGroupingColumn.HeaderText = "Group";
            this.advGroupingColumn.Name = "advGroupingColumn";
            this.advGroupingColumn.ReadOnly = true;
            // 
            // advDescColumn
            // 
            this.advDescColumn.DataPropertyName = "Rule.Description";
            this.advDescColumn.FillWeight = 30F;
            this.advDescColumn.HeaderText = "Description";
            this.advDescColumn.Name = "advDescColumn";
            this.advDescColumn.ReadOnly = true;
            // 
            // AuditControl
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 20F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.Controls.Add(this.systemChangesDataGridView);
            this.Controls.Add(this.topPanel);
            this.Name = "AuditControl";
            this.Size = new System.Drawing.Size(1000, 920);
            this.auditContextMenu.ResumeLayout(false);
            this.topPanel.ResumeLayout(false);
            this.topPanel.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.systemChangesDataGridView)).EndInit();
            this.ResumeLayout(false);
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/BackgroundFirewallTaskService.cs
--------------------------------------------------------------------------------
﻿// File: BackgroundFirewallTaskService.cs
using System;
using System.Collections.Concurrent;
using System.Threading;
using System.Threading.Tasks;

namespace MinimalFirewall
{
    public class BackgroundFirewallTaskService : IDisposable
    {
        private readonly BlockingCollection<FirewallTask> _taskQueue = new BlockingCollection<FirewallTask>();
        private readonly Task _worker;
        private readonly CancellationTokenSource _cancellationTokenSource = new CancellationTokenSource();
        private readonly FirewallActionsService _actionsService;
        private readonly UserActivityLogger _activityLogger;
        private readonly WildcardRuleService _wildcardRuleService;

        public event Action<int>? QueueCountChanged;

        public BackgroundFirewallTaskService(FirewallActionsService actionsService, UserActivityLogger activityLogger, WildcardRuleService wildcardRuleService)
        {
            _actionsService = actionsService;
            _activityLogger = activityLogger;
            _wildcardRuleService = wildcardRuleService;
            _worker = Task.Run(ProcessQueueAsync, _cancellationTokenSource.Token);
        }

        public void EnqueueTask(FirewallTask task)
        {
            if (!_taskQueue.IsAddingCompleted)
            {
                _taskQueue.Add(task);
                QueueCountChanged?.Invoke(_taskQueue.Count);
            }
        }

        private async Task ProcessQueueAsync()
        {
            foreach (var task in _taskQueue.GetConsumingEnumerable(_cancellationTokenSource.Token))
            {
                try
                {
                    await Task.Run(() =>
                    {
                        switch (task.TaskType)
                        {
                            case FirewallTaskType.ApplyApplicationRule:
                                if (task.Payload is ApplyApplicationRulePayload p1) _actionsService.ApplyApplicationRuleChange(p1.AppPaths, p1.Action, p1.WildcardSourcePath);
                                break;
                            case FirewallTaskType.ApplyServiceRule:
                                if (task.Payload is ApplyServiceRulePayload p2) _actionsService.ApplyServiceRuleChange(p2.ServiceName, p2.Action);
                                break;
                            case FirewallTaskType.ApplyUwpRule:
                                if (task.Payload is ApplyUwpRulePayload p3) _actionsService.ApplyUwpRuleChange(p3.UwpApps, p3.Action);
                                break;
                            case FirewallTaskType.DeleteApplicationRules:
                                if (task.Payload is DeleteRulesPayload p4) _actionsService.DeleteApplicationRules(p4.RuleIdentifiers);
                                break;
                            case FirewallTaskType.DeleteUwpRules:
                                if (task.Payload is DeleteRulesPayload p5) _actionsService.DeleteUwpRules(p5.RuleIdentifiers);
                                break;
                            case FirewallTaskType.DeleteAdvancedRules:
                                if (task.Payload is DeleteRulesPayload p6) _actionsService.DeleteAdvancedRules(p6.RuleIdentifiers);
                                break;
                            case FirewallTaskType.DeleteGroup:
                                if (task.Payload is string p7) _actionsService.DeleteGroupAsync(p7).Wait();
                                break;
                            case FirewallTaskType.DeleteWildcardRules:
                                if (task.Payload is DeleteWildcardRulePayload p8) _actionsService.DeleteRulesForWildcard(p8.Wildcard);
                                break;
                            case FirewallTaskType.ProcessPendingConnection:
                                if (task.Payload is ProcessPendingConnectionPayload p9) _actionsService.ProcessPendingConnection(p9.PendingConnection, p9.Decision, p9.Duration, p9.TrustPublisher);
                                break;
                            case FirewallTaskType.AcceptForeignRule:
                                if (task.Payload is ForeignRuleChangePayload p10) _actionsService.AcceptForeignRule(p10.Change);
                                break;
                            case FirewallTaskType.DeleteForeignRule:
                                if (task.Payload is ForeignRuleChangePayload p12) _actionsService.DeleteForeignRule(p12.Change);
                                break;
                            case FirewallTaskType.AcceptAllForeignRules:
                                if (task.Payload is AllForeignRuleChangesPayload p13) _actionsService.AcceptAllForeignRules(p13.Changes);
                                break;
                            case FirewallTaskType.CreateAdvancedRule:
                                if (task.Payload is CreateAdvancedRulePayload p15) _actionsService.CreateAdvancedRule(p15.ViewModel, p15.InterfaceTypes, p15.IcmpTypesAndCodes);
                                break;
                            case FirewallTaskType.AddWildcardRule:
                                if (task.Payload is WildcardRule p16) _wildcardRuleService.AddRule(p16);
                                break;
                            case FirewallTaskType.SetGroupEnabledState:
                                if (task.Payload is SetGroupEnabledStatePayload p17) _actionsService.SetGroupEnabledState(p17.GroupName, p17.IsEnabled);
                                break;
                        }
                    }, _cancellationTokenSource.Token);
                }
                catch (OperationCanceledException)
                {
                    break;
                }
                catch (Exception ex)
                {
                    _activityLogger.LogException($"BackgroundTask-{task.TaskType}", ex);
                }
                finally
                {
                    QueueCountChanged?.Invoke(_taskQueue.Count);
                }
            }
        }

        public void Dispose()
        {
            _taskQueue.CompleteAdding();
            _cancellationTokenSource.Cancel();
            try
            {
                _worker.Wait(2000);
            }
            catch (OperationCanceledException) { }
            catch (AggregateException) { }

            _cancellationTokenSource.Dispose();
            _taskQueue.Dispose();
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/BrowseServicesForm.cs
--------------------------------------------------------------------------------
﻿using DarkModeForms;
using System.Data;

namespace MinimalFirewall
{
    public partial class BrowseServicesForm : Form
    {
        private readonly DarkModeCS dm;
        private readonly List<ServiceViewModel> _allServices;
        public ServiceViewModel? SelectedService { get; private set; }

        public BrowseServicesForm(List<ServiceViewModel> services)
        {
            InitializeComponent();
            dm = new DarkModeCS(this);
            _allServices = services;
            LoadServices();
        }

        private void LoadServices(string filter = "")
        {
            servicesListBox.BeginUpdate();
            servicesListBox.Items.Clear();

            var filteredServices = string.IsNullOrWhiteSpace(filter)
                ? _allServices
                : _allServices.Where(s =>
                    s.DisplayName.Contains(filter, StringComparison.OrdinalIgnoreCase) ||
                    s.ServiceName.Contains(filter, StringComparison.OrdinalIgnoreCase));

            foreach (var service in filteredServices)
            {
                servicesListBox.Items.Add($"{service.DisplayName} ({service.ServiceName})");
            }
            servicesListBox.EndUpdate();
        }

        private void searchTextBox_TextChanged(object sender, EventArgs e)
        {
            LoadServices(searchTextBox.Text);
        }

        private void okButton_Click(object sender, EventArgs e)
        {
            if (servicesListBox.SelectedItem is string selectedItem)
            {
                SelectedService = _allServices.FirstOrDefault(s => selectedItem == $"{s.DisplayName} ({s.ServiceName})");
                this.DialogResult = DialogResult.OK;
                this.Close();
            }
            else
            {
                this.DialogResult = DialogResult.Cancel;
                this.Close();
            }
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel;
            this.Close();
        }

        private void servicesListBox_DoubleClick(object sender, EventArgs e)
        {
            okButton_Click(sender, e);
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/BrowseServicesForm.Designer.cs
--------------------------------------------------------------------------------
﻿namespace MinimalFirewall
{
    partial class BrowseServicesForm
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.TextBox searchTextBox;
        private System.Windows.Forms.ListBox servicesListBox;
        private System.Windows.Forms.Button okButton;
        private System.Windows.Forms.Button cancelButton;
        private System.Windows.Forms.Panel bottomPanel;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        private void InitializeComponent()
        {
            this.searchTextBox = new System.Windows.Forms.TextBox();
            this.servicesListBox = new System.Windows.Forms.ListBox();
            this.okButton = new System.Windows.Forms.Button();
            this.cancelButton = new System.Windows.Forms.Button();
            this.bottomPanel = new System.Windows.Forms.Panel();
            this.bottomPanel.SuspendLayout();
            this.SuspendLayout();
            // 
            // searchTextBox
            // 
            this.searchTextBox.Dock = System.Windows.Forms.DockStyle.Top;
            this.searchTextBox.Location = new System.Drawing.Point(10, 10);
            this.searchTextBox.Name = "searchTextBox";
            this.searchTextBox.PlaceholderText = "Search services...";
            this.searchTextBox.Size = new System.Drawing.Size(464, 23);
            this.searchTextBox.TabIndex = 0;
            this.searchTextBox.TextChanged += new System.EventHandler(this.searchTextBox_TextChanged);
            // 
            // servicesListBox
            // 
            this.servicesListBox.Dock = System.Windows.Forms.DockStyle.Fill;
            this.servicesListBox.FormattingEnabled = true;
            this.servicesListBox.IntegralHeight = false;
            this.servicesListBox.ItemHeight = 15;
            this.servicesListBox.Location = new System.Drawing.Point(10, 33);
            this.servicesListBox.Name = "servicesListBox";
            this.servicesListBox.Size = new System.Drawing.Size(464, 358);
            this.servicesListBox.TabIndex = 1;
            this.servicesListBox.DoubleClick += new System.EventHandler(this.servicesListBox_DoubleClick);
            // 
            // okButton
            // 
            this.okButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.okButton.Location = new System.Drawing.Point(265, 12);
            this.okButton.Name = "okButton";
            this.okButton.Size = new System.Drawing.Size(100, 36);
            this.okButton.TabIndex = 0;
            this.okButton.Text = "OK";
            this.okButton.UseVisualStyleBackColor = true;
            this.okButton.Click += new System.EventHandler(this.okButton_Click);
            // 
            // cancelButton
            // 
            this.cancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.cancelButton.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.cancelButton.Location = new System.Drawing.Point(371, 12);
            this.cancelButton.Name = "cancelButton";
            this.cancelButton.Size = new System.Drawing.Size(100, 36);
            this.cancelButton.TabIndex = 1;
            this.cancelButton.Text = "Cancel";
            this.cancelButton.UseVisualStyleBackColor = true;
            this.cancelButton.Click += new System.EventHandler(this.cancelButton_Click);
            // 
            // bottomPanel
            // 
            this.bottomPanel.Controls.Add(this.cancelButton);
            this.bottomPanel.Controls.Add(this.okButton);
            this.bottomPanel.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.bottomPanel.Location = new System.Drawing.Point(0, 391);
            this.bottomPanel.Name = "bottomPanel";
            this.bottomPanel.Size = new System.Drawing.Size(484, 60);
            this.bottomPanel.TabIndex = 2;
            // 
            // BrowseServicesForm
            // 
            this.AcceptButton = this.okButton;
            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.CancelButton = this.cancelButton;
            this.ClientSize = new System.Drawing.Size(484, 451);
            this.Controls.Add(this.servicesListBox);
            this.Controls.Add(this.searchTextBox);
            this.Controls.Add(this.bottomPanel);
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.MinimumSize = new System.Drawing.Size(400, 300);
            this.Name = "BrowseServicesForm";
            this.Padding = new System.Windows.Forms.Padding(10, 10, 10, 0);
            this.ShowIcon = false;
            this.ShowInTaskbar = false;
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = "Browse Services";
            this.bottomPanel.ResumeLayout(false);
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        #endregion
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/CreateAdvancedRuleForm.cs
--------------------------------------------------------------------------------
﻿using DarkModeForms;
using MinimalFirewall.TypedObjects;
using System.ComponentModel;
using NetFwTypeLib;
using MinimalFirewall.Groups;

namespace MinimalFirewall
{
    public partial class CreateAdvancedRuleForm : Form
    {
        private readonly DarkModeCS dm;
        private readonly FirewallActionsService _actionsService;
        private readonly FirewallRuleViewModel _viewModel;
        private readonly FirewallGroupManager _groupManager;
        private readonly ToolTip _toolTip;
        public AdvancedRuleViewModel? RuleVm { get; private set; }
        private readonly AdvancedRuleViewModel? _originalRuleVm;
        public CreateAdvancedRuleForm(INetFwPolicy2 firewallPolicy, FirewallActionsService actionsService)
        {
            InitializeComponent();
            dm = new DarkModeCS(this);
            _actionsService = actionsService;
            _groupManager = new FirewallGroupManager(firewallPolicy);
            _toolTip = new ToolTip();

            _viewModel = new FirewallRuleViewModel();
            _viewModel.PropertyChanged += ViewModel_PropertyChanged;

            protocolComboBox.Items.AddRange([
                ProtocolTypes.Any,
                ProtocolTypes.TCP,
                ProtocolTypes.UDP,
                ProtocolTypes.ICMPv4,
                ProtocolTypes.ICMPv6,
                ProtocolTypes.IGMP
            ]);
            protocolComboBox.SelectedItem = ProtocolTypes.Any;

            LoadFirewallGroups();
            _toolTip.SetToolTip(groupComboBox, "Select an existing group, or type a new name to create a new group.");
            _toolTip.SetToolTip(serviceNameTextBox, "Enter the exact service name (not display name).");
            this.Load += (sender, e) =>
            {
                var workingArea = Screen.FromControl(this).WorkingArea;
                if (this.Height > workingArea.Height)
                {
                    this.Height = workingArea.Height;
                }
                this.CenterToParent();
            };
        }

        public CreateAdvancedRuleForm(INetFwPolicy2 firewallPolicy, FirewallActionsService actionsService, string appPath, string direction)
               : this(firewallPolicy, actionsService)
        {
            programPathTextBox.Text = appPath;
            if (direction.Equals("Inbound", StringComparison.OrdinalIgnoreCase))
            {
                inboundRadioButton.Checked = true;
            }
            else if (direction.Equals("Outbound", StringComparison.OrdinalIgnoreCase))
            {
                outboundRadioButton.Checked = true;
            }
            else
            {
                bothDirRadioButton.Checked = true;
            }
        }

        public CreateAdvancedRuleForm(INetFwPolicy2 firewallPolicy, FirewallActionsService actionsService, AdvancedRuleViewModel ruleToEdit)
            : this(firewallPolicy, actionsService)
        {
            _originalRuleVm = ruleToEdit;
            this.Text = "Edit Advanced Rule";
            PopulateFormFromRule(ruleToEdit);
        }

        private void PopulateFormFromRule(AdvancedRuleViewModel rule)
        {
            ruleNameTextBox.Text = rule.Name;
            descriptionTextBox.Text = rule.Description;
            enabledCheckBox.Checked = rule.IsEnabled;

            if (rule.Status == "Allow")
                allowRadioButton.Checked = true;
            else
                blockRadioButton.Checked = true;

            if (rule.Direction == (Directions.Incoming | Directions.Outgoing))
                bothDirRadioButton.Checked = true;
            else if (rule.Direction == Directions.Incoming)
                inboundRadioButton.Checked = true;
            else
                outboundRadioButton.Checked = true;

            programPathTextBox.Text = rule.ApplicationName;
            serviceNameTextBox.Text = (rule.ServiceName == "*" || string.IsNullOrEmpty(rule.ServiceName)) ? string.Empty : rule.ServiceName;

            int protocolIndex = -1;
            var items = protocolComboBox.Items.OfType<ProtocolTypes>().ToList();
            for (int i = 0; i < items.Count; i++)
            {
                if (items[i].Value == rule.Protocol)
                {
                    protocolIndex = i;
                    break;
                }
            }

            if (protocolIndex != -1)
                protocolComboBox.SelectedIndex = protocolIndex;
            else
                protocolComboBox.SelectedItem = ProtocolTypes.Any;
            _viewModel.SelectedProtocol = (ProtocolTypes)protocolComboBox.SelectedItem;

            localPortsTextBox.Text = rule.LocalPorts;
            remotePortsTextBox.Text = rule.RemotePorts;

            localAddressTextBox.Text = rule.LocalAddresses;
            remoteAddressTextBox.Text = rule.RemoteAddresses;

            domainCheckBox.Checked = rule.Profiles.Contains("Domain") ||
                rule.Profiles == "All";
            privateCheckBox.Checked = rule.Profiles.Contains("Private") || rule.Profiles == "All";
            publicCheckBox.Checked = rule.Profiles.Contains("Public") || rule.Profiles == "All";

            groupComboBox.Text = rule.Grouping;
            lanCheckBox.Checked = rule.InterfaceTypes.Contains("Lan") || rule.InterfaceTypes == "All";
            wirelessCheckBox.Checked = rule.InterfaceTypes.Contains("Wireless") || rule.InterfaceTypes == "All";
            remoteAccessCheckBox.Checked = rule.InterfaceTypes.Contains("RemoteAccess") ||
                rule.InterfaceTypes == "All";

            if (_viewModel.IsIcmpSectionVisible)
            {
                icmpTypesAndCodesTextBox.Text = rule.IcmpTypesAndCodes;
            }
        }


        private void LoadFirewallGroups()
        {
            var groups = _groupManager.GetAllGroups();
            var groupNames = new HashSet<string>(groups.Select(g => g.Name));

            groupNames.Add(MFWConstants.MainRuleGroup);
            groupNames.Add(MFWConstants.WildcardRuleGroup);

            groupComboBox.Items.Clear();
            foreach (var name in groupNames.OrderBy(n => n))
            {
                groupComboBox.Items.Add(name);
            }

            groupComboBox.SelectedItem = MFWConstants.MainRuleGroup;
        }

        private void ViewModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(_viewModel.IsPortSectionVisible))
            {
                portsGroupBox.Visible = _viewModel.IsPortSectionVisible;
            }
            else if (e.PropertyName == nameof(_viewModel.IsIcmpSectionVisible))
            {
                icmpGroupBox.Visible = _viewModel.IsIcmpSectionVisible;
            }
        }

        private void ProtocolComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (protocolComboBox.SelectedItem is ProtocolTypes selectedProtocol)
            {
                _viewModel.SelectedProtocol = selectedProtocol;
            }
        }

        private void OkButton_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(ruleNameTextBox.Text))
            {
                MessageBox.Show("Rule name cannot be empty.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (protocolComboBox.SelectedItem is not ProtocolTypes selectedProtocol)
            {
                MessageBox.Show("A valid protocol must be selected.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (_originalRuleVm == null)
            {
                bool hasService = !string.IsNullOrWhiteSpace(serviceNameTextBox.Text);
                bool hasWildcardPorts = string.IsNullOrWhiteSpace(localPortsTextBox.Text) || localPortsTextBox.Text.Trim() == "*" ||
                                        string.IsNullOrWhiteSpace(remotePortsTextBox.Text) || remotePortsTextBox.Text.Trim() == "*";
                bool protocolIsNotAny = selectedProtocol.Value != ProtocolTypes.Any.Value;
                if (hasService && hasWildcardPorts && protocolIsNotAny)
                {
                    MessageBox.Show("When creating a rule for a service with a specific protocol (like TCP or UDP), you must also specify concrete Local and Remote ports. Wildcards (*) are only allowed if the protocol is 'Any'.", "Validation Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
            }

            string groupName = groupComboBox.Text;
            if (string.IsNullOrWhiteSpace(groupName))
            {
                groupName = MFWConstants.MainRuleGroup;
            }

            var rule = new AdvancedRuleViewModel
            {
                Name = ruleNameTextBox.Text,
                Description = descriptionTextBox.Text,
                IsEnabled = enabledCheckBox.Checked,
                Grouping = groupName,
                Status = allowRadioButton.Checked ?
                    "Allow" : "Block",
                Direction = GetDirection(),
                Protocol = selectedProtocol.Value,
                ProtocolName = selectedProtocol.Name,
                ApplicationName = programPathTextBox.Text,
                ServiceName = serviceNameTextBox.Text,
                LocalPorts = string.IsNullOrWhiteSpace(localPortsTextBox.Text) ?
                    "*" : localPortsTextBox.Text,
                RemotePorts = string.IsNullOrWhiteSpace(remotePortsTextBox.Text) ?
                    "*" : remotePortsTextBox.Text,
                LocalAddresses = string.IsNullOrWhiteSpace(localAddressTextBox.Text) ?
                    "*" : localAddressTextBox.Text,
                RemoteAddresses = string.IsNullOrWhiteSpace(remoteAddressTextBox.Text) ?
                    "*" : remoteAddressTextBox.Text,
                Profiles = GetProfileString(),
                Type = RuleType.Advanced,
                InterfaceTypes = GetInterfaceTypes(),
                IcmpTypesAndCodes = icmpTypesAndCodesTextBox.Text
            };
            this.RuleVm = rule;

            DialogResult = DialogResult.OK;
            Close();
        }

        private Directions GetDirection()
        {
            if (inboundRadioButton.Checked) return Directions.Incoming;
            if (outboundRadioButton.Checked) return Directions.Outgoing;
            return Directions.Incoming | Directions.Outgoing;
        }

        private string GetProfileString()
        {
            var profiles = new List<string>(3);
            if (domainCheckBox.Checked) profiles.Add("Domain");
            if (privateCheckBox.Checked) profiles.Add("Private");
            if (publicCheckBox.Checked) profiles.Add("Public");
            if (profiles.Count == 3 || profiles.Count == 0) return "All";
            return string.Join(", ", profiles);
        }

        public string GetInterfaceTypes()
        {
            var types = new List<string>(3);
            if (remoteAccessCheckBox.Checked) types.Add("RemoteAccess");
            if (wirelessCheckBox.Checked) types.Add("Wireless");
            if (lanCheckBox.Checked) types.Add("Lan");
            if (types.Count == 3 || types.Count == 0) return "All";
            return string.Join(",", types);
        }

        private void BrowseButton_Click(object sender, EventArgs e)
        {
            using var openFileDialog = new OpenFileDialog
            {
                Filter = "Executables (*.exe)|*.exe|All files (*.*)|*.*",
                Title = "Select a program"
            };
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                programPathTextBox.Text = openFileDialog.FileName;
            }
        }

        private void browseServiceButton_Click(object sender, EventArgs e)
        {
            var services = SystemDiscoveryService.GetServicesWithExePaths();
            using var browseForm = new BrowseServicesForm(services);
            if (browseForm.ShowDialog(this) == DialogResult.OK && browseForm.SelectedService != null)
            {
                serviceNameTextBox.Text = browseForm.SelectedService.ServiceName;
                if (!string.IsNullOrEmpty(browseForm.SelectedService.ExePath))
                {
                    programPathTextBox.Text = PathResolver.NormalizePath(browseForm.SelectedService.ExePath);
                }
            }
        }

        private void CancelButton_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel;
            this.Close();
        }

        private void AddGroupButton_Click(object sender, EventArgs e)
        {
            string newGroupName = groupComboBox.Text;
            if (!string.IsNullOrWhiteSpace(newGroupName) && !newGroupName.EndsWith(MFWConstants.MfwRuleSuffix))
            {
                newGroupName += MFWConstants.MfwRuleSuffix;
            }

            if (!groupComboBox.Items.Contains(newGroupName))
            {
                groupComboBox.Items.Add(newGroupName);
                groupComboBox.SelectedItem = newGroupName;
            }
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/CreateAdvancedRuleForm.Designer.cs
--------------------------------------------------------------------------------
﻿namespace MinimalFirewall
{
    partial class CreateAdvancedRuleForm
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.Label labelName;
        private System.Windows.Forms.TextBox ruleNameTextBox;
        private System.Windows.Forms.Label labelDescription;
        private System.Windows.Forms.TextBox descriptionTextBox;
        private System.Windows.Forms.CheckBox enabledCheckBox;
        private System.Windows.Forms.GroupBox actionGroupBox;
        private System.Windows.Forms.RadioButton blockRadioButton;
        private System.Windows.Forms.RadioButton allowRadioButton;
        private System.Windows.Forms.GroupBox directionGroupBox;
        private System.Windows.Forms.RadioButton bothDirRadioButton;
        private System.Windows.Forms.RadioButton outboundRadioButton;
        private System.Windows.Forms.RadioButton inboundRadioButton;
        private System.Windows.Forms.GroupBox programGroupBox;
        private System.Windows.Forms.Button browseButton;
        private System.Windows.Forms.TextBox programPathTextBox;
        private System.Windows.Forms.Label labelProgram;
        private System.Windows.Forms.TextBox serviceNameTextBox;
        private System.Windows.Forms.Label labelService;
        private System.Windows.Forms.GroupBox protocolGroupBox;
        private DarkModeForms.FlatComboBox protocolComboBox;
        private System.Windows.Forms.Label labelProtocol;
        private System.Windows.Forms.GroupBox portsGroupBox;
        private System.Windows.Forms.TextBox remotePortsTextBox;
        private System.Windows.Forms.Label labelRemotePorts;
        private System.Windows.Forms.TextBox localPortsTextBox;
        private System.Windows.Forms.Label labelLocalPorts;
        private System.Windows.Forms.GroupBox icmpGroupBox;
        private System.Windows.Forms.TextBox icmpTypesAndCodesTextBox;
        private System.Windows.Forms.Label labelIcmpInfo;
        private System.Windows.Forms.GroupBox scopeGroupBox;
        private System.Windows.Forms.TextBox remoteAddressTextBox;
        private System.Windows.Forms.Label labelRemoteAddress;
        private System.Windows.Forms.TextBox localAddressTextBox;
        private System.Windows.Forms.Label labelLocalAddress;
        private System.Windows.Forms.GroupBox profilesGroupBox;
        private System.Windows.Forms.CheckBox publicCheckBox;
        private System.Windows.Forms.CheckBox privateCheckBox;
        private System.Windows.Forms.CheckBox domainCheckBox;
        private System.Windows.Forms.Button okButton;
        private System.Windows.Forms.Button cancelButton;
        private System.Windows.Forms.GroupBox interfaceTypesGroupBox;
        private System.Windows.Forms.CheckBox lanCheckBox;
        private System.Windows.Forms.CheckBox wirelessCheckBox;
        private System.Windows.Forms.CheckBox remoteAccessCheckBox;
        private System.Windows.Forms.Label labelGroup;
        private DarkModeForms.FlatComboBox groupComboBox;
        private System.Windows.Forms.Button addGroupButton;
        private System.Windows.Forms.Panel mainPanel;
        private System.Windows.Forms.Panel bottomPanel;
        private System.Windows.Forms.Label programPathNoteLabel;
        private System.Windows.Forms.Button browseServiceButton;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        private void InitializeComponent()
        {
            this.labelName = new System.Windows.Forms.Label();
            this.ruleNameTextBox = new System.Windows.Forms.TextBox();
            this.labelDescription = new System.Windows.Forms.Label();
            this.descriptionTextBox = new System.Windows.Forms.TextBox();
            this.enabledCheckBox = new System.Windows.Forms.CheckBox();
            this.actionGroupBox = new System.Windows.Forms.GroupBox();
            this.blockRadioButton = new System.Windows.Forms.RadioButton();
            this.allowRadioButton = new System.Windows.Forms.RadioButton();
            this.directionGroupBox = new System.Windows.Forms.GroupBox();
            this.bothDirRadioButton = new System.Windows.Forms.RadioButton();
            this.outboundRadioButton = new System.Windows.Forms.RadioButton();
            this.inboundRadioButton = new System.Windows.Forms.RadioButton();
            this.programGroupBox = new System.Windows.Forms.GroupBox();
            this.browseServiceButton = new System.Windows.Forms.Button();
            this.programPathNoteLabel = new System.Windows.Forms.Label();
            this.serviceNameTextBox = new System.Windows.Forms.TextBox();
            this.labelService = new System.Windows.Forms.Label();
            this.browseButton = new System.Windows.Forms.Button();
            this.programPathTextBox = new System.Windows.Forms.TextBox();
            this.labelProgram = new System.Windows.Forms.Label();
            this.protocolGroupBox = new System.Windows.Forms.GroupBox();
            this.protocolComboBox = new DarkModeForms.FlatComboBox();
            this.labelProtocol = new System.Windows.Forms.Label();
            this.portsGroupBox = new System.Windows.Forms.GroupBox();
            this.remotePortsTextBox = new System.Windows.Forms.TextBox();
            this.labelRemotePorts = new System.Windows.Forms.Label();
            this.localPortsTextBox = new System.Windows.Forms.TextBox();
            this.labelLocalPorts = new System.Windows.Forms.Label();
            this.icmpGroupBox = new System.Windows.Forms.GroupBox();
            this.icmpTypesAndCodesTextBox = new System.Windows.Forms.TextBox();
            this.labelIcmpInfo = new System.Windows.Forms.Label();
            this.scopeGroupBox = new System.Windows.Forms.GroupBox();
            this.remoteAddressTextBox = new System.Windows.Forms.TextBox();
            this.labelRemoteAddress = new System.Windows.Forms.Label();
            this.localAddressTextBox = new System.Windows.Forms.TextBox();
            this.labelLocalAddress = new System.Windows.Forms.Label();
            this.profilesGroupBox = new System.Windows.Forms.GroupBox();
            this.publicCheckBox = new System.Windows.Forms.CheckBox();
            this.privateCheckBox = new System.Windows.Forms.CheckBox();
            this.domainCheckBox = new System.Windows.Forms.CheckBox();
            this.okButton = new System.Windows.Forms.Button();
            this.cancelButton = new System.Windows.Forms.Button();
            this.interfaceTypesGroupBox = new System.Windows.Forms.GroupBox();
            this.lanCheckBox = new System.Windows.Forms.CheckBox();
            this.wirelessCheckBox = new System.Windows.Forms.CheckBox();
            this.remoteAccessCheckBox = new System.Windows.Forms.CheckBox();
            this.labelGroup = new System.Windows.Forms.Label();
            this.groupComboBox = new DarkModeForms.FlatComboBox();
            this.addGroupButton = new System.Windows.Forms.Button();
            this.mainPanel = new System.Windows.Forms.Panel();
            this.bottomPanel = new System.Windows.Forms.Panel();
            this.actionGroupBox.SuspendLayout();
            this.directionGroupBox.SuspendLayout();
            this.programGroupBox.SuspendLayout();
            this.protocolGroupBox.SuspendLayout();
            this.portsGroupBox.SuspendLayout();
            this.icmpGroupBox.SuspendLayout();
            this.scopeGroupBox.SuspendLayout();
            this.profilesGroupBox.SuspendLayout();
            this.interfaceTypesGroupBox.SuspendLayout();
            this.mainPanel.SuspendLayout();
            this.bottomPanel.SuspendLayout();
            this.SuspendLayout();
            // 
            // labelName
            // 
            this.labelName.AutoSize = true;
            this.labelName.Location = new System.Drawing.Point(12, 15);
            this.labelName.Name = "labelName";
            this.labelName.Size = new System.Drawing.Size(39, 15);
            this.labelName.TabIndex = 0;
            this.labelName.Text = "Name";
            // 
            // ruleNameTextBox
            // 
            this.ruleNameTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.ruleNameTextBox.Location = new System.Drawing.Point(80, 12);
            this.ruleNameTextBox.Name = "ruleNameTextBox";
            this.ruleNameTextBox.Size = new System.Drawing.Size(692, 23);
            this.ruleNameTextBox.TabIndex = 1;
            // 
            // labelDescription
            // 
            this.labelDescription.AutoSize = true;
            this.labelDescription.Location = new System.Drawing.Point(12, 44);
            this.labelDescription.Name = "labelDescription";
            this.labelDescription.Size = new System.Drawing.Size(67, 15);
            this.labelDescription.TabIndex = 2;
            this.labelDescription.Text = "Description";
            // 
            // descriptionTextBox
            // 
            this.descriptionTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.descriptionTextBox.Location = new System.Drawing.Point(80, 41);
            this.descriptionTextBox.Name = "descriptionTextBox";
            this.descriptionTextBox.Size = new System.Drawing.Size(692, 23);
            this.descriptionTextBox.TabIndex = 3;
            // 
            // enabledCheckBox
            // 
            this.enabledCheckBox.AutoSize = true;
            this.enabledCheckBox.Checked = true;
            this.enabledCheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
            this.enabledCheckBox.Location = new System.Drawing.Point(15, 75);
            this.enabledCheckBox.Name = "enabledCheckBox";
            this.enabledCheckBox.Size = new System.Drawing.Size(92, 19);
            this.enabledCheckBox.TabIndex = 4;
            this.enabledCheckBox.Text = "Enabled";
            this.enabledCheckBox.UseVisualStyleBackColor = true;
            // 
            // actionGroupBox
            // 
            this.actionGroupBox.Controls.Add(this.blockRadioButton);
            this.actionGroupBox.Controls.Add(this.allowRadioButton);
            this.actionGroupBox.Location = new System.Drawing.Point(15, 100);
            this.actionGroupBox.Name = "actionGroupBox";
            this.actionGroupBox.Size = new System.Drawing.Size(130, 105);
            this.actionGroupBox.TabIndex = 5;
            this.actionGroupBox.TabStop = false;
            this.actionGroupBox.Text = "Action";
            // 
            // blockRadioButton
            // 
            this.blockRadioButton.AutoSize = true;
            this.blockRadioButton.Location = new System.Drawing.Point(15, 60);
            this.blockRadioButton.Name = "blockRadioButton";
            this.blockRadioButton.Size = new System.Drawing.Size(53, 19);
            this.blockRadioButton.TabIndex = 1;
            this.blockRadioButton.Text = "Block";
            this.blockRadioButton.UseVisualStyleBackColor = true;
            // 
            // allowRadioButton
            // 
            this.allowRadioButton.AutoSize = true;
            this.allowRadioButton.Checked = true;
            this.allowRadioButton.Location = new System.Drawing.Point(15, 30);
            this.allowRadioButton.Name = "allowRadioButton";
            this.allowRadioButton.Size = new System.Drawing.Size(54, 19);
            this.allowRadioButton.TabIndex = 0;
            this.allowRadioButton.TabStop = true;
            this.allowRadioButton.Text = "Allow";
            this.allowRadioButton.UseVisualStyleBackColor = true;
            // 
            // directionGroupBox
            // 
            this.directionGroupBox.Controls.Add(this.bothDirRadioButton);
            this.directionGroupBox.Controls.Add(this.outboundRadioButton);
            this.directionGroupBox.Controls.Add(this.inboundRadioButton);
            this.directionGroupBox.Location = new System.Drawing.Point(151, 100);
            this.directionGroupBox.Name = "directionGroupBox";
            this.directionGroupBox.Size = new System.Drawing.Size(130, 105);
            this.directionGroupBox.TabIndex = 6;
            this.directionGroupBox.TabStop = false;
            this.directionGroupBox.Text = "Direction";
            // 
            // bothDirRadioButton
            // 
            this.bothDirRadioButton.AutoSize = true;
            this.bothDirRadioButton.Location = new System.Drawing.Point(15, 72);
            this.bothDirRadioButton.Name = "bothDirRadioButton";
            this.bothDirRadioButton.Size = new System.Drawing.Size(50, 19);
            this.bothDirRadioButton.TabIndex = 2;
            this.bothDirRadioButton.Text = "Both";
            this.bothDirRadioButton.UseVisualStyleBackColor = true;
            // 
            // outboundRadioButton
            // 
            this.outboundRadioButton.AutoSize = true;
            this.outboundRadioButton.Checked = true;
            this.outboundRadioButton.Location = new System.Drawing.Point(15, 47);
            this.outboundRadioButton.Name = "outboundRadioButton";
            this.outboundRadioButton.Size = new System.Drawing.Size(78, 19);
            this.outboundRadioButton.TabIndex = 1;
            this.outboundRadioButton.TabStop = true;
            this.outboundRadioButton.Text = "Outbound";
            this.outboundRadioButton.UseVisualStyleBackColor = true;
            // 
            // inboundRadioButton
            // 
            this.inboundRadioButton.AutoSize = true;
            this.inboundRadioButton.Location = new System.Drawing.Point(15, 22);
            this.inboundRadioButton.Name = "inboundRadioButton";
            this.inboundRadioButton.Size = new System.Drawing.Size(70, 19);
            this.inboundRadioButton.TabIndex = 0;
            this.inboundRadioButton.Text = "Inbound";
            this.inboundRadioButton.UseVisualStyleBackColor = true;
            // 
            // programGroupBox
            // 
            this.programGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.programGroupBox.Controls.Add(this.browseServiceButton);
            this.programGroupBox.Controls.Add(this.programPathNoteLabel);
            this.programGroupBox.Controls.Add(this.serviceNameTextBox);
            this.programGroupBox.Controls.Add(this.labelService);
            this.programGroupBox.Controls.Add(this.browseButton);
            this.programGroupBox.Controls.Add(this.programPathTextBox);
            this.programGroupBox.Controls.Add(this.labelProgram);
            this.programGroupBox.Location = new System.Drawing.Point(15, 211);
            this.programGroupBox.Name = "programGroupBox";
            this.programGroupBox.Size = new System.Drawing.Size(757, 140);
            this.programGroupBox.TabIndex = 7;
            this.programGroupBox.TabStop = false;
            this.programGroupBox.Text = "Program and Service";
            // 
            // browseServiceButton
            // 
            this.browseServiceButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.browseServiceButton.Location = new System.Drawing.Point(657, 82);
            this.browseServiceButton.Name = "browseServiceButton";
            this.browseServiceButton.Size = new System.Drawing.Size(94, 23);
            this.browseServiceButton.TabIndex = 7;
            this.browseServiceButton.Text = "Browse...";
            this.browseServiceButton.UseVisualStyleBackColor = true;
            this.browseServiceButton.Click += new System.EventHandler(this.browseServiceButton_Click);
            // 
            // programPathNoteLabel
            // 
            this.programPathNoteLabel.AutoSize = true;
            this.programPathNoteLabel.ForeColor = System.Drawing.SystemColors.GrayText;
            this.programPathNoteLabel.Location = new System.Drawing.Point(75, 50);
            this.programPathNoteLabel.Name = "programPathNoteLabel";
            this.programPathNoteLabel.Size = new System.Drawing.Size(350, 15);
            this.programPathNoteLabel.TabIndex = 6;
            this.programPathNoteLabel.Text = "Leave blank to apply the rule to any program hosting the service.";
            // 
            // serviceNameTextBox
            // 
            this.serviceNameTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.serviceNameTextBox.Location = new System.Drawing.Point(75, 82);
            this.serviceNameTextBox.Name = "serviceNameTextBox";
            this.serviceNameTextBox.Size = new System.Drawing.Size(576, 23);
            this.serviceNameTextBox.TabIndex = 4;
            // 
            // labelService
            // 
            this.labelService.AutoSize = true;
            this.labelService.Location = new System.Drawing.Point(15, 85);
            this.labelService.Name = "labelService";
            this.labelService.Size = new System.Drawing.Size(44, 15);
            this.labelService.TabIndex = 3;
            this.labelService.Text = "Service";
            // 
            // browseButton
            // 
            this.browseButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.browseButton.Location = new System.Drawing.Point(657, 22);
            this.browseButton.Name = "browseButton";
            this.browseButton.Size = new System.Drawing.Size(94, 23);
            this.browseButton.TabIndex = 2;
            this.browseButton.Text = "Browse...";
            this.browseButton.UseVisualStyleBackColor = true;
            this.browseButton.Click += new System.EventHandler(this.BrowseButton_Click);
            // 
            // programPathTextBox
            // 
            this.programPathTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.programPathTextBox.Location = new System.Drawing.Point(75, 22);
            this.programPathTextBox.Name = "programPathTextBox";
            this.programPathTextBox.Size = new System.Drawing.Size(576, 23);
            this.programPathTextBox.TabIndex = 1;
            // 
            // labelProgram
            // 
            this.labelProgram.AutoSize = true;
            this.labelProgram.Location = new System.Drawing.Point(15, 25);
            this.labelProgram.Name = "labelProgram";
            this.labelProgram.Size = new System.Drawing.Size(53, 15);
            this.labelProgram.TabIndex = 0;
            this.labelProgram.Text = "Program";
            // 
            // protocolGroupBox
            // 
            this.protocolGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.protocolGroupBox.Controls.Add(this.protocolComboBox);
            this.protocolGroupBox.Controls.Add(this.labelProtocol);
            this.protocolGroupBox.Location = new System.Drawing.Point(15, 357);
            this.protocolGroupBox.Name = "protocolGroupBox";
            this.protocolGroupBox.Size = new System.Drawing.Size(757, 60);
            this.protocolGroupBox.TabIndex = 8;
            this.protocolGroupBox.TabStop = false;
            this.protocolGroupBox.Text = "Protocol";
            // 
            // protocolComboBox
            // 
            this.protocolComboBox.BorderColor = System.Drawing.Color.Gray;
            this.protocolComboBox.ButtonColor = System.Drawing.Color.LightGray;
            this.protocolComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.protocolComboBox.FormattingEnabled = true;
            this.protocolComboBox.Location = new System.Drawing.Point(75, 22);
            this.protocolComboBox.Name = "protocolComboBox";
            this.protocolComboBox.Size = new System.Drawing.Size(150, 23);
            this.protocolComboBox.TabIndex = 1;
            this.protocolComboBox.SelectedIndexChanged += new System.EventHandler(this.ProtocolComboBox_SelectedIndexChanged);
            // 
            // labelProtocol
            // 
            this.labelProtocol.AutoSize = true;
            this.labelProtocol.Location = new System.Drawing.Point(15, 25);
            this.labelProtocol.Name = "labelProtocol";
            this.labelProtocol.Size = new System.Drawing.Size(52, 15);
            this.labelProtocol.TabIndex = 0;
            this.labelProtocol.Text = "Protocol";
            // 
            // portsGroupBox
            // 
            this.portsGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.portsGroupBox.Controls.Add(this.remotePortsTextBox);
            this.portsGroupBox.Controls.Add(this.labelRemotePorts);
            this.portsGroupBox.Controls.Add(this.localPortsTextBox);
            this.portsGroupBox.Controls.Add(this.labelLocalPorts);
            this.portsGroupBox.Location = new System.Drawing.Point(15, 423);
            this.portsGroupBox.Name = "portsGroupBox";
            this.portsGroupBox.Size = new System.Drawing.Size(757, 90);
            this.portsGroupBox.TabIndex = 9;
            this.portsGroupBox.TabStop = false;
            this.portsGroupBox.Text = "Ports";
            this.portsGroupBox.Visible = false;
            // 
            // remotePortsTextBox
            // 
            this.remotePortsTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.remotePortsTextBox.Location = new System.Drawing.Point(90, 53);
            this.remotePortsTextBox.Name = "remotePortsTextBox";
            this.remotePortsTextBox.Size = new System.Drawing.Size(657, 23);
            this.remotePortsTextBox.TabIndex = 3;
            this.remotePortsTextBox.Text = "*";
            // 
            // labelRemotePorts
            // 
            this.labelRemotePorts.AutoSize = true;
            this.labelRemotePorts.Location = new System.Drawing.Point(6, 56);
            this.labelRemotePorts.Name = "labelRemotePorts";
            this.labelRemotePorts.Size = new System.Drawing.Size(77, 15);
            this.labelRemotePorts.TabIndex = 2;
            this.labelRemotePorts.Text = "Remote Ports";
            // 
            // localPortsTextBox
            // 
            this.localPortsTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.localPortsTextBox.Location = new System.Drawing.Point(90, 22);
            this.localPortsTextBox.Name = "localPortsTextBox";
            this.localPortsTextBox.Size = new System.Drawing.Size(657, 23);
            this.localPortsTextBox.TabIndex = 1;
            this.localPortsTextBox.Text = "*";
            // 
            // labelLocalPorts
            // 
            this.labelLocalPorts.AutoSize = true;
            this.labelLocalPorts.Location = new System.Drawing.Point(6, 25);
            this.labelLocalPorts.Name = "labelLocalPorts";
            this.labelLocalPorts.Size = new System.Drawing.Size(65, 15);
            this.labelLocalPorts.TabIndex = 0;
            this.labelLocalPorts.Text = "Local Ports";
            // 
            // icmpGroupBox
            // 
            this.icmpGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.icmpGroupBox.Controls.Add(this.icmpTypesAndCodesTextBox);
            this.icmpGroupBox.Controls.Add(this.labelIcmpInfo);
            this.icmpGroupBox.Location = new System.Drawing.Point(15, 423);
            this.icmpGroupBox.Name = "icmpGroupBox";
            this.icmpGroupBox.Size = new System.Drawing.Size(757, 90);
            this.icmpGroupBox.TabIndex = 10;
            this.icmpGroupBox.TabStop = false;
            this.icmpGroupBox.Text = "ICMP Settings";
            this.icmpGroupBox.Visible = false;
            // 
            // icmpTypesAndCodesTextBox
            // 
            this.icmpTypesAndCodesTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.icmpTypesAndCodesTextBox.Location = new System.Drawing.Point(110, 22);
            this.icmpTypesAndCodesTextBox.Name = "icmpTypesAndCodesTextBox";
            this.icmpTypesAndCodesTextBox.Size = new System.Drawing.Size(637, 23);
            this.icmpTypesAndCodesTextBox.TabIndex = 1;
            this.icmpTypesAndCodesTextBox.Text = "*";
            // 
            // labelIcmpInfo
            // 
            this.labelIcmpInfo.AutoSize = true;
            this.labelIcmpInfo.Location = new System.Drawing.Point(15, 25);
            this.labelIcmpInfo.Name = "labelIcmpInfo";
            this.labelIcmpInfo.Size = new System.Drawing.Size(89, 15);
            this.labelIcmpInfo.TabIndex = 0;
            this.labelIcmpInfo.Text = "Type:Code (e.g. 8:0)";
            // 
            // scopeGroupBox
            // 
            this.scopeGroupBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.scopeGroupBox.Controls.Add(this.remoteAddressTextBox);
            this.scopeGroupBox.Controls.Add(this.labelRemoteAddress);
            this.scopeGroupBox.Controls.Add(this.localAddressTextBox);
            this.scopeGroupBox.Controls.Add(this.labelLocalAddress);
            this.scopeGroupBox.Location = new System.Drawing.Point(15, 519);
            this.scopeGroupBox.Name = "scopeGroupBox";
            this.scopeGroupBox.Size = new System.Drawing.Size(757, 90);
            this.scopeGroupBox.TabIndex = 11;
            this.scopeGroupBox.TabStop = false;
            this.scopeGroupBox.Text = "Scope (Addresses)";
            // 
            // remoteAddressTextBox
            // 
            this.remoteAddressTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.remoteAddressTextBox.Location = new System.Drawing.Point(105, 53);
            this.remoteAddressTextBox.Name = "remoteAddressTextBox";
            this.remoteAddressTextBox.Size = new System.Drawing.Size(642, 23);
            this.remoteAddressTextBox.TabIndex = 3;
            this.remoteAddressTextBox.Text = "*";
            // 
            // labelRemoteAddress
            // 
            this.labelRemoteAddress.AutoSize = true;
            this.labelRemoteAddress.Location = new System.Drawing.Point(6, 56);
            this.labelRemoteAddress.Name = "labelRemoteAddress";
            this.labelRemoteAddress.Size = new System.Drawing.Size(93, 15);
            this.labelRemoteAddress.TabIndex = 2;
            this.labelRemoteAddress.Text = "Remote Address";
            // 
            // localAddressTextBox
            // 
            this.localAddressTextBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.localAddressTextBox.Location = new System.Drawing.Point(105, 22);
            this.localAddressTextBox.Name = "localAddressTextBox";
            this.localAddressTextBox.Size = new System.Drawing.Size(642, 23);
            this.localAddressTextBox.TabIndex = 1;
            this.localAddressTextBox.Text = "*";
            // 
            // labelLocalAddress
            // 
            this.labelLocalAddress.AutoSize = true;
            this.labelLocalAddress.Location = new System.Drawing.Point(6, 25);
            this.labelLocalAddress.Name = "labelLocalAddress";
            this.labelLocalAddress.Size = new System.Drawing.Size(81, 15);
            this.labelLocalAddress.TabIndex = 0;
            this.labelLocalAddress.Text = "Local Address";
            // 
            // profilesGroupBox
            // 
            this.profilesGroupBox.Controls.Add(this.publicCheckBox);
            this.profilesGroupBox.Controls.Add(this.privateCheckBox);
            this.profilesGroupBox.Controls.Add(this.domainCheckBox);
            this.profilesGroupBox.Location = new System.Drawing.Point(287, 100);
            this.profilesGroupBox.Name = "profilesGroupBox";
            this.profilesGroupBox.Size = new System.Drawing.Size(130, 105);
            this.profilesGroupBox.TabIndex = 12;
            this.profilesGroupBox.TabStop = false;
            this.profilesGroupBox.Text = "Profiles";
            // 
            // publicCheckBox
            // 
            this.publicCheckBox.AutoSize = true;
            this.publicCheckBox.Checked = true;
            this.publicCheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
            this.publicCheckBox.Location = new System.Drawing.Point(15, 72);
            this.publicCheckBox.Name = "publicCheckBox";
            this.publicCheckBox.Size = new System.Drawing.Size(59, 19);
            this.publicCheckBox.TabIndex = 2;
            this.publicCheckBox.Text = "Public";
            this.publicCheckBox.UseVisualStyleBackColor = true;
            // 
            // privateCheckBox
            // 
            this.privateCheckBox.AutoSize = true;
            this.privateCheckBox.Checked = true;
            this.privateCheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
            this.privateCheckBox.Location = new System.Drawing.Point(15, 47);
            this.privateCheckBox.Name = "privateCheckBox";
            this.privateCheckBox.Size = new System.Drawing.Size(62, 19);
            this.privateCheckBox.TabIndex = 1;
            this.privateCheckBox.Text = "Private";
            this.privateCheckBox.UseVisualStyleBackColor = true;
            // 
            // domainCheckBox
            // 
            this.domainCheckBox.AutoSize = true;
            this.domainCheckBox.Checked = true;
            this.domainCheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
            this.domainCheckBox.Location = new System.Drawing.Point(15, 22);
            this.domainCheckBox.Name = "domainCheckBox";
            this.domainCheckBox.Size = new System.Drawing.Size(67, 19);
            this.domainCheckBox.TabIndex = 0;
            this.domainCheckBox.Text = "Domain";
            this.domainCheckBox.UseVisualStyleBackColor = true;
            // 
            // okButton
            // 
            this.okButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.okButton.Location = new System.Drawing.Point(580, 8);
            this.okButton.Name = "okButton";
            this.okButton.Size = new System.Drawing.Size(100, 36);
            this.okButton.TabIndex = 13;
            this.okButton.Text = "OK";
            this.okButton.UseVisualStyleBackColor = true;
            this.okButton.Click += new System.EventHandler(this.OkButton_Click);
            // 
            // cancelButton
            // 
            this.cancelButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.cancelButton.Location = new System.Drawing.Point(688, 8);
            this.cancelButton.Name = "cancelButton";
            this.cancelButton.Size = new System.Drawing.Size(100, 36);
            this.cancelButton.TabIndex = 14;
            this.cancelButton.Text = "Cancel";
            this.cancelButton.UseVisualStyleBackColor = true;
            this.cancelButton.Click += new System.EventHandler(this.CancelButton_Click);
            // 
            // interfaceTypesGroupBox
            // 
            this.interfaceTypesGroupBox.Controls.Add(this.lanCheckBox);
            this.interfaceTypesGroupBox.Controls.Add(this.wirelessCheckBox);
            this.interfaceTypesGroupBox.Controls.Add(this.remoteAccessCheckBox);
            this.interfaceTypesGroupBox.Location = new System.Drawing.Point(423, 100);
            this.interfaceTypesGroupBox.Name = "interfaceTypesGroupBox";
            this.interfaceTypesGroupBox.Size = new System.Drawing.Size(149, 105);
            this.interfaceTypesGroupBox.TabIndex = 15;
            this.interfaceTypesGroupBox.TabStop = false;
            this.interfaceTypesGroupBox.Text = "Interface Types";
            // 
            // lanCheckBox
            // 
            this.lanCheckBox.AutoSize = true;
            this.lanCheckBox.Checked = true;
            this.lanCheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
            this.lanCheckBox.Location = new System.Drawing.Point(15, 72);
            this.lanCheckBox.Name = "lanCheckBox";
            this.lanCheckBox.Size = new System.Drawing.Size(109, 19);
            this.lanCheckBox.TabIndex = 2;
            this.lanCheckBox.Text = "Wired (LAN)";
            this.lanCheckBox.UseVisualStyleBackColor = true;
            // 
            // wirelessCheckBox
            // 
            this.wirelessCheckBox.AutoSize = true;
            this.wirelessCheckBox.Checked = true;
            this.wirelessCheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
            this.wirelessCheckBox.Location = new System.Drawing.Point(15, 47);
            this.wirelessCheckBox.Name = "wirelessCheckBox";
            this.wirelessCheckBox.Size = new System.Drawing.Size(68, 19);
            this.wirelessCheckBox.TabIndex = 1;
            this.wirelessCheckBox.Text = "Wireless";
            this.wirelessCheckBox.UseVisualStyleBackColor = true;
            // 
            // remoteAccessCheckBox
            // 
            this.remoteAccessCheckBox.AutoSize = true;
            this.remoteAccessCheckBox.Checked = true;
            this.remoteAccessCheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
            this.remoteAccessCheckBox.Location = new System.Drawing.Point(15, 22);
            this.remoteAccessCheckBox.Name = "remoteAccessCheckBox";
            this.remoteAccessCheckBox.Size = new System.Drawing.Size(128, 19);
            this.remoteAccessCheckBox.TabIndex = 0;
            this.remoteAccessCheckBox.Text = "Remote (VPN)";
            this.remoteAccessCheckBox.UseVisualStyleBackColor = true;
            // 
            // labelGroup
            // 
            this.labelGroup.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)));
            this.labelGroup.AutoSize = true;
            this.labelGroup.Location = new System.Drawing.Point(12, 16);
            this.labelGroup.Name = "labelGroup";
            this.labelGroup.Size = new System.Drawing.Size(40, 15);
            this.labelGroup.TabIndex = 16;
            this.labelGroup.Text = "Group";
            // 
            // groupComboBox
            // 
            this.groupComboBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.groupComboBox.BorderColor = System.Drawing.Color.Gray;
            this.groupComboBox.ButtonColor = System.Drawing.Color.LightGray;
            this.groupComboBox.FormattingEnabled = true;
            this.groupComboBox.Location = new System.Drawing.Point(80, 13);
            this.groupComboBox.Name = "groupComboBox";
            this.groupComboBox.Size = new System.Drawing.Size(350, 23);
            this.groupComboBox.TabIndex = 17;
            // 
            // addGroupButton
            // 
            this.addGroupButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.addGroupButton.Location = new System.Drawing.Point(436, 13);
            this.addGroupButton.Name = "addGroupButton";
            this.addGroupButton.Size = new System.Drawing.Size(110, 23);
            this.addGroupButton.TabIndex = 18;
            this.addGroupButton.Text = "Add Group";
            this.addGroupButton.UseVisualStyleBackColor = true;
            this.addGroupButton.Click += new System.EventHandler(this.AddGroupButton_Click);
            // 
            // mainPanel
            // 
            this.mainPanel.AutoScroll = true;
            this.mainPanel.Controls.Add(this.labelName);
            this.mainPanel.Controls.Add(this.ruleNameTextBox);
            this.mainPanel.Controls.Add(this.labelDescription);
            this.mainPanel.Controls.Add(this.descriptionTextBox);
            this.mainPanel.Controls.Add(this.enabledCheckBox);
            this.mainPanel.Controls.Add(this.actionGroupBox);
            this.mainPanel.Controls.Add(this.directionGroupBox);
            this.mainPanel.Controls.Add(this.profilesGroupBox);
            this.mainPanel.Controls.Add(this.interfaceTypesGroupBox);
            this.mainPanel.Controls.Add(this.programGroupBox);
            this.mainPanel.Controls.Add(this.protocolGroupBox);
            this.mainPanel.Controls.Add(this.portsGroupBox);
            this.mainPanel.Controls.Add(this.icmpGroupBox);
            this.mainPanel.Controls.Add(this.scopeGroupBox);
            this.mainPanel.Dock = System.Windows.Forms.DockStyle.Fill;
            this.mainPanel.Location = new System.Drawing.Point(0, 0);
            this.mainPanel.Name = "mainPanel";
            this.mainPanel.Size = new System.Drawing.Size(800, 560);
            this.mainPanel.TabIndex = 19;
            // 
            // bottomPanel
            // 
            this.bottomPanel.Controls.Add(this.addGroupButton);
            this.bottomPanel.Controls.Add(this.groupComboBox);
            this.bottomPanel.Controls.Add(this.labelGroup);
            this.bottomPanel.Controls.Add(this.cancelButton);
            this.bottomPanel.Controls.Add(this.okButton);
            this.bottomPanel.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.bottomPanel.Location = new System.Drawing.Point(0, 560);
            this.bottomPanel.Name = "bottomPanel";
            this.bottomPanel.Size = new System.Drawing.Size(800, 60);
            this.bottomPanel.TabIndex = 20;
            // 
            // CreateAdvancedRuleForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 620);
            this.Controls.Add(this.mainPanel);
            this.Controls.Add(this.bottomPanel);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.Sizable;
            this.MaximizeBox = true;
            this.MinimizeBox = true;
            this.MinimumSize = new System.Drawing.Size(816, 400);
            this.Name = "CreateAdvancedRuleForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = "Create Advanced Rule";
            this.actionGroupBox.ResumeLayout(false);
            this.actionGroupBox.PerformLayout();
            this.directionGroupBox.ResumeLayout(false);
            this.directionGroupBox.PerformLayout();
            this.programGroupBox.ResumeLayout(false);
            this.programGroupBox.PerformLayout();
            this.protocolGroupBox.ResumeLayout(false);
            this.protocolGroupBox.PerformLayout();
            this.portsGroupBox.ResumeLayout(false);
            this.portsGroupBox.PerformLayout();
            this.icmpGroupBox.ResumeLayout(false);
            this.icmpGroupBox.PerformLayout();
            this.scopeGroupBox.ResumeLayout(false);
            this.scopeGroupBox.PerformLayout();
            this.profilesGroupBox.ResumeLayout(false);
            this.profilesGroupBox.PerformLayout();
            this.interfaceTypesGroupBox.ResumeLayout(false);
            this.interfaceTypesGroupBox.PerformLayout();
            this.mainPanel.ResumeLayout(false);
            this.mainPanel.PerformLayout();
            this.bottomPanel.ResumeLayout(false);
            this.bottomPanel.PerformLayout();
            this.ResumeLayout(false);

        }
        #endregion
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/CreateProgramRuleForm.cs
--------------------------------------------------------------------------------
﻿// File: CreateProgramRuleForm.cs
using DarkModeForms;

namespace MinimalFirewall
{
    public partial class CreateProgramRuleForm : Form
    {
        private readonly string[] _filePaths;
        private readonly FirewallActionsService _actionsService;
        private readonly DarkModeCS dm;

        public CreateProgramRuleForm(string[] filePaths, FirewallActionsService actionsService)
        {
            InitializeComponent();
            dm = new DarkModeCS(this);
            _filePaths = filePaths;
            _actionsService = actionsService;
            programListLabel.Text = filePaths.Length == 1
                ? $"Program: {System.IO.Path.GetFileName(filePaths[0])}"
                : $"{filePaths.Length} programs selected.";
        }

        private void okButton_Click(object sender, EventArgs e)
        {
            string action = allowRadio.Checked ? "Allow" : "Block";
            string direction = allowRadio.Checked ? allowDirectionCombo.Text : blockDirectionCombo.Text;
            string finalAction = $"{action} ({direction})";

            _actionsService.ApplyApplicationRuleChange([.. _filePaths], finalAction);
            DialogResult = DialogResult.OK;
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            DialogResult = DialogResult.Cancel;
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/CreateProgramRuleForm.Designer.cs
--------------------------------------------------------------------------------
﻿// File: CreateProgramRuleForm.Designer.cs
namespace MinimalFirewall
{
    public partial class CreateProgramRuleForm
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.Label programListLabel;
        private System.Windows.Forms.RadioButton allowRadio;
        private System.Windows.Forms.RadioButton blockRadio;
        private DarkModeForms.FlatComboBox allowDirectionCombo;
        private DarkModeForms.FlatComboBox blockDirectionCombo;
        private System.Windows.Forms.Button okButton;
        private System.Windows.Forms.Button cancelButton;
        private GroupBox actionGroupBox;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        private void InitializeComponent()
        {
            this.programListLabel = new System.Windows.Forms.Label();
            this.actionGroupBox = new System.Windows.Forms.GroupBox();
            this.blockRadio = new System.Windows.Forms.RadioButton();
            this.allowRadio = new System.Windows.Forms.RadioButton();
            this.okButton = new System.Windows.Forms.Button();
            this.cancelButton = new System.Windows.Forms.Button();
            this.blockDirectionCombo = new DarkModeForms.FlatComboBox();
            this.allowDirectionCombo = new DarkModeForms.FlatComboBox();
            this.actionGroupBox.SuspendLayout();
            this.SuspendLayout();

            this.programListLabel.Location = new System.Drawing.Point(23, 80);
            this.programListLabel.Name = "programListLabel";
            this.programListLabel.Size = new System.Drawing.Size(454, 50);
            this.programListLabel.TabIndex = 0;
            this.programListLabel.Text = "Program List";

            this.actionGroupBox.Controls.Add(this.blockDirectionCombo);
            this.actionGroupBox.Controls.Add(this.allowDirectionCombo);
            this.actionGroupBox.Controls.Add(this.blockRadio);
            this.actionGroupBox.Controls.Add(this.allowRadio);
            this.actionGroupBox.Location = new System.Drawing.Point(23, 140);
            this.actionGroupBox.Name = "actionGroupBox";
            this.actionGroupBox.Size = new System.Drawing.Size(454, 150);
            this.actionGroupBox.TabIndex = 1;
            this.actionGroupBox.TabStop = false;
            this.actionGroupBox.Text = "Action";

            this.blockRadio.AutoSize = true;
            this.blockRadio.Location = new System.Drawing.Point(20, 90);
            this.blockRadio.Name = "blockRadio";
            this.blockRadio.Size = new System.Drawing.Size(54, 19);
            this.blockRadio.TabIndex = 1;
            this.blockRadio.TabStop = true;
            this.blockRadio.Text = "Block";
            this.blockRadio.UseVisualStyleBackColor = true;

            this.allowRadio.AutoSize = true;
            this.allowRadio.Checked = true;
            this.allowRadio.Location = new System.Drawing.Point(20, 30);
            this.allowRadio.Name = "allowRadio";
            this.allowRadio.Size = new System.Drawing.Size(55, 19);
            this.allowRadio.TabIndex = 0;
            this.allowRadio.TabStop = true;
            this.allowRadio.Text = "Allow";
            this.allowRadio.UseVisualStyleBackColor = true;

            this.okButton.Location = new System.Drawing.Point(260, 310);
            this.okButton.Name = "okButton";
            this.okButton.Size = new System.Drawing.Size(100, 36);
            this.okButton.TabIndex = 2;
            this.okButton.Text = "OK";
            this.okButton.UseVisualStyleBackColor = true;
            this.okButton.Click += new System.EventHandler(this.okButton_Click);

            this.cancelButton.Location = new System.Drawing.Point(377, 310);
            this.cancelButton.Name = "cancelButton";
            this.cancelButton.Size = new System.Drawing.Size(100, 36);
            this.cancelButton.TabIndex = 3;
            this.cancelButton.Text = "Cancel";
            this.cancelButton.UseVisualStyleBackColor = true;
            this.cancelButton.Click += new System.EventHandler(this.cancelButton_Click);

            this.blockDirectionCombo.BorderColor = System.Drawing.Color.Gray;
            this.blockDirectionCombo.ButtonColor = System.Drawing.Color.LightGray;
            this.blockDirectionCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.blockDirectionCombo.FormattingEnabled = true;
            this.blockDirectionCombo.Items.AddRange(new object[] {
            "Outbound",
            "Inbound",
            "All"});
            this.blockDirectionCombo.Location = new System.Drawing.Point(150, 90);
            this.blockDirectionCombo.Name = "blockDirectionCombo";
            this.blockDirectionCombo.Size = new System.Drawing.Size(280, 23);
            this.blockDirectionCombo.TabIndex = 3;

            this.allowDirectionCombo.BorderColor = System.Drawing.Color.Gray;
            this.allowDirectionCombo.ButtonColor = System.Drawing.Color.LightGray;
            this.allowDirectionCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.allowDirectionCombo.FormattingEnabled = true;
            this.allowDirectionCombo.Items.AddRange(new object[] {
            "Outbound",
            "Inbound",
            "All"});
            this.allowDirectionCombo.Location = new System.Drawing.Point(150, 30);
            this.allowDirectionCombo.Name = "allowDirectionCombo";
            this.allowDirectionCombo.Size = new System.Drawing.Size(280, 23);
            this.allowDirectionCombo.TabIndex = 2;

            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(500, 370);
            this.Controls.Add(this.cancelButton);
            this.Controls.Add(this.okButton);
            this.Controls.Add(this.actionGroupBox);
            this.Controls.Add(this.programListLabel);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "CreateProgramRuleForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = "Create Program Rule";
            this.actionGroupBox.ResumeLayout(false);
            this.actionGroupBox.PerformLayout();
            this.ResumeLayout(false);
        }
        #endregion
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/DarkModeCS.cs
--------------------------------------------------------------------------------
﻿// File: DarkModeCS.cs
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace DarkModeForms
{
    public class DarkModeCS : IDisposable
    {
        private class NotificationInfo
        {
            public int Count
            { get; set; }
        }
        private static readonly ConditionalWeakTable<Control, NotificationInfo> _notificationInfo = new();
        public void SetNotificationCount(Control control, int count)
        {
            if (count > 0)
            {
                if (_notificationInfo.TryGetValue(control, out var info))
                {
                    info.Count = count;
                }
                else
                {
                    _notificationInfo.Add(control, new NotificationInfo { Count = count });
                }
            }
            else
            {
                if (_notificationInfo.TryGetValue(control, out _))
                {
                    _notificationInfo.Remove(control);
                }
            }

            if (control is TabPage tabPage && tabPage.Parent is TabControl parentTab)
            {
                parentTab.Invalidate();
            }
        }

        private void DrawNotificationBubble(Graphics g, Rectangle tabRect, string text, TabAlignment alignment)
        {
            using (Font notifFont = new Font("Segoe UI", 7F, FontStyle.Bold))
            {
                SizeF textSize = g.MeasureString(text, notifFont);
                int diameter = (int)Math.Max(textSize.Width, textSize.Height) + 4;
                int x, y;
                switch (alignment)
                {
                    case TabAlignment.Left:
                    case TabAlignment.Right:
                        x = tabRect.Left + 5;
                        y = tabRect.Bottom - diameter - 5;
                        break;
                    default:
                        x = tabRect.Right - diameter - 3;
                        y = tabRect.Top + 3;
                        break;
                }


                Rectangle bubbleRect = new Rectangle(x, y, diameter, diameter);
                g.SmoothingMode = SmoothingMode.AntiAlias;

                using (var path = new GraphicsPath())
                {
                    path.AddEllipse(bubbleRect);
                    PointF point1 = PointF.Empty, point2 = PointF.Empty, point3 = PointF.Empty;
                    switch (alignment)
                    {
                        case TabAlignment.Left:
                            point1 = new PointF(bubbleRect.Right - 2, bubbleRect.Top + diameter * 0.2f);
                            point2 = new PointF(bubbleRect.Right - 2, bubbleRect.Top + diameter * 0.4f);
                            point3 = new PointF(bubbleRect.Right + 6, bubbleRect.Top - 4);
                            break;
                        case TabAlignment.Right:
                            point1 = new PointF(bubbleRect.Left + 2, bubbleRect.Top + diameter * 0.2f);
                            point2 = new PointF(bubbleRect.Left + 2, bubbleRect.Top + diameter * 0.4f);
                            point3 = new PointF(bubbleRect.Left - 6, bubbleRect.Top - 4);
                            break;
                        default:
                            point1 = new PointF(bubbleRect.Left + diameter * 0.2f, bubbleRect.Bottom - 2);
                            point2 = new PointF(bubbleRect.Left + diameter * 0.4f, bubbleRect.Bottom - 2);
                            point3 = new PointF(bubbleRect.Left - 4, bubbleRect.Bottom + 6);
                            break;
                    }

                    path.AddPolygon(new[] { point1, point2, point3 });
                    using (SolidBrush redBrush = new SolidBrush(Color.Red))
                    {
                        g.FillPath(redBrush, path);
                    }
                }

                using (SolidBrush whiteBrush = new SolidBrush(Color.White))
                {
                    using (StringFormat sf = new StringFormat
                    {

                        Alignment = StringAlignment.Center,
                        LineAlignment = StringAlignment.Center
                    })
                    {

                        g.DrawString(text, notifFont, whiteBrush, bubbleRect, sf);
                    }
                }
            }
        }


        public struct DWMCOLORIZATIONcolors
        {
            public uint ColorizationColor,
              ColorizationAfterglow,
              ColorizationColorBalance,

              ColorizationAfterglowBalance,
              ColorizationBlurBalance,
              ColorizationGlassReflectionIntensity,
              ColorizationOpaqueBlend;
        }

        [Flags]
        public enum DWMWINDOWATTRIBUTE : uint
        {
            DWMWA_USE_IMMERSIVE_DARK_MODE = 20,
        }

        [DllImport("user32.dll")]
        private static extern int SendMessage(IntPtr hWnd, int wMsg, bool wParam, int lParam);
        private const int WM_SETREDRAW = 0x000B;

        [DllImport("DwmApi")]
        public static extern int DwmSetWindowAttribute(IntPtr hwnd, int attr, int[] attrValue, int attrSize);
        [DllImport("uxtheme.dll", CharSet = CharSet.Unicode)]
        private static extern int SetWindowTheme(IntPtr hWnd, string pszSubAppName, string? pszSubIdList);
        [DllImport("dwmapi.dll", EntryPoint = "#127")]
        public static extern void DwmGetColorizationParameters(ref DWMCOLORIZATIONcolors colors);
        [DllImport("Gdi32.dll", EntryPoint = "CreateRoundRectRgn")]
        private static extern IntPtr CreateRoundRectRgn
        (
          int nLeftRect,
          int nTopRect,
          int nRightRect,
          int nBottomRect,
          int nWidthEllipse,
          int nHeightEllipse
        );
        [DllImport("user32.dll", ExactSpelling = true, CharSet = CharSet.Auto)]
        private static extern IntPtr GetWindow(IntPtr hWnd, uint uCmd);
        private const uint GW_CHILD = 5;

        private static readonly ControlStatusStorage controlStatusStorage = new();
        private ControlEventHandler? ownerFormControlAdded;
        private ControlEventHandler? controlControlAdded;
        private bool _IsDarkMode;

        public enum DisplayMode
        {
            SystemDefault,
            ClearMode,
            DarkMode
        }

        public DisplayMode ColorMode
        { get; set; } = DisplayMode.SystemDefault;
        public bool IsDarkMode => _IsDarkMode;
        public bool ColorizeIcons { get; set; } = true;
        public bool RoundedPanels { get; set; } = false;
        public Form OwnerForm
        { get; set; }
        public ComponentCollection? Components
        { get; set; }
        public OSThemeColors OScolors
        { get; set; }

        public DarkModeCS(Form _Form, bool _ColorizeIcons = true, bool _RoundedPanels = false)
        {
            OwnerForm = _Form;
            typeof(Control).GetProperty("DoubleBuffered", BindingFlags.NonPublic | BindingFlags.Instance)
                ?.SetValue(OwnerForm, true, null);
            Components = null;
            ColorizeIcons = _ColorizeIcons;
            RoundedPanels = _RoundedPanels;

            OScolors = GetSystemColors(1);
            OwnerForm.HandleCreated += (sender, e) => ApplyTitleBarTheme();
            _Form.Load += (sender, e) =>
            {
                _IsDarkMode = isDarkMode();
                if (ColorMode != DisplayMode.SystemDefault)
                {
                    _IsDarkMode = ColorMode == DisplayMode.DarkMode;
                }

                ApplyTheme(_IsDarkMode);
            };
        }

        private static void SuspendDrawing(Control parent)
        {
            SendMessage(parent.Handle, WM_SETREDRAW, false, 0);
        }

        private static void ResumeDrawing(Control parent)
        {
            SendMessage(parent.Handle, WM_SETREDRAW, true, 0);
            parent.Refresh();
        }

        private void ApplyTitleBarTheme()
        {
            if (OwnerForm.Handle != IntPtr.Zero)
            {
                bool useDark = (ColorMode == DisplayMode.DarkMode) ||
                    (ColorMode == DisplayMode.SystemDefault && isDarkMode());
                int[] DarkModeOn = useDark ? [0x01] : [0x00];
                DwmSetWindowAttribute(OwnerForm.Handle, (int)DWMWINDOWATTRIBUTE.DWMWA_USE_IMMERSIVE_DARK_MODE, DarkModeOn, 4);
            }
        }

        public bool isDarkMode()
        {
            return GetWindowsColorMode() <= 0;
        }

        public void ApplyTheme(bool pIsDarkMode = true)
        {
            try
            {
                _IsDarkMode = pIsDarkMode;
                OScolors = GetSystemColors(pIsDarkMode ? 0 : 1);

                SuspendDrawing(OwnerForm);
                OwnerForm.SuspendLayout();

                ApplyTitleBarTheme();

                OwnerForm.BackColor = OScolors.Background;
                OwnerForm.ForeColor = OScolors.TextInactive;
                if (OwnerForm.Controls != null)
                {
                    foreach (Control _control in OwnerForm.Controls)
                    {
                        ThemeControl(_control);
                    }

                    ownerFormControlAdded = (sender, e) =>
                    {
                        if (e.Control != null)
                        {

                            ThemeControl(e.Control!);
                        }
                    };
                    OwnerForm.ControlAdded -= ownerFormControlAdded;
                    OwnerForm.ControlAdded += ownerFormControlAdded;
                }

                if (Components != null)
                {
                    foreach (var item in Components.OfType<ContextMenuStrip>())
                        ThemeControl(item);
                }
                OwnerForm.ResumeLayout(true);
                ResumeDrawing(OwnerForm);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        public void ApplyTheme(DisplayMode pColorMode)
        {
            if (ColorMode == pColorMode) return;
            ColorMode = pColorMode;
            _IsDarkMode = isDarkMode();
            if (ColorMode != DisplayMode.SystemDefault)
            {
                _IsDarkMode = ColorMode == DisplayMode.DarkMode;
            }

            ApplyTheme(_IsDarkMode);
        }

        private void ListView_DrawColumnHeader(object? sender, DrawListViewColumnHeaderEventArgs e)
        {
            if (sender is not ListView listView) return;
            if (IsDarkMode)
            {
                using (var backBrush = new SolidBrush(OScolors.Surface))
                {
                    e.Graphics.FillRectangle(backBrush, e.Bounds);
                }
                TextRenderer.DrawText(e.Graphics, e.Header!.Text, e.Font, e.Bounds, OScolors.TextActive, TextFormatFlags.VerticalCenter | TextFormatFlags.Left);
            }
            else
            {
                e.DrawDefault = true;
            }
        }

        public void ThemeControl(Control control)
        {
            var info = controlStatusStorage.GetControlStatusInfo(control);
            if (info != null)
            {
                if (info.IsExcluded) return;
                if (info.LastThemeAppliedIsDark == IsDarkMode) return;
                info.LastThemeAppliedIsDark = IsDarkMode;
            }
            else
            {
                controlStatusStorage.RegisterProcessedControl(control, IsDarkMode);
            }
            control.SuspendLayout();
            BorderStyle BStyle = (IsDarkMode ? BorderStyle.FixedSingle : BorderStyle.Fixed3D);
            controlControlAdded = (sender, e) =>
            {
                if (e.Control != null)
                {
                    ThemeControl(e.Control);
                }
            };
            control.ControlAdded -= controlControlAdded;
            control.ControlAdded += controlControlAdded;
            string Mode = IsDarkMode ? "DarkMode_Explorer" : "ClearMode_Explorer";
            SetWindowTheme(control.Handle, Mode, null);

            control.GetType().GetProperty("BackColor")?.SetValue(control, OScolors.Control);
            control.GetType().GetProperty("ForeColor")?.SetValue(control, OScolors.TextActive);
            if (control is Label lbl && control.Parent != null)
            {
                control.BackColor = control.Parent.BackColor;
                control.GetType().GetProperty("BorderStyle")?.SetValue(control, BorderStyle.None);
                lbl.Paint -= Label_Paint;
                lbl.Paint += Label_Paint;
            }
            else if (control is LinkLabel linkLabel && linkLabel.Parent != null)
            {
                linkLabel.BackColor = linkLabel.Parent.BackColor;
                linkLabel.LinkColor = OScolors.AccentLight;
                linkLabel.VisitedLinkColor = OScolors.Primary;
            }
            else if (control is TextBox)
            {
                control.GetType().GetProperty("BorderStyle")?.SetValue(control, BStyle);
            }
            else if (control is NumericUpDown)
            {
                Mode = IsDarkMode ?
                    "DarkMode_ItemsView" : "ClearMode_ItemsView";
                SetWindowTheme(control.Handle, Mode, null);
            }
            else if (control is Button button)
            {
                button.FlatStyle = IsDarkMode ?
                    FlatStyle.Flat : FlatStyle.Standard;
                button.FlatAppearance.CheckedBackColor = OScolors.Accent;
                button.BackColor = OScolors.Control;
                button.FlatAppearance.BorderColor = (button.FindForm()?.AcceptButton == button) ? OScolors.Accent : OScolors.Control;
                button.FlatAppearance.MouseOverBackColor = OScolors.ControlLight;
            }
            else if (control is ComboBox comboBox)
            {
                if (comboBox.DropDownStyle != ComboBoxStyle.DropDownList)
                {
                    comboBox.SelectionStart = comboBox.Text.Length;
                }
                control.BeginInvoke(new Action(() =>
                {
                    if (control is ComboBox invokedComboBox && !invokedComboBox.DropDownStyle.Equals(ComboBoxStyle.DropDownList))
                        invokedComboBox.SelectionLength = 0;

                }));

                if (!control.Enabled && IsDarkMode)
                {
                    comboBox.DropDownStyle = ComboBoxStyle.DropDownList;
                }

                Mode = IsDarkMode ?
                    "DarkMode_CFD" : "ClearMode_CFD";
                SetWindowTheme(control.Handle, Mode, null);
            }
            else if (control is TabPage tabPage)
            {
                tabPage.BackColor = OScolors.Surface;
            }
            else if (control is Panel panel && panel.Parent != null)
            {
                panel.BackColor = panel.Parent.BackColor;
                panel.BorderStyle = BorderStyle.None;
                if (panel.Parent is not TabControl && panel.Parent is not TableLayoutPanel)
                {
                    if (RoundedPanels)
                    {
                        SetRoundBorders(panel, 6, OScolors.SurfaceDark, 1);
                    }
                }
            }
            else if (control is GroupBox groupBox && groupBox.Parent != null)
            {
                groupBox.BackColor = groupBox.Parent.BackColor;
                groupBox.ForeColor = OScolors.TextActive;
                groupBox.Paint -= GroupBox_Paint;
                groupBox.Paint += GroupBox_Paint;
            }
            else if (control is TableLayoutPanel tablePanel && tablePanel.Parent != null)
            {
                tablePanel.BackColor = tablePanel.Parent.BackColor;
                tablePanel.ForeColor = OScolors.TextInactive;
            }
            else if (control is TabControl tab && tab.Parent != null)
            {
                tab.Appearance = TabAppearance.Normal;
                tab.DrawMode = TabDrawMode.OwnerDrawFixed;
                tab.DrawItem -= Tab_DrawItem;
                tab.DrawItem += Tab_DrawItem;
            }
            else if (control is PictureBox pictureBox && pictureBox.Parent != null)
            {
                pictureBox.BackColor = pictureBox.Parent.BackColor;
                if (OScolors != null)
                {
                    pictureBox.ForeColor = OScolors.TextActive;
                }
                pictureBox.BorderStyle = BorderStyle.None;
            }
            else if (control is CheckBox checkBox && checkBox.Parent != null)
            {
                checkBox.BackColor = checkBox.Parent.BackColor;
                checkBox.ForeColor = control.Enabled ? OScolors.TextActive : OScolors.TextInactive;
                checkBox.Paint -= CheckBox_Paint;
                checkBox.Paint += CheckBox_Paint;
            }
            else if (control is RadioButton radioButton && radioButton.Parent != null)
            {
                radioButton.BackColor = radioButton.Parent.BackColor;
                radioButton.ForeColor = control.Enabled ? OScolors.TextActive : OScolors.TextInactive;
                radioButton.Paint -= RadioButton_Paint;
                radioButton.Paint += RadioButton_Paint;
            }
            else if (control is MenuStrip menuStrip)
            {
                menuStrip.RenderMode = ToolStripRenderMode.Professional;
                menuStrip.Renderer = new MyRenderer(new CustomColorTable(OScolors), ColorizeIcons)
                {
                    MyColors = OScolors
                };
            }
            else if (control is ToolStrip toolStrip)
            {
                toolStrip.RenderMode = ToolStripRenderMode.Professional;
                toolStrip.Renderer = new MyRenderer(new CustomColorTable(OScolors), ColorizeIcons) { MyColors = OScolors };
            }
            else if (control is ToolStripPanel toolStripPanel && toolStripPanel.Parent != null)
            {
                toolStripPanel.BackColor = toolStripPanel.Parent.BackColor;
            }
            else if (control is ToolStripDropDown dropDown)
            {
                dropDown.Opening -= Tsdd_Opening;
                dropDown.Opening += Tsdd_Opening;
            }
            else if (control is ContextMenuStrip contextMenu)
            {
                contextMenu.RenderMode = ToolStripRenderMode.Professional;
                contextMenu.Renderer = new MyRenderer(new CustomColorTable(OScolors), ColorizeIcons) { MyColors = OScolors };
                contextMenu.Opening -= Tsdd_Opening;
                contextMenu.Opening += Tsdd_Opening;
            }
            else if (control is MdiClient mdiClient)
            {
                mdiClient.BackColor = OScolors.Surface;
            }
            else if (control is PropertyGrid pGrid)
            {
                pGrid.BackColor = OScolors.Control;
                pGrid.ViewBackColor = OScolors.Control;
                pGrid.LineColor = OScolors.Surface;
                pGrid.ViewForeColor = OScolors.TextActive;
                pGrid.ViewBorderColor = OScolors.ControlDark;
                pGrid.CategoryForeColor = OScolors.TextActive;
                pGrid.CategorySplitterColor = OScolors.ControlLight;
            }
            else if (control is ListView lView)
            {
                lView.OwnerDraw = true;

                lView.DrawColumnHeader -= ListView_DrawColumnHeader;
                lView.DrawColumnHeader += ListView_DrawColumnHeader;

                if (!lView.OwnerDraw)
                {
                    Mode = IsDarkMode ?
                        "DarkMode_Explorer" : "ClearMode_Explorer";
                    SetWindowTheme(control.Handle, Mode, null);
                }
            }
            else if (control is TreeView)
            {
                control.GetType().GetProperty("BorderStyle")?.SetValue(control, BorderStyle.None);
            }
            else if (control is DataGridView grid)
            {
                grid.EnableHeadersVisualStyles = false;
                grid.BorderStyle = BorderStyle.FixedSingle;
                grid.BackgroundColor = OScolors.Control;
                grid.GridColor = OScolors.Control;

                grid.Paint -= DataGridView_Paint;
                grid.Paint += DataGridView_Paint;

                grid.DefaultCellStyle.BackColor = OScolors.Surface;
                grid.DefaultCellStyle.ForeColor = OScolors.TextActive;
                grid.ColumnHeadersDefaultCellStyle.BackColor = OScolors.Surface;
                grid.ColumnHeadersDefaultCellStyle.ForeColor = OScolors.TextActive;
                grid.ColumnHeadersDefaultCellStyle.SelectionBackColor = OScolors.Surface;
                grid.ColumnHeadersBorderStyle = DataGridViewHeaderBorderStyle.Single;
                grid.RowHeadersDefaultCellStyle.BackColor = OScolors.Surface;
                grid.RowHeadersDefaultCellStyle.ForeColor = OScolors.TextActive;
                grid.RowHeadersDefaultCellStyle.SelectionBackColor = OScolors.Surface;
                grid.RowHeadersBorderStyle = DataGridViewHeaderBorderStyle.Single;
            }
            else if (control is RichTextBox richText && richText.Parent != null)
            {
                richText.BackColor = richText.Parent.BackColor;
                richText.BorderStyle = BorderStyle.None;
            }
            else if (control is FlowLayoutPanel flowLayout && flowLayout.Parent != null)
            {
                flowLayout.BackColor = flowLayout.Parent.BackColor;
            }

            if (control.ContextMenuStrip != null)
                ThemeControl(control.ContextMenuStrip);
            foreach (Control childControl in control.Controls)
            {
                ThemeControl(childControl);
            }
            control.ResumeLayout(false);
        }

        private void Label_Paint(object? sender, PaintEventArgs e)
        {
            if (sender is not Label lbl || !(!lbl.Enabled && IsDarkMode && lbl.Parent != null)) return;
            e.Graphics.Clear(lbl.Parent.BackColor);
            e.Graphics.SmoothingMode = SmoothingMode.HighQuality;
            using Brush B = new SolidBrush(lbl.ForeColor);
            MethodInfo? mi = lbl.GetType().GetMethod("CreateStringFormat", BindingFlags.NonPublic | BindingFlags.Instance);
            if (mi?.Invoke(lbl, []) is StringFormat sf)
            {
                e.Graphics.DrawString(lbl.Text ?? "", lbl.Font, B, new PointF(1, 0), sf);
            }
        }

        private void GroupBox_Paint(object? sender, PaintEventArgs e)
        {
            if (sender is not GroupBox gBox || !(!gBox.Enabled && IsDarkMode)) return;
            using Brush B = new SolidBrush(gBox.ForeColor);
            e.Graphics.DrawString(gBox.Text, gBox.Font, B, new PointF(6, 0));
        }

        private void Tab_DrawItem(object? sender, DrawItemEventArgs e)
        {
            if (sender is not TabControl tab || tab.Parent == null) return;
            using (SolidBrush headerBrush = new SolidBrush(tab.Parent.BackColor))
            {
                e.Graphics.FillRectangle(headerBrush, new Rectangle(0, 0, tab.Width, tab.Height));
            }
            for (int i = 0; i < tab.TabPages.Count; i++)
            {
                TabPage tabPage = tab.TabPages[i];
                if (tabPage.Tag == null)
                {
                    tabPage.BackColor = OScolors.Surface;
                    tabPage.BorderStyle = BorderStyle.FixedSingle;
                    foreach (Control child in tabPage.Controls)
                    {
                        ThemeControl(child);
                    }
                    tabPage.ControlAdded += (_s, _e) => { if (_e.Control != null) ThemeControl(_e.Control); };
                    tabPage.Tag = "themed";
                }
                Rectangle tabRect = tab.GetTabRect(i);
                bool isSelected = tab.SelectedIndex == i;
                if (isSelected)
                {
                    using (SolidBrush tabBackColor = new SolidBrush(OScolors.Surface))
                    {
                        e.Graphics.FillRectangle(tabBackColor, tabRect);
                    }
                }
                Image?
                icon = null;
                if (tab.ImageList != null && tabPage.ImageIndex >= 0 && tabPage.ImageIndex < tab.ImageList.Images.Count)
                {
                    icon = tab.ImageList.Images[tabPage.ImageIndex];
                }
                Rectangle textBounds;
                TextFormatFlags textFlags = TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter | TextFormatFlags.WordBreak;
                Color textColor = isSelected ? OScolors.TextActive : OScolors.TextInactive;

                e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
                e.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;

                if (tab.Alignment == TabAlignment.Left || tab.Alignment == TabAlignment.Right)
                {
                    if (icon != null)
                    {
                        int iconHeight = tab.ImageList.ImageSize.Height;
                        int iconWidth = tab.ImageList.ImageSize.Width;
                        int iconX = tabRect.X + (tabRect.Width - iconWidth) / 2;
                        int iconY = tabRect.Y + 15;
                        Image imageToDraw = icon;
                        bool shouldDispose = false;
                        if (IsDarkMode && tabPage.ImageKey != "locked.png")
                        {
                            imageToDraw = RecolorImage(icon, Color.White);
                            shouldDispose = true;
                        }
                        e.Graphics.DrawImage(imageToDraw, new Rectangle(iconX, iconY, iconWidth, iconHeight));
                        if (shouldDispose)
                        {
                            imageToDraw.Dispose();
                        }
                        textBounds = new Rectangle(tabRect.X, iconY + iconHeight, tabRect.Width, tabRect.Height - iconHeight - 20);
                        textFlags = TextFormatFlags.HorizontalCenter | TextFormatFlags.Top | TextFormatFlags.WordBreak;
                    }
                    else
                    {
                        textBounds = tabRect;
                    }
                }
                else
                {
                    textBounds = tabRect;
                }
                TextRenderer.DrawText(e.Graphics, tabPage.Text, tabPage.Font, textBounds, textColor, textFlags);
                if (_notificationInfo.TryGetValue(tabPage, out var info) && info.Count > 0)
                {
                    DrawNotificationBubble(e.Graphics, tabRect, info.Count.ToString(), tab.Alignment);
                }
            }
        }

        private void CheckBox_Paint(object? sender, PaintEventArgs e)
        {
            if (sender is not CheckBox chkBox || !(!chkBox.Enabled && IsDarkMode)) return;
            using Brush B = new SolidBrush(chkBox.ForeColor);
            e.Graphics.DrawString(chkBox.Text, chkBox.Font, B, new PointF(16, 0));
        }

        private void RadioButton_Paint(object? sender, PaintEventArgs e)
        {
            if (sender is not RadioButton rdoBtn || !(!rdoBtn.Enabled && IsDarkMode)) return;
            using Brush B = new SolidBrush(rdoBtn.ForeColor);
            e.Graphics.DrawString(rdoBtn.Text, rdoBtn.Font, B, new PointF(16, 0));
        }

        private void DataGridView_Paint(object? sender, PaintEventArgs e)
        {
            if (sender is not DataGridView dgv) return;
            PropertyInfo? hsp = typeof(DataGridView).GetProperty("HorizontalScrollBar", BindingFlags.Instance | BindingFlags.NonPublic);
            PropertyInfo? vsp = typeof(DataGridView).GetProperty("VerticalScrollBar", BindingFlags.Instance | BindingFlags.NonPublic);
            if (hsp?.GetValue(dgv) is HScrollBar hs && hs.Visible && vsp?.GetValue(dgv) is VScrollBar vs && vs.Visible)
            {
                using Brush brush = new SolidBrush(OScolors.SurfaceDark);
                var w = vs.Size.Width;
                var h = hs.Size.Height;
                e.Graphics.FillRectangle(brush, dgv.ClientRectangle.X + dgv.ClientRectangle.Width - w - 1, dgv.ClientRectangle.Y + dgv.ClientRectangle.Height - h - 1, w, h);
            }
        }

        public static void ExcludeFromProcessing(Control control)
        {
            controlStatusStorage.ExcludeFromProcessing(control);
        }

        public static int GetWindowsColorMode(bool GetSystemColorModeInstead = false)
        {
            try
            {
                return (int?)Registry.GetValue(
                   @"HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize",

                   GetSystemColorModeInstead ? "SystemUsesLightTheme" : "AppsUseLightTheme",
                  -1) ??
                    1;
            }
            catch
            {
                return 1;
            }
        }

        public static Color GetWindowsAccentColor()
        {
            try
            {
                DWMCOLORIZATIONcolors colors = new DWMCOLORIZATIONcolors();
                DwmGetColorizationParameters(ref colors);

                if (IsWindows10orGreater())
                {
                    var color = colors.ColorizationColor;
                    var colorValue = long.Parse(color.ToString(), System.Globalization.NumberStyles.HexNumber);
                    var transparency = (colorValue >> 24) & 0xFF;
                    var red = (colorValue >> 16) & 0xFF;
                    var green = (colorValue >> 8) & 0xFF;
                    var blue = (colorValue >> 0) & 0xFF;
                    return Color.FromArgb((int)transparency, (int)red, (int)green, (int)blue);
                }
                return Color.CadetBlue;
            }
            catch (Exception)
            {
                return Color.CadetBlue;
            }
        }

        public static Color GetWindowsAccentOpaqueColor()
        {
            DWMCOLORIZATIONcolors colors = new DWMCOLORIZATIONcolors();
            DwmGetColorizationParameters(ref colors);
            if (IsWindows10orGreater())
            {
                var color = colors.ColorizationColor;
                var colorValue = long.Parse(color.ToString(), System.Globalization.NumberStyles.HexNumber);
                var red = (colorValue >> 16) & 0xFF;
                var green = (colorValue >> 8) & 0xFF;
                var blue = (colorValue >> 0) & 0xFF;
                return Color.FromArgb(255, (int)red, (int)green, (int)blue);
            }
            return Color.CadetBlue;
        }

        public static OSThemeColors GetSystemColors(int ColorMode = 0)
        {
            OSThemeColors _ret = new();
            if (ColorMode <= 0)
            {
                _ret.Background = Color.FromArgb(32, 32, 32);
                _ret.BackgroundDark = Color.FromArgb(18, 18, 18);
                _ret.BackgroundLight = ControlPaint.Light(_ret.Background);
                _ret.Surface = Color.FromArgb(43, 43, 43);
                _ret.SurfaceLight = Color.FromArgb(50, 50, 50);
                _ret.SurfaceDark = Color.FromArgb(29, 29, 29);
                _ret.TextActive = Color.White;
                _ret.TextInactive = Color.FromArgb(176, 176, 176);
                _ret.TextInAccent = GetReadableColor(_ret.Accent);
                _ret.Control = Color.FromArgb(55, 55, 55);
                _ret.ControlDark = ControlPaint.Dark(_ret.Control);
                _ret.ControlLight = Color.FromArgb(67, 67, 67);
                _ret.Primary = Color.FromArgb(3, 218, 198);
                _ret.Secondary = Color.MediumSlateBlue;
            }

            return _ret;
        }

        public static void SetRoundBorders(Control _Control, int Radius = 10, Color? borderColor = null, int borderSize = 2, bool underlinedStyle = false)
        {
            borderColor ??= Color.MediumSlateBlue;
            if (_Control?.Parent != null)
            {
                _Control.GetType().GetProperty("BorderStyle")?.SetValue(_Control, BorderStyle.None);
                _Control.Region = Region.FromHrgn(CreateRoundRectRgn(0, 0, _Control.Width, _Control.Height, Radius, Radius));
                _Control.Paint += (sender, e) =>
                {
                    Graphics graph = e.Graphics;
                    if (Radius > 1 && _Control.Parent != null)
                    {
                        var rectBorderSmooth = _Control.ClientRectangle;
                        var rectBorder = Rectangle.Inflate(rectBorderSmooth, -borderSize, -borderSize);
                        int smoothSize = borderSize > 0 ? borderSize : 1;
                        using GraphicsPath pathBorderSmooth = GetFigurePath(rectBorderSmooth, Radius);
                        using GraphicsPath pathBorder = GetFigurePath(rectBorder, Radius - borderSize);
                        using Pen penBorderSmooth = new(_Control.Parent.BackColor, smoothSize);
                        using Pen penBorder = new((Color)borderColor, borderSize);

                        _Control.Region = new Region(pathBorderSmooth);
                        if (Radius > 15)
                        {
                            using GraphicsPath pathTxt = GetFigurePath(_Control.ClientRectangle, borderSize * 2);
                            _Control.Region = new Region(pathTxt);
                        }
                        graph.SmoothingMode = SmoothingMode.AntiAlias;
                        penBorder.Alignment = PenAlignment.Center;

                        if (underlinedStyle)
                        {
                            graph.DrawPath(penBorderSmooth, pathBorderSmooth);
                            graph.SmoothingMode = SmoothingMode.None;
                            graph.DrawLine(penBorder, 0, _Control.Height - 1, _Control.Width, _Control.Height - 1);
                        }
                        else
                        {
                            graph.DrawPath(penBorderSmooth, pathBorderSmooth);
                            graph.DrawPath(penBorder, pathBorder);
                        }
                    }
                };
            }
        }

        public static Image RecolorImage(Image sourceImage, Color newColor)
        {
            var newBitmap = new Bitmap(sourceImage.Width, sourceImage.Height, PixelFormat.Format32bppArgb);
            using (var g = Graphics.FromImage(newBitmap))
            {
                g.SmoothingMode = SmoothingMode.AntiAlias;
                g.InterpolationMode = InterpolationMode.HighQualityBicubic;
                g.CompositingQuality = CompositingQuality.HighQuality;
                float r = newColor.R / 255f;
                float g_ = newColor.G / 255f;
                float b = newColor.B / 255f;
                var colorMatrix = new ColorMatrix(
                new float[][]
                {
                    new float[] {0, 0, 0, 0, 0},
                    new float[] {0, 0, 0, 0, 0},

                    new float[] {0, 0, 0, 0, 0},
                    new float[] {0, 0, 0, 1, 0},
                    new float[] {r, g_, b, 0, 1}
                });
                using (var attributes = new ImageAttributes())
                {
                    attributes.SetColorMatrix(colorMatrix, ColorMatrixFlag.Default, ColorAdjustType.Bitmap);
                    g.DrawImage(sourceImage, new Rectangle(0, 0, sourceImage.Width, sourceImage.Height),
                                0, 0, sourceImage.Width, sourceImage.Height, GraphicsUnit.Pixel, attributes);
                }
            }
            return newBitmap;
        }

        private void Tsdd_Opening(object? sender, CancelEventArgs e)
        {
            if (sender is ToolStripDropDown tsdd)
            {
                foreach (ToolStripMenuItem toolStripMenuItem in tsdd.Items.OfType<ToolStripMenuItem>())
                {

                    toolStripMenuItem.DropDownOpening -= Tsmi_DropDownOpening;
                    toolStripMenuItem.DropDownOpening += Tsmi_DropDownOpening;
                }
            }
        }

        private void Tsmi_DropDownOpening(object? sender, EventArgs e)
        {
            if (sender is ToolStripMenuItem tsmi)
            {
                if (tsmi.DropDown != null && tsmi.DropDown.Items.Count > 0)

                {
                    ThemeControl(tsmi.DropDown);
                }
                tsmi.DropDownOpening -= Tsmi_DropDownOpening;
            }
        }

        private static bool IsWindows10orGreater()
        {
            return WindowsVersion() >= 10;
        }

        private static int WindowsVersion()
        {
            try
            {
                using var reg = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion");
                string? productName = reg?.GetValue("ProductName")?.ToString();
                if (!string.IsNullOrEmpty(productName))
                {
                    var parts = productName.Split(' ');
                    if (parts.Length > 1 && int.TryParse(parts[1], out int result))
                    {
                        return result;
                    }
                }
            }
            catch { }

            return Environment.OSVersion.Version.Major;
        }

        private static Color GetReadableColor(Color backgroundColor)
        {
            double normalizedR = backgroundColor.R / 255.0;
            double normalizedG = backgroundColor.G / 255.0;
            double normalizedB = backgroundColor.B / 255.0;
            double luminance = 0.299 * normalizedR + 0.587 * normalizedG + 0.114 * normalizedB;
            return luminance < 0.5 ?
                Color.FromArgb(182, 180, 215) : Color.FromArgb(34, 34, 34);
        }

        private static GraphicsPath GetFigurePath(Rectangle rect, int radius)
        {
            GraphicsPath path = new();
            float curveSize = radius * 2F;

            path.StartFigure();
            path.AddArc(rect.X, rect.Y, curveSize, curveSize, 180, 90);
            path.AddArc(rect.Right - curveSize, rect.Y, curveSize, curveSize, 270, 90);
            path.AddArc(rect.Right - curveSize, rect.Bottom - curveSize, curveSize, curveSize, 0, 90);
            path.AddArc(rect.X, rect.Bottom - curveSize, curveSize, curveSize, 90, 90);
            path.CloseFigure();
            return path;
        }

        private bool disposedValue;
        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    if (OwnerForm != null && ownerFormControlAdded != null)

                    {
                        OwnerForm.ControlAdded -= ownerFormControlAdded;
                    }
                }
                disposedValue = true;
            }
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }
    }

    public class OSThemeColors
    {
        public Color Background
        { get; set; } = SystemColors.Control;
        public Color BackgroundDark { get; set; } = SystemColors.ControlDark;
        public Color BackgroundLight
        { get; set; } = SystemColors.ControlLight;
        public Color Surface { get; set; } = SystemColors.ControlLightLight;
        public Color SurfaceDark
        { get; set; } = SystemColors.ControlLight;
        public Color SurfaceLight { get; set; } = Color.White;
        public Color TextActive
        { get; set; } = SystemColors.ControlText;
        public Color TextInactive { get; set; } = SystemColors.GrayText;
        public Color TextInAccent
        { get; set; } = SystemColors.HighlightText;
        public Color Control { get; set; } = SystemColors.ButtonFace;
        public Color ControlDark
        { get; set; } = SystemColors.ButtonShadow;
        public Color ControlLight { get; set; } = SystemColors.ButtonHighlight;
        public Color Accent
        { get; set; } = DarkModeCS.GetWindowsAccentColor();
        public Color AccentOpaque { get; set; } = DarkModeCS.GetWindowsAccentOpaqueColor();
        public Color AccentDark => ControlPaint.Dark(Accent);
        public Color AccentLight => ControlPaint.Light(Accent);
        public Color Primary { get; set; } = SystemColors.Highlight;
        public Color PrimaryDark => ControlPaint.Dark(Primary);
        public Color PrimaryLight => ControlPaint.Light(Primary);
        public Color Secondary { get; set; } = SystemColors.HotTrack;
        public Color SecondaryDark => ControlPaint.Dark(Secondary);
        public Color SecondaryLight => ControlPaint.Light(Secondary);
    }

    public class MyRenderer : ToolStripProfessionalRenderer
    {
        public bool ColorizeIcons
        { get; set; } = true;
        public OSThemeColors MyColors
        { get; set; }

        public MyRenderer(ProfessionalColorTable table, bool pColorizeIcons = true) : base(table)
        {
            ColorizeIcons = pColorizeIcons;
            MyColors = new OSThemeColors();
        }

        protected override void OnRenderGrip(ToolStripGripRenderEventArgs e)
        {
            base.OnRenderGrip(e);
        }

        protected override void OnRenderToolStripBorder(ToolStripRenderEventArgs e)
        {
            if (e.ToolStrip is ToolStripDropDown)
            {
                using var p = new Pen(MyColors.ControlDark);
                e.Graphics.DrawRectangle(p, 0, 0, e.AffectedBounds.Width - 1, e.AffectedBounds.Height - 1);
            }
            else
            {
                base.OnRenderToolStripBorder(e);
            }
        }

        protected override void OnRenderToolStripBackground(ToolStripRenderEventArgs e)
        {
            if (e.ToolStrip != null)
            {
                e.ToolStrip!.BackColor = MyColors.Background;
            }
            base.OnRenderToolStripBackground(e);
        }

        protected override void OnRenderButtonBackground(ToolStripItemRenderEventArgs e)
        {
            if (e.Item is not ToolStripButton button) return;
            Graphics g = e.Graphics;
            Rectangle bounds = new(Point.Empty, e.Item.Size);

            Color gradientBegin = MyColors.Background;
            Color gradientEnd = MyColors.Background;
            using Pen BordersPencil = new(MyColors.Background);

            if (button.Pressed || button.Checked)
            {
                gradientBegin = MyColors.Control;
                gradientEnd = MyColors.Control;
            }
            else if (button.Selected)
            {
                gradientBegin = MyColors.Accent;
                gradientEnd = MyColors.Accent;
            }

            using (Brush b = new LinearGradientBrush(bounds, gradientBegin, gradientEnd, LinearGradientMode.Vertical))
            {
                g.FillRectangle(b, bounds);
            }

            g.DrawRectangle(BordersPencil, bounds);
            g.DrawLine(BordersPencil, bounds.X, bounds.Y, bounds.Width - 1, bounds.Y);
            g.DrawLine(BordersPencil, bounds.X, bounds.Y, bounds.X, bounds.Height - 1);
        }

        protected override void OnRenderDropDownButtonBackground(ToolStripItemRenderEventArgs e)
        {
            Rectangle bounds = new(Point.Empty, e.Item.Size);
            Color gradientBegin = MyColors.Background;
            Color gradientEnd = MyColors.Background;

            if (e.Item.Pressed)
            {
                gradientBegin = MyColors.Control;
                gradientEnd = MyColors.Control;
            }
            else if (e.Item.Selected)
            {
                gradientBegin = MyColors.Accent;
                gradientEnd = MyColors.Accent;
            }

            using Brush b = new LinearGradientBrush(bounds, gradientBegin, gradientEnd, LinearGradientMode.Vertical);
            e.Graphics.FillRectangle(b, bounds);
        }

        protected override void OnRenderSplitButtonBackground(ToolStripItemRenderEventArgs e)
        {
            Rectangle bounds = new(Point.Empty, e.Item.Size);
            Color gradientBegin = MyColors.Background;
            Color gradientEnd = MyColors.Background;

            if (e.Item.Pressed)
            {
                gradientBegin = MyColors.Control;
                gradientEnd = MyColors.Control;
            }
            else if (e.Item.Selected)
            {
                gradientBegin = MyColors.Accent;
                gradientEnd = MyColors.Accent;
            }

            using (Brush b = new LinearGradientBrush(bounds, gradientBegin, gradientEnd, LinearGradientMode.Vertical))
            {
                e.Graphics.FillRectangle(b, bounds);
            }

            int Padding = 2;
            Size cSize = new(8, 4);
            using Pen ChevronPen = new(MyColors.TextInactive, 2);
            Point P1 = new(bounds.Width - (cSize.Width + Padding), (bounds.Height / 2) - (cSize.Height / 2));
            Point P2 = new(bounds.Width - Padding, (bounds.Height / 2) - (cSize.Height / 2));
            Point P3 = new(bounds.Width - (cSize.Width / 2 + Padding), (bounds.Height / 2) + (cSize.Height / 2));

            e.Graphics.DrawLine(ChevronPen, P1, P3);
            e.Graphics.DrawLine(ChevronPen, P2, P3);
        }

        protected override void OnRenderItemText(ToolStripItemTextRenderEventArgs e)
        {
            if (e.Item != null)
            {
                e.TextColor = e.Item.Enabled ?
                    MyColors.TextActive : MyColors.TextInactive;
            }
            base.OnRenderItemText(e);
        }

        protected override void OnRenderItemBackground(ToolStripItemRenderEventArgs e)
        {
            base.OnRenderItemBackground(e);
            if (e.Item is ToolStripComboBox)
            {
                Rectangle rect = new(Point.Empty, e.Item.Size);
                using Pen p = new(MyColors.ControlLight, 1);
                e.Graphics.DrawRectangle(p, rect);
            }
        }

        protected override void OnRenderMenuItemBackground(ToolStripItemRenderEventArgs e)
        {
            if (e.Item is not ToolStripMenuItem)
            {
                base.OnRenderMenuItemBackground(e);
                return;
            }

            Rectangle bounds = new(Point.Empty, e.Item.Size);
            Color gradientBegin = MyColors.Background;
            Color gradientEnd = MyColors.Background;
            bool DrawIt = false;
            if (e.Item.Pressed)
            {
                gradientBegin = MyColors.Control;
                gradientEnd = MyColors.Control;
                DrawIt = true;
            }
            else if (e.Item.Selected)
            {
                gradientBegin = MyColors.Accent;
                gradientEnd = MyColors.Accent;
                DrawIt = true;
            }

            if (DrawIt)
            {
                using Brush b = new LinearGradientBrush(bounds, gradientBegin, gradientEnd, LinearGradientMode.Vertical);
                e.Graphics.FillRectangle(b, bounds);
            }
        }

        protected override void OnRenderItemImage(ToolStripItemImageRenderEventArgs e)
        {
            if (e.Image == null || e.Item == null)
            {
                base.OnRenderItemImage(e);
                return;
            }

            if (e.Item.GetType().FullName == "System.Windows.Forms.MdiControlStrip+ControlBoxMenuItem")
            {
                Color _ClearColor = e.Item.Enabled ?
                    MyColors.TextActive : MyColors.SurfaceDark;
                using (Image adjustedImage = DarkModeCS.RecolorImage(e.Image, _ClearColor))
                {
                    e.Graphics.InterpolationMode = InterpolationMode.HighQualityBilinear;
                    e.Graphics.CompositingQuality = CompositingQuality.AssumeLinear;
                    e.Graphics.SmoothingMode = SmoothingMode.HighQuality;
                    e.Graphics.DrawImage(adjustedImage, e.ImageRectangle);
                }
                return;
            }

            if (ColorizeIcons)
            {
                Color _ClearColor = e.Item.Enabled ?
                    MyColors.TextInactive : MyColors.SurfaceDark;
                using (Image adjustedImage = DarkModeCS.RecolorImage(e.Image, _ClearColor))
                {
                    e.Graphics.InterpolationMode = InterpolationMode.HighQualityBilinear;
                    e.Graphics.CompositingQuality = CompositingQuality.HighQuality;
                    e.Graphics.SmoothingMode = SmoothingMode.HighQuality;
                    e.Graphics.DrawImage(adjustedImage, e.ImageRectangle);
                }
            }
            else
            {
                base.OnRenderItemImage(e);
            }
        }
    }

    public class CustomColorTable : ProfessionalColorTable
    {
        public OSThemeColors Colors
        { get; set; }

        public CustomColorTable(OSThemeColors _Colors)
        {
            Colors = _Colors;
            UseSystemColors = false;
        }

        public override Color ImageMarginGradientBegin => Colors.Control;
        public override Color ImageMarginGradientMiddle => Colors.Control;
        public override Color ImageMarginGradientEnd => Colors.Control;
    }

    public class ControlStatusStorage
    {
        private readonly ConditionalWeakTable<Control, ControlStatusInfo> _controlsProcessed = new();
        public void ExcludeFromProcessing(Control control)
        {
            _controlsProcessed.Remove(control);
            _controlsProcessed.Add(control, new ControlStatusInfo() { IsExcluded = true });
        }

        public ControlStatusInfo?
        GetControlStatusInfo(Control control)
        {
            _controlsProcessed.TryGetValue(control, out ControlStatusInfo? info);
            return info;
        }

        public void RegisterProcessedControl(Control control, bool isDarkMode)
        {
            _controlsProcessed.Add(control,
                new ControlStatusInfo() { IsExcluded = false, LastThemeAppliedIsDark = isDarkMode });
        }
    }

    public class ControlStatusInfo
    {
        public bool IsExcluded
        { get; set; }
        public bool LastThemeAppliedIsDark
        { get; set; }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/DashboardControl.cs
--------------------------------------------------------------------------------
﻿// File: DashboardControl.cs
using DarkModeForms;
using System;
using System.Collections.Specialized;
using System.Windows.Forms;
using System.Linq;
using MinimalFirewall.TypedObjects;
using System.Drawing;

namespace MinimalFirewall
{
    public partial class DashboardControl : UserControl
    {
        private MainViewModel _viewModel;
        private AppSettings _appSettings;
        private IconService _iconService;
        private WildcardRuleService _wildcardRuleService;
        private FirewallActionsService _actionsService;
        private NetFwTypeLib.INetFwPolicy2 _firewallPolicy;
        private BindingSource _bindingSource;

        public DashboardControl()
        {
            InitializeComponent();
            this.DoubleBuffered = true;
        }

        public void Initialize(MainViewModel viewModel, AppSettings appSettings, IconService iconService, DarkModeCS dm, WildcardRuleService wildcardRuleService, FirewallActionsService actionsService, NetFwTypeLib.INetFwPolicy2 firewallPolicy)
        {
            _viewModel = viewModel;
            _appSettings = appSettings;
            _iconService = iconService;
            _wildcardRuleService = wildcardRuleService;
            _actionsService = actionsService;
            _firewallPolicy = firewallPolicy;

            dashboardDataGridView.AutoGenerateColumns = false;
            _bindingSource = new BindingSource { DataSource = _viewModel.PendingConnections };
            dashboardDataGridView.DataSource = _bindingSource;

            _viewModel.PendingConnections.CollectionChanged += PendingConnections_CollectionChanged;

            LoadDashboardItems();
        }

        public void SetIconColumnVisibility(bool visible)
        {
            if (dashIconColumn != null)
            {
                dashIconColumn.Visible = visible;
            }
        }

        private void PendingConnections_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (this.InvokeRequired)
            {
                this.Invoke(new Action(LoadDashboardItems));
            }
            else
            {
                LoadDashboardItems();
            }
        }

        private void LoadDashboardItems()
        {
            _bindingSource.ResetBindings(false);
            dashboardDataGridView.Refresh();
        }

        private void dashboardDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            // Ensure the click is on a button cell and not on a header
            if (e.RowIndex < 0) return;

            var grid = (DataGridView)sender;
            var column = grid.Columns[e.ColumnIndex];

            if (grid.Rows[e.RowIndex].DataBoundItem is PendingConnectionViewModel pending)
            {
                if (column is DataGridViewButtonColumn)
                {
                    if (column.Name == "allowButtonColumn")
                    {
                        _viewModel.ProcessDashboardAction(pending, "Allow");
                    }
                    else if (column.Name == "blockButtonColumn")
                    {
                        _viewModel.ProcessDashboardAction(pending, "Block");
                    }
                    else if (column.Name == "ignoreButtonColumn")
                    {
                        _viewModel.ProcessDashboardAction(pending, "Ignore");
                    }
                }
            }
        }

        private void dashboardDataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            if (e.RowIndex < 0) return;

            var grid = (DataGridView)sender;

            // Handle App Icons
            if (grid.Columns[e.ColumnIndex].Name == "dashIconColumn")
            {
                if (grid.Rows[e.RowIndex].DataBoundItem is PendingConnectionViewModel pending && _appSettings.ShowAppIcons)
                {
                    int iconIndex = _iconService.GetIconIndex(pending.AppPath);
                    if (iconIndex != -1 && _iconService.ImageList != null)
                    {
                        e.Value = _iconService.ImageList.Images[iconIndex];
                    }
                }
                return;
            }

            // Handle Button Colors
            var allowColumn = grid.Columns["allowButtonColumn"];
            var blockColumn = grid.Columns["blockButtonColumn"];
            var ignoreColumn = grid.Columns["ignoreButtonColumn"];

            if (e.ColumnIndex == allowColumn.Index)
            {
                e.CellStyle.BackColor = Color.FromArgb(204, 255, 204);
                e.CellStyle.ForeColor = Color.Black;
            }
            else if (e.ColumnIndex == blockColumn.Index)
            {
                e.CellStyle.BackColor = Color.FromArgb(255, 204, 204);
                e.CellStyle.ForeColor = Color.Black;
            }

            // Selection Color
            if (grid.Rows[e.RowIndex].Selected)
            {
                e.CellStyle.SelectionBackColor = SystemColors.Highlight;
                e.CellStyle.SelectionForeColor = SystemColors.HighlightText;
            }
            else
            {
                e.CellStyle.SelectionBackColor = e.CellStyle.BackColor;
                e.CellStyle.SelectionForeColor = e.CellStyle.ForeColor;
            }
        }

        private void dashboardDataGridView_RowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)
        {
            var grid = (DataGridView)sender;
            var row = grid.Rows[e.RowIndex];

            // Draw hover effect
            if (row.Selected) return;

            var mouseOverRow = grid.HitTest(grid.PointToClient(MousePosition).X, grid.PointToClient(MousePosition).Y).RowIndex;
            if (e.RowIndex == mouseOverRow)
            {
                using var overlayBrush = new SolidBrush(Color.FromArgb(25, Color.Black));
                e.Graphics.FillRectangle(overlayBrush, e.RowBounds);
            }
        }

        private void dashboardDataGridView_CellMouseEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                var grid = (DataGridView)sender;
                grid.InvalidateRow(e.RowIndex);
            }
        }

        private void dashboardDataGridView_CellMouseLeave(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                var grid = (DataGridView)sender;
                grid.InvalidateRow(e.RowIndex);
            }
        }

        private void TempAllowMenuItem_Click(object sender, EventArgs e)
        {
            if (dashboardDataGridView.SelectedRows.Count > 0 &&
                dashboardDataGridView.SelectedRows[0].DataBoundItem is PendingConnectionViewModel pending &&
                sender is ToolStripMenuItem menuItem &&
                int.TryParse(menuItem.Tag?.ToString(), out int minutes))
            {
                _viewModel.ProcessTemporaryDashboardAction(pending, "TemporaryAllow", TimeSpan.FromMinutes(minutes));
            }
        }

        private void PermanentAllowToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (dashboardDataGridView.SelectedRows.Count > 0 &&
                dashboardDataGridView.SelectedRows[0].DataBoundItem is PendingConnectionViewModel pending)
            {
                _viewModel.ProcessDashboardAction(pending, "Allow");
            }
        }

        private void AllowAndTrustPublisherToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (dashboardDataGridView.SelectedRows.Count > 0 &&
                dashboardDataGridView.SelectedRows[0].DataBoundItem is PendingConnectionViewModel pending)
            {
                _viewModel.ProcessDashboardAction(pending, "Allow", trustPublisher: true);
            }
        }

        private void PermanentBlockToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (dashboardDataGridView.SelectedRows.Count > 0 &&
                dashboardDataGridView.SelectedRows[0].DataBoundItem is PendingConnectionViewModel pending)
            {
                _viewModel.ProcessDashboardAction(pending, "Block");
            }
        }

        private void IgnoreToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (dashboardDataGridView.SelectedRows.Count > 0 &&
                dashboardDataGridView.SelectedRows[0].DataBoundItem is PendingConnectionViewModel pending)
            {
                _viewModel.ProcessDashboardAction(pending, "Ignore");
            }
        }

        private void createWildcardRuleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (dashboardDataGridView.SelectedRows.Count > 0 &&
                dashboardDataGridView.SelectedRows[0].DataBoundItem is PendingConnectionViewModel pending)
            {
                using var wildcardDialog = new WildcardCreatorForm(_wildcardRuleService, pending.AppPath);
                if (wildcardDialog.ShowDialog(this.FindForm()) == DialogResult.OK)
                {
                    var newRule = new WildcardRule
                    {
                        FolderPath = wildcardDialog.FolderPath,
                        ExeName = wildcardDialog.ExeName,
                        Action = wildcardDialog.FinalAction
                    };
                    _wildcardRuleService.AddRule(newRule);
                    _viewModel.PendingConnections.Remove(pending);
                }
            }
        }

        private void ContextMenu_Opening(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (dashboardDataGridView.SelectedRows.Count == 0)
            {
                e.Cancel = true;
                return;
            }

            if (dashboardDataGridView.SelectedRows[0].DataBoundItem is PendingConnectionViewModel pending)
            {
                bool isSigned = SignatureValidationService.GetPublisherInfo(pending.AppPath, out _);
                allowAndTrustPublisherToolStripMenuItem.Visible = isSigned;
            }
        }

        private void createAdvancedRuleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (dashboardDataGridView.SelectedRows.Count > 0 &&
                dashboardDataGridView.SelectedRows[0].DataBoundItem is PendingConnectionViewModel pending)
            {
                using var dialog = new
                    CreateAdvancedRuleForm(_firewallPolicy, _actionsService, pending.AppPath!, pending.Direction!);
                dialog.ShowDialog(this.FindForm());
            }
        }

        private void openFileLocationToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            if (dashboardDataGridView.SelectedRows.Count > 0 &&
                dashboardDataGridView.SelectedRows[0].DataBoundItem is PendingConnectionViewModel pending &&
                !string.IsNullOrEmpty(pending.AppPath) &&
                System.IO.File.Exists(pending.AppPath))
            {
                System.Diagnostics.Process.Start("explorer.exe", $"/select, \"{pending.AppPath}\"");
            }
        }

        private void copyDetailsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (dashboardDataGridView.SelectedRows.Count > 0 &&
                dashboardDataGridView.SelectedRows[0].DataBoundItem is PendingConnectionViewModel pending)
            {
                var details = new System.Text.StringBuilder();
                details.AppendLine($"Type: Pending Connection");
                details.AppendLine($"Application: {pending.FileName}");
                details.AppendLine($"Path: {pending.AppPath}");
                details.AppendLine($"Service: {pending.ServiceName}");
                details.AppendLine($"Direction: {pending.Direction}");
                Clipboard.SetText(details.ToString());
            }
        }
    }
}


--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/DashboardControl.Designer.cs
--------------------------------------------------------------------------------
﻿// File: DashboardControl.Designer.cs
namespace MinimalFirewall
{
    partial class DashboardControl
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.ContextMenuStrip dashboardContextMenu;
        private System.Windows.Forms.ToolStripMenuItem tempAllowToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem allow2MinutesToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem allow5MinutesToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem allow15MinutesToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem allow1HourToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem allow3HoursToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem allow8HoursToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator3;
        private System.Windows.Forms.ToolStripMenuItem permanentAllowToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem allowAndTrustPublisherToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem permanentBlockToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem ignoreToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripMenuItem createWildcardRuleToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator5;
        private System.Windows.Forms.ToolStripMenuItem createAdvancedRuleToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator7;
        private System.Windows.Forms.ToolStripMenuItem openFileLocationToolStripMenuItem1;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator6;
        private System.Windows.Forms.ToolStripMenuItem copyDetailsToolStripMenuItem;
        private System.Windows.Forms.DataGridView dashboardDataGridView;
        private System.Windows.Forms.DataGridViewImageColumn dashIconColumn;
        private System.Windows.Forms.DataGridViewButtonColumn allowButtonColumn;
        private System.Windows.Forms.DataGridViewButtonColumn blockButtonColumn;
        private System.Windows.Forms.DataGridViewButtonColumn ignoreButtonColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn dashAppColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn dashServiceColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn dashDirectionColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn dashPathColumn;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle1 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle2 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle3 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle4 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle5 = new System.Windows.Forms.DataGridViewCellStyle();
            this.dashboardContextMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.tempAllowToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.allow2MinutesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.allow5MinutesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.allow15MinutesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.allow1HourToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.allow3HoursToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.allow8HoursToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator();
            this.permanentAllowToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.allowAndTrustPublisherToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.permanentBlockToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.ignoreToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.createWildcardRuleToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator5 = new System.Windows.Forms.ToolStripSeparator();
            this.createAdvancedRuleToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator7 = new System.Windows.Forms.ToolStripSeparator();
            this.openFileLocationToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator6 = new System.Windows.Forms.ToolStripSeparator();
            this.copyDetailsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.dashboardDataGridView = new System.Windows.Forms.DataGridView();
            this.dashIconColumn = new System.Windows.Forms.DataGridViewImageColumn();
            this.allowButtonColumn = new System.Windows.Forms.DataGridViewButtonColumn();
            this.blockButtonColumn = new System.Windows.Forms.DataGridViewButtonColumn();
            this.ignoreButtonColumn = new System.Windows.Forms.DataGridViewButtonColumn();
            this.dashAppColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.dashServiceColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.dashDirectionColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.dashPathColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.dashboardContextMenu.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.dashboardDataGridView)).BeginInit();
            this.SuspendLayout();
            // 
            // dashboardContextMenu
            // 
            this.dashboardContextMenu.ImageScalingSize = new System.Drawing.Size(20, 20);
            this.dashboardContextMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.tempAllowToolStripMenuItem,
            this.toolStripSeparator3,
            this.permanentAllowToolStripMenuItem,
            this.allowAndTrustPublisherToolStripMenuItem,
            this.permanentBlockToolStripMenuItem,
            this.ignoreToolStripMenuItem,
            this.toolStripSeparator4,
            this.createWildcardRuleToolStripMenuItem,
            this.toolStripSeparator5,
            this.createAdvancedRuleToolStripMenuItem,
            this.toolStripSeparator7,
            this.openFileLocationToolStripMenuItem1,
            this.toolStripSeparator6,
            this.copyDetailsToolStripMenuItem});
            this.dashboardContextMenu.Name = "dashboardContextMenu";
            this.dashboardContextMenu.Size = new System.Drawing.Size(228, 290);
            this.dashboardContextMenu.Opening += new System.ComponentModel.CancelEventHandler(this.ContextMenu_Opening);
            // 
            // tempAllowToolStripMenuItem
            // 
            this.tempAllowToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.allow2MinutesToolStripMenuItem,
            this.allow5MinutesToolStripMenuItem,
            this.allow15MinutesToolStripMenuItem,
            this.allow1HourToolStripMenuItem,
            this.allow3HoursToolStripMenuItem,
            this.allow8HoursToolStripMenuItem});
            this.tempAllowToolStripMenuItem.Name = "tempAllowToolStripMenuItem";
            this.tempAllowToolStripMenuItem.Size = new System.Drawing.Size(227, 24);
            this.tempAllowToolStripMenuItem.Text = "Allow Temporarily";
            // 
            // allow2MinutesToolStripMenuItem
            // 
            this.allow2MinutesToolStripMenuItem.Name = "allow2MinutesToolStripMenuItem";
            this.allow2MinutesToolStripMenuItem.Size = new System.Drawing.Size(162, 26);
            this.allow2MinutesToolStripMenuItem.Tag = "2";
            this.allow2MinutesToolStripMenuItem.Text = "2 minutes";
            this.allow2MinutesToolStripMenuItem.Click += new System.EventHandler(this.TempAllowMenuItem_Click);
            // 
            // allow5MinutesToolStripMenuItem
            // 
            this.allow5MinutesToolStripMenuItem.Name = "allow5MinutesToolStripMenuItem";
            this.allow5MinutesToolStripMenuItem.Size = new System.Drawing.Size(162, 26);
            this.allow5MinutesToolStripMenuItem.Tag = "5";
            this.allow5MinutesToolStripMenuItem.Text = "5 minutes";
            this.allow5MinutesToolStripMenuItem.Click += new System.EventHandler(this.TempAllowMenuItem_Click);
            // 
            // allow15MinutesToolStripMenuItem
            // 
            this.allow15MinutesToolStripMenuItem.Name = "allow15MinutesToolStripMenuItem";
            this.allow15MinutesToolStripMenuItem.Size = new System.Drawing.Size(162, 26);
            this.allow15MinutesToolStripMenuItem.Tag = "15";
            this.allow15MinutesToolStripMenuItem.Text = "15 minutes";
            this.allow15MinutesToolStripMenuItem.Click += new System.EventHandler(this.TempAllowMenuItem_Click);
            // 
            // allow1HourToolStripMenuItem
            // 
            this.allow1HourToolStripMenuItem.Name = "allow1HourToolStripMenuItem";
            this.allow1HourToolStripMenuItem.Size = new System.Drawing.Size(162, 26);
            this.allow1HourToolStripMenuItem.Tag = "60";
            this.allow1HourToolStripMenuItem.Text = "1 hour";
            this.allow1HourToolStripMenuItem.Click += new System.EventHandler(this.TempAllowMenuItem_Click);
            // 
            // allow3HoursToolStripMenuItem
            // 
            this.allow3HoursToolStripMenuItem.Name = "allow3HoursToolStripMenuItem";
            this.allow3HoursToolStripMenuItem.Size = new System.Drawing.Size(162, 26);
            this.allow3HoursToolStripMenuItem.Tag = "180";
            this.allow3HoursToolStripMenuItem.Text = "3 hours";
            this.allow3HoursToolStripMenuItem.Click += new System.EventHandler(this.TempAllowMenuItem_Click);
            // 
            // allow8HoursToolStripMenuItem
            // 
            this.allow8HoursToolStripMenuItem.Name = "allow8HoursToolStripMenuItem";
            this.allow8HoursToolStripMenuItem.Size = new System.Drawing.Size(162, 26);
            this.allow8HoursToolStripMenuItem.Tag = "480";
            this.allow8HoursToolStripMenuItem.Text = "8 hours";
            this.allow8HoursToolStripMenuItem.Click += new System.EventHandler(this.TempAllowMenuItem_Click);
            // 
            // toolStripSeparator3
            // 
            this.toolStripSeparator3.Name = "toolStripSeparator3";
            this.toolStripSeparator3.Size = new System.Drawing.Size(224, 6);
            // 
            // permanentAllowToolStripMenuItem
            // 
            this.permanentAllowToolStripMenuItem.Name = "permanentAllowToolStripMenuItem";
            this.permanentAllowToolStripMenuItem.Size = new System.Drawing.Size(227, 24);
            this.permanentAllowToolStripMenuItem.Text = "Allow";
            this.permanentAllowToolStripMenuItem.Click += new System.EventHandler(this.PermanentAllowToolStripMenuItem_Click);
            // 
            // allowAndTrustPublisherToolStripMenuItem
            // 
            this.allowAndTrustPublisherToolStripMenuItem.Name = "allowAndTrustPublisherToolStripMenuItem";
            this.allowAndTrustPublisherToolStripMenuItem.Size = new System.Drawing.Size(227, 24);
            this.allowAndTrustPublisherToolStripMenuItem.Text = "Allow and Trust Publisher";
            this.allowAndTrustPublisherToolStripMenuItem.Click += new System.EventHandler(this.AllowAndTrustPublisherToolStripMenuItem_Click);
            // 
            // permanentBlockToolStripMenuItem
            // 
            this.permanentBlockToolStripMenuItem.Name = "permanentBlockToolStripMenuItem";
            this.permanentBlockToolStripMenuItem.Size = new System.Drawing.Size(227, 24);
            this.permanentBlockToolStripMenuItem.Text = "Block";
            this.permanentBlockToolStripMenuItem.Click += new System.EventHandler(this.PermanentBlockToolStripMenuItem_Click);
            // 
            // ignoreToolStripMenuItem
            // 
            this.ignoreToolStripMenuItem.Name = "ignoreToolStripMenuItem";
            this.ignoreToolStripMenuItem.Size = new System.Drawing.Size(227, 24);
            this.ignoreToolStripMenuItem.Text = "Ignore";
            this.ignoreToolStripMenuItem.Click += new System.EventHandler(this.IgnoreToolStripMenuItem_Click);
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = "toolStripSeparator4";
            this.toolStripSeparator4.Size = new System.Drawing.Size(224, 6);
            // 
            // createWildcardRuleToolStripMenuItem
            // 
            this.createWildcardRuleToolStripMenuItem.Name = "createWildcardRuleToolStripMenuItem";
            this.createWildcardRuleToolStripMenuItem.Size = new System.Drawing.Size(227, 24);
            this.createWildcardRuleToolStripMenuItem.Text = "Create Wildcard Rule...";
            this.createWildcardRuleToolStripMenuItem.Click += new System.EventHandler(this.createWildcardRuleToolStripMenuItem_Click);
            // 
            // toolStripSeparator5
            // 
            this.toolStripSeparator5.Name = "toolStripSeparator5";
            this.toolStripSeparator5.Size = new System.Drawing.Size(224, 6);
            // 
            // createAdvancedRuleToolStripMenuItem
            // 
            this.createAdvancedRuleToolStripMenuItem.Name = "createAdvancedRuleToolStripMenuItem";
            this.createAdvancedRuleToolStripMenuItem.Size = new System.Drawing.Size(227, 24);
            this.createAdvancedRuleToolStripMenuItem.Text = "Create Advanced Rule...";
            this.createAdvancedRuleToolStripMenuItem.Click += new System.EventHandler(this.createAdvancedRuleToolStripMenuItem_Click);
            // 
            // toolStripSeparator7
            // 
            this.toolStripSeparator7.Name = "toolStripSeparator7";
            this.toolStripSeparator7.Size = new System.Drawing.Size(224, 6);
            // 
            // openFileLocationToolStripMenuItem1
            // 
            this.openFileLocationToolStripMenuItem1.Name = "openFileLocationToolStripMenuItem1";
            this.openFileLocationToolStripMenuItem1.Size = new System.Drawing.Size(227, 24);
            this.openFileLocationToolStripMenuItem1.Text = "Open File Location";
            this.openFileLocationToolStripMenuItem1.Click += new System.EventHandler(this.openFileLocationToolStripMenuItem1_Click);
            // 
            // toolStripSeparator6
            // 
            this.toolStripSeparator6.Name = "toolStripSeparator6";
            this.toolStripSeparator6.Size = new System.Drawing.Size(224, 6);
            // 
            // copyDetailsToolStripMenuItem
            // 
            this.copyDetailsToolStripMenuItem.Name = "copyDetailsToolStripMenuItem";
            this.copyDetailsToolStripMenuItem.Size = new System.Drawing.Size(227, 24);
            this.copyDetailsToolStripMenuItem.Text = "Copy Details";
            this.copyDetailsToolStripMenuItem.Click += new System.EventHandler(this.copyDetailsToolStripMenuItem_Click);
            // 
            // dashboardDataGridView
            // 
            this.dashboardDataGridView.AllowUserToAddRows = false;
            this.dashboardDataGridView.AllowUserToDeleteRows = false;
            this.dashboardDataGridView.AllowUserToResizeRows = false;
            this.dashboardDataGridView.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            this.dashboardDataGridView.BackgroundColor = System.Drawing.SystemColors.Control;
            this.dashboardDataGridView.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.dashboardDataGridView.CellBorderStyle = System.Windows.Forms.DataGridViewCellBorderStyle.None;
            this.dashboardDataGridView.ColumnHeadersBorderStyle = System.Windows.Forms.DataGridViewHeaderBorderStyle.None;
            dataGridViewCellStyle1.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle1.BackColor = System.Drawing.SystemColors.Control;
            dataGridViewCellStyle1.Font = new System.Drawing.Font("Segoe UI", 9F);
            dataGridViewCellStyle1.ForeColor = System.Drawing.SystemColors.WindowText;
            dataGridViewCellStyle1.SelectionBackColor = System.Drawing.SystemColors.Highlight;
            dataGridViewCellStyle1.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
            dataGridViewCellStyle1.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
            this.dashboardDataGridView.ColumnHeadersDefaultCellStyle = dataGridViewCellStyle1;
            this.dashboardDataGridView.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.dashboardDataGridView.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
            this.dashIconColumn,
            this.allowButtonColumn,
            this.blockButtonColumn,
            this.ignoreButtonColumn,
            this.dashAppColumn,
            this.dashServiceColumn,
            this.dashDirectionColumn,
            this.dashPathColumn});
            this.dashboardDataGridView.ContextMenuStrip = this.dashboardContextMenu;
            this.dashboardDataGridView.Dock = System.Windows.Forms.DockStyle.Fill;
            this.dashboardDataGridView.EnableHeadersVisualStyles = false;
            this.dashboardDataGridView.GridColor = System.Drawing.SystemColors.Control;
            this.dashboardDataGridView.Location = new System.Drawing.Point(0, 0);
            this.dashboardDataGridView.MultiSelect = false;
            this.dashboardDataGridView.Name = "dashboardDataGridView";
            this.dashboardDataGridView.ReadOnly = true;
            this.dashboardDataGridView.RowHeadersVisible = false;
            this.dashboardDataGridView.RowTemplate.Height = 32;
            this.dashboardDataGridView.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.dashboardDataGridView.Size = new System.Drawing.Size(800, 600);
            this.dashboardDataGridView.TabIndex = 2;
            this.dashboardDataGridView.CellContentClick += new System.Windows.Forms.DataGridViewCellEventHandler(this.dashboardDataGridView_CellContentClick);
            this.dashboardDataGridView.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(this.dashboardDataGridView_CellFormatting);
            this.dashboardDataGridView.CellMouseEnter += new System.Windows.Forms.DataGridViewCellEventHandler(this.dashboardDataGridView_CellMouseEnter);
            this.dashboardDataGridView.CellMouseLeave += new System.Windows.Forms.DataGridViewCellEventHandler(this.dashboardDataGridView_CellMouseLeave);
            this.dashboardDataGridView.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler(this.dashboardDataGridView_RowPostPaint);
            // 
            // dashIconColumn
            // 
            this.dashIconColumn.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None;
            this.dashIconColumn.DataPropertyName = "AppPath";
            this.dashIconColumn.FillWeight = 10F;
            this.dashIconColumn.HeaderText = "";
            this.dashIconColumn.ImageLayout = System.Windows.Forms.DataGridViewImageCellLayout.Zoom;
            this.dashIconColumn.MinimumWidth = 32;
            this.dashIconColumn.Name = "dashIconColumn";
            this.dashIconColumn.ReadOnly = true;
            this.dashIconColumn.Resizable = System.Windows.Forms.DataGridViewTriState.False;
            this.dashIconColumn.Width = 32;
            // 
            // allowButtonColumn
            // 
            this.allowButtonColumn.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None;
            dataGridViewCellStyle2.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleCenter;
            dataGridViewCellStyle2.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
            this.allowButtonColumn.DefaultCellStyle = dataGridViewCellStyle2;
            this.allowButtonColumn.FillWeight = 15F;
            this.allowButtonColumn.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.allowButtonColumn.HeaderText = "Action";
            this.allowButtonColumn.MinimumWidth = 70;
            this.allowButtonColumn.Name = "allowButtonColumn";
            this.allowButtonColumn.ReadOnly = true;
            this.allowButtonColumn.Text = "Allow";
            this.allowButtonColumn.UseColumnTextForButtonValue = true;
            this.allowButtonColumn.Width = 70;
            // 
            // blockButtonColumn
            // 
            this.blockButtonColumn.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None;
            dataGridViewCellStyle3.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleCenter;
            dataGridViewCellStyle3.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
            this.blockButtonColumn.DefaultCellStyle = dataGridViewCellStyle3;
            this.blockButtonColumn.FillWeight = 15F;
            this.blockButtonColumn.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.blockButtonColumn.HeaderText = "";
            this.blockButtonColumn.MinimumWidth = 70;
            this.blockButtonColumn.Name = "blockButtonColumn";
            this.blockButtonColumn.ReadOnly = true;
            this.blockButtonColumn.Text = "Block";
            this.blockButtonColumn.UseColumnTextForButtonValue = true;
            this.blockButtonColumn.Width = 70;
            // 
            // ignoreButtonColumn
            // 
            this.ignoreButtonColumn.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None;
            dataGridViewCellStyle4.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleCenter;
            dataGridViewCellStyle4.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
            this.ignoreButtonColumn.DefaultCellStyle = dataGridViewCellStyle4;
            this.ignoreButtonColumn.FillWeight = 15F;
            this.ignoreButtonColumn.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.ignoreButtonColumn.HeaderText = "";
            this.ignoreButtonColumn.MinimumWidth = 70;
            this.ignoreButtonColumn.Name = "ignoreButtonColumn";
            this.ignoreButtonColumn.ReadOnly = true;
            this.ignoreButtonColumn.Text = "Ignore";
            this.ignoreButtonColumn.UseColumnTextForButtonValue = true;
            this.ignoreButtonColumn.Width = 70;
            // 
            // dashAppColumn
            // 
            this.dashAppColumn.DataPropertyName = "FileName";
            this.dashAppColumn.FillWeight = 30F;
            this.dashAppColumn.HeaderText = "Application";
            this.dashAppColumn.Name = "dashAppColumn";
            this.dashAppColumn.ReadOnly = true;
            // 
            // dashServiceColumn
            // 
            this.dashServiceColumn.DataPropertyName = "ServiceName";
            this.dashServiceColumn.FillWeight = 30F;
            this.dashServiceColumn.HeaderText = "Service";
            this.dashServiceColumn.Name = "dashServiceColumn";
            this.dashServiceColumn.ReadOnly = true;
            // 
            // dashDirectionColumn
            // 
            this.dashDirectionColumn.DataPropertyName = "Direction";
            this.dashDirectionColumn.FillWeight = 20F;
            this.dashDirectionColumn.HeaderText = "Direction";
            this.dashDirectionColumn.Name = "dashDirectionColumn";
            this.dashDirectionColumn.ReadOnly = true;
            // 
            // dashPathColumn
            // 
            this.dashPathColumn.DataPropertyName = "AppPath";
            dataGridViewCellStyle5.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
            this.dashPathColumn.DefaultCellStyle = dataGridViewCellStyle5;
            this.dashPathColumn.FillWeight = 50F;
            this.dashPathColumn.HeaderText = "Path";
            this.dashPathColumn.Name = "dashPathColumn";
            this.dashPathColumn.ReadOnly = true;
            // 
            // DashboardControl
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 20F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.Controls.Add(this.dashboardDataGridView);
            this.Name = "DashboardControl";
            this.Size = new System.Drawing.Size(800, 600);
            this.dashboardContextMenu.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.dashboardDataGridView)).EndInit();
            this.ResumeLayout(false);

        }
        #endregion
    }
}


--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/DataModels.cs
--------------------------------------------------------------------------------
﻿// File: DataModels.cs
using System.IO;
using System.ComponentModel;
using NetFwTypeLib;
using System.Text.Json.Serialization;
using MinimalFirewall.TypedObjects;

namespace MinimalFirewall
{
    public enum SearchMode { Name, Path }
    public enum RuleType { Program, Service, UWP, Wildcard, Advanced }
    public enum ChangeType { New, Modified, Deleted }

    public class FirewallRuleChange
    {
        public ChangeType Type { get; set; }
        public AdvancedRuleViewModel Rule { get; set; } = new();
    }

    public class UnifiedRuleViewModel
    {
        public string Name { get; set; } = string.Empty;
        public string Path { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public RuleType Type { get; set; }

        [JsonIgnore]
        public string RuleTarget
        {
            get
            {
                return Type switch
                {
                    RuleType.Program => Path,
                    RuleType.Service => Name,
                    RuleType.UWP => UwpPackageFamilyName ?? string.Empty,
                    _ => string.Empty
                };
            }
        }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? UwpPackageFamilyName { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public WildcardRule? WildcardDefinition { get; set; }
    }

    public class AggregatedRuleViewModel : AdvancedRuleViewModel
    {
        public string InboundStatus { get; set; } = string.Empty;
        public string OutboundStatus { get; set; } = string.Empty;
        public List<AdvancedRuleViewModel> UnderlyingRules { get; set; } = [];
    }

    public class AdvancedRuleViewModel
    {
        public string Name { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public bool IsEnabled { get; set; }
        public Directions Direction { get; set; }
        public string LocalPorts { get; set; } = string.Empty;
        public string RemotePorts { get; set; } = string.Empty;
        public int Protocol { get; set; }
        public string ProtocolName { get; set; } = string.Empty;
        public string ApplicationName { get; set; } = string.Empty;
        public string ServiceName { get; set; } = string.Empty;
        public string LocalAddresses { get; set; } = string.Empty;
        public string RemoteAddresses { get; set; } = string.Empty;
        public string Profiles { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Grouping { get; set; } = string.Empty;
        public RuleType Type { get; set; }
        public WildcardRule? WildcardDefinition { get; set; }
        public string InterfaceTypes { get; set; } = string.Empty;
        public string IcmpTypesAndCodes { get; set; } = string.Empty;

        public bool HasSameSettings(AdvancedRuleViewModel? other)
        {
            if (other == null) return false;

            return
                this.Name == other.Name &&
                this.Description == other.Description &&
                this.IsEnabled == other.IsEnabled &&
                this.Status == other.Status &&
                this.Direction == other.Direction &&
                this.Protocol == other.Protocol &&
                this.ApplicationName == other.ApplicationName &&
                this.ServiceName == other.ServiceName &&
                this.LocalPorts == other.LocalPorts &&
                this.RemotePorts == other.RemotePorts &&
                this.LocalAddresses == other.LocalAddresses &&
                this.RemoteAddresses == other.RemoteAddresses &&
                this.Profiles == other.Profiles &&
                this.Grouping == other.Grouping &&
                this.InterfaceTypes == other.InterfaceTypes &&
                this.IcmpTypesAndCodes == other.IcmpTypesAndCodes;
        }
    }

    public class FirewallRuleHashModel
    {
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? ApplicationName { get; set; }
        public string? ServiceName { get; set; }
        public int Protocol { get; set; }
        public string? LocalPorts { get; set; }
        public string? RemotePorts { get; set; }
        public string? LocalAddresses { get; set; }
        public string? RemoteAddresses { get; set; }
        public NET_FW_RULE_DIRECTION_ Direction { get; set; }
        public NET_FW_ACTION_ Action { get; set; }
        public bool Enabled { get; set; }
    }

    public class ProgramViewModel
    {
        public string Name { get; set; } = string.Empty;
        public string ExePath { get; set; } = string.Empty;
    }

    public class RuleFilterViewModel : INotifyPropertyChanged
    {
        private bool _isEnabled = true;
        public string Name { get; set; } = string.Empty;
        public RuleType Type { get; set; }
        public bool IsEnabled
        {
            get => _isEnabled;
            set
            {
                _isEnabled = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(IsEnabled)));
            }
        }
        public event PropertyChangedEventHandler? PropertyChanged;
    }

    public class PendingConnectionViewModel
    {
        public string AppPath { get; set; } = string.Empty;
        public string FileName => Path.GetFileName(AppPath);
        public string Direction { get; set; } = string.Empty;
        public string ServiceName { get; set; } = string.Empty;
        public string Protocol { get; set; } = string.Empty;
        public string RemotePort { get; set; } = string.Empty;
        public string RemoteAddress { get; set; } = string.Empty;
    }

    public class WildcardRule
    {
        public string FolderPath { get; set; } = string.Empty;
        public string ExeName { get; set; } = string.Empty;
        public string Action { get; set; } = string.Empty;
    }

    [JsonSerializable(typeof(List<WildcardRule>))]
    internal partial class WildcardRuleJsonContext : JsonSerializerContext { }

    public class UwpApp
    {
        public string Name { get; set; } = string.Empty;
        public string PackageFamilyName { get; set; } = string.Empty;
        public string Publisher { get; set; } = string.Empty;
        public string Status { get; set; } = "Undefined";
    }

    [JsonSerializable(typeof(List<UwpApp>))]
    internal partial class UwpAppJsonContext : JsonSerializerContext { }

    public class ServiceViewModel
    {
        public string ServiceName { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public string ExePath { get; set; } = string.Empty;
    }

    public class RuleCacheModel
    {
        public string? ProgramRules { get; set; }
        public string? AdvancedRules { get; set; }
    }

    [JsonSourceGenerationOptions(DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonSerializable(typeof(List<UnifiedRuleViewModel>))]
    [JsonSerializable(typeof(List<AdvancedRuleViewModel>))]
    [JsonSerializable(typeof(RuleCacheModel))]
    internal partial class CacheJsonContext : JsonSerializerContext { }

    public enum FirewallTaskType
    {
        ApplyApplicationRule,
        ApplyServiceRule,
        ApplyUwpRule,
        DeleteApplicationRules,
        DeleteUwpRules,
        DeleteAdvancedRules,
        DeleteGroup,
        DeleteWildcardRules,
        ProcessPendingConnection,
        AcceptForeignRule,
        DeleteForeignRule,
        AcceptAllForeignRules,
        CreateAdvancedRule,
        AddWildcardRule,
        SetGroupEnabledState
    }

    public class FirewallTask
    {
        public FirewallTaskType TaskType { get; set; }
        public object Payload { get; set; }

        public FirewallTask(FirewallTaskType taskType, object payload)
        {
            TaskType = taskType;
            Payload = payload;
        }
    }

    public class ApplyApplicationRulePayload { public List<string> AppPaths { get; set; } = []; public string Action { get; set; } = ""; public string? WildcardSourcePath { get; set; } }
    public class ApplyServiceRulePayload { public string ServiceName { get; set; } = ""; public string Action { get; set; } = ""; }
    public class ApplyUwpRulePayload { public List<UwpApp> UwpApps { get; set; } = []; public string Action { get; set; } = ""; }
    public class DeleteRulesPayload { public List<string> RuleIdentifiers { get; set; } = []; }
    public class DeleteWildcardRulePayload { public WildcardRule Wildcard { get; set; } = new(); }
    public class ProcessPendingConnectionPayload { public PendingConnectionViewModel PendingConnection { get; set; } = new(); public string Decision { get; set; } = ""; public TimeSpan Duration { get; set; } = default; public bool TrustPublisher { get; set; } = false; }
    public class ForeignRuleChangePayload { public FirewallRuleChange Change { get; set; } = new(); }
    public class AllForeignRuleChangesPayload { public List<FirewallRuleChange> Changes { get; set; } = []; }
    public class CreateAdvancedRulePayload { public AdvancedRuleViewModel ViewModel { get; set; } = new(); public string InterfaceTypes { get; set; } = ""; public string IcmpTypesAndCodes { get; set; } = ""; }
    public class SetGroupEnabledStatePayload { public string GroupName { get; set; } = string.Empty; public bool IsEnabled { get; set; } }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/FirewallActionService.cs
--------------------------------------------------------------------------------
﻿// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/FirewallActionService.cs
using NetFwTypeLib;
using System.Data;
using System.IO;
using MinimalFirewall.TypedObjects;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using System.Threading.Tasks;
using System.Collections.Concurrent;
using System.Runtime.InteropServices;
using System.Diagnostics;
namespace MinimalFirewall
{
    public partial class FirewallActionsService
    {
        private readonly FirewallRuleService firewallService;
        private readonly UserActivityLogger activityLogger;
        private readonly FirewallEventListenerService eventListenerService;
        private readonly ForeignRuleTracker foreignRuleTracker;
        private readonly FirewallSentryService sentryService;
        private readonly PublisherWhitelistService _whitelistService;
        private readonly INetFwPolicy2 _firewallPolicy;
        private readonly TemporaryRuleManager _temporaryRuleManager;
        private readonly WildcardRuleService _wildcardRuleService;
        private readonly FirewallDataService _dataService;
        private readonly ConcurrentDictionary<string, System.Threading.Timer> _temporaryRuleTimers = new();
        private const string CryptoRuleName = "Minimal Firewall System - Certificate Checks";
        public FirewallActionsService(FirewallRuleService firewallService, UserActivityLogger activityLogger, FirewallEventListenerService eventListenerService, ForeignRuleTracker foreignRuleTracker, FirewallSentryService sentryService, PublisherWhitelistService whitelistService, INetFwPolicy2 firewallPolicy, WildcardRuleService wildcardRuleService, FirewallDataService dataService)
        {
            this.firewallService = firewallService;
            this.activityLogger = activityLogger;
            this.eventListenerService = eventListenerService;
            this.foreignRuleTracker = foreignRuleTracker;
            this.sentryService = sentryService;
            this._whitelistService = whitelistService;
            this._firewallPolicy = firewallPolicy;
            this._wildcardRuleService = wildcardRuleService;
            _temporaryRuleManager = new TemporaryRuleManager();
            _dataService = dataService;
        }

        public void CleanupTemporaryRulesOnStartup()
        {
            var expiredRules = _temporaryRuleManager.GetExpiredRules();
            if (expiredRules.Any())
            {
                var ruleNamesToRemove = expiredRules.Keys.ToList();
                try
                {
                    firewallService.DeleteRulesByName(ruleNamesToRemove);
                    foreach (var ruleName in ruleNamesToRemove)
                    {
                        _temporaryRuleManager.Remove(ruleName);
                    }
                    activityLogger.LogDebug($"Cleaned up {ruleNamesToRemove.Count} expired temporary rules on startup.");
                }
                catch (COMException ex)
                {
                    activityLogger.LogException("CleanupTemporaryRulesOnStartup", ex);
                }
            }
        }

        private static bool IsMfwRule(INetFwRule2 rule)
        {
            if (string.IsNullOrEmpty(rule.Grouping)) return false;
            return rule.Grouping.EndsWith(MFWConstants.MfwRuleSuffix) ||
                   rule.Grouping == MFWConstants.MainRuleGroup ||
                   rule.Grouping == MFWConstants.WildcardRuleGroup;
        }

        private void FindAndQueueDeleteForGeneralBlockRule(string appPath)
        {
            string normalizedAppPath = PathResolver.NormalizePath(appPath);
            var rulesToDelete = new List<string>();
            var allRules = firewallService.GetAllRules();
            try
            {
                foreach (var rule in allRules)
                {
                    if (rule != null &&
                        IsMfwRule(rule) &&
                        rule.Action == NET_FW_ACTION_.NET_FW_ACTION_BLOCK &&
                        string.Equals(PathResolver.NormalizePath(rule.ApplicationName), normalizedAppPath, StringComparison.OrdinalIgnoreCase) &&
                        rule.Protocol == 256 &&
                        rule.LocalPorts == "*" &&
                        rule.RemotePorts == "*")
                    {
                        rulesToDelete.Add(rule.Name);
                    }
                }
            }
            finally
            {
                foreach (var rule in allRules)
                {
                    if (rule != null) Marshal.ReleaseComObject(rule);
                }
            }

            if (rulesToDelete.Any())
            {
                activityLogger.LogDebug($"Auto-deleting general block rule(s) for {appPath} to apply new Allow rule: {string.Join(", ", rulesToDelete)}");
                try
                {
                    firewallService.DeleteRulesByName(rulesToDelete);
                    foreach (var name in rulesToDelete) activityLogger.LogChange("Rule Auto-Deleted", name);
                }
                catch (COMException ex)
                {
                    activityLogger.LogException($"Auto-deleting rules for {appPath}", ex);
                }
            }
        }

        public void ApplyApplicationRuleChange(List<string> appPaths, string action, string? wildcardSourcePath = null)
        {
            var normalizedAppPaths = appPaths.Select(PathResolver.NormalizePath).Where(p => !string.IsNullOrEmpty(p)).Distinct(StringComparer.OrdinalIgnoreCase).ToList();
            if (action.StartsWith("Allow", StringComparison.OrdinalIgnoreCase))
            {
                foreach (var appPath in normalizedAppPaths)
                {
                    FindAndQueueDeleteForGeneralBlockRule(appPath);
                }
            }

            foreach (var appPath in normalizedAppPaths)
            {
                var rulesToRemove = new List<string>();
                if (string.IsNullOrEmpty(wildcardSourcePath))
                {
                    if (action.Contains("Inbound") || action.Contains("(All)"))
                    {
                        rulesToRemove.AddRange(firewallService.GetRuleNamesByPathAndDirection(appPath, NET_FW_RULE_DIRECTION_.NET_FW_RULE_DIR_IN));
                    }
                    if (action.Contains("Outbound") || action.Contains("(All)"))
                    {
                        rulesToRemove.AddRange(firewallService.GetRuleNamesByPathAndDirection(appPath, NET_FW_RULE_DIRECTION_.NET_FW_RULE_DIR_OUT));
                    }
                }

                string appName = Path.GetFileNameWithoutExtension(appPath);
                void createRule(string baseName, Directions dir, Actions act)
                {
                    string description = string.IsNullOrEmpty(wildcardSourcePath) ?
                        "" : $"{MFWConstants.WildcardDescriptionPrefix}{wildcardSourcePath}]";
                    CreateApplicationRule(baseName, appPath, dir, act, ProtocolTypes.Any.Value, description);
                }

                ApplyRuleAction(appName, action, createRule);
                if (rulesToRemove.Any())
                {
                    firewallService.DeleteRulesByName(rulesToRemove);
                }

                activityLogger.LogChange("Rule Changed", action + " for " + appPath);
            }
        }

        public void ApplyServiceRuleChange(string serviceName, string action, string appPath = "")
        {
            if (string.IsNullOrEmpty(serviceName)) return;
            var rulesToRemove = firewallService.DeleteRulesByServiceName(serviceName);

            void createRule(string name, Directions dir, Actions act) => CreateServiceRule(name, serviceName, dir, act, ProtocolTypes.Any.Value, appPath);
            ApplyRuleAction(serviceName, action, createRule);
            if (rulesToRemove.Any())
            {
                firewallService.DeleteRulesByName(rulesToRemove);
            }

            activityLogger.LogChange("Service Rule Changed", action + " for " + serviceName);
        }

        public void ApplyUwpRuleChange(List<UwpApp> uwpApps, string action)
        {
            var packageFamilyNames = uwpApps.Select(app => app.PackageFamilyName).ToList();
            var rulesToRemove = firewallService.DeleteUwpRules(packageFamilyNames);

            foreach (var app in uwpApps)
            {
                void createRule(string name, Directions dir, Actions act) => CreateUwpRule(name, app.PackageFamilyName, dir, act, ProtocolTypes.Any.Value);
                ApplyRuleAction(app.Name, action, createRule);
                activityLogger.LogChange("UWP Rule Changed", action + " for " + app.Name);
            }

            if (rulesToRemove.Any())
            {
                firewallService.DeleteRulesByName(rulesToRemove);
            }
        }

        public void DeleteApplicationRules(List<string> appPaths)
        {
            if (appPaths.Count == 0) return;
            try
            {
                firewallService.DeleteRulesByPath(appPaths);
                foreach (var path in appPaths) activityLogger.LogChange("Rule Deleted", path);
            }
            catch (COMException ex)
            {
                activityLogger.LogException($"DeleteApplicationRules for {string.Join(",", appPaths)}", ex);
            }
        }

        public void DeleteRulesForWildcard(WildcardRule wildcard)
        {
            if (wildcard == null) return;
            try
            {
                string descriptionTag = $"{MFWConstants.WildcardDescriptionPrefix}{wildcard.FolderPath}]";
                firewallService.DeleteRulesByDescription(descriptionTag);
                activityLogger.LogChange("Wildcard Rules Deleted", $"Deleted rules for folder {wildcard.FolderPath}");
            }
            catch (COMException ex)
            {
                activityLogger.LogException($"DeleteRulesForWildcard for {wildcard.FolderPath}", ex);
            }
        }

        public void DeleteUwpRules(List<string> packageFamilyNames)
        {
            if (packageFamilyNames.Count == 0) return;
            try
            {
                firewallService.DeleteUwpRules(packageFamilyNames);
                foreach (var pfn in packageFamilyNames) activityLogger.LogChange("UWP Rule Deleted", pfn);
            }
            catch (COMException ex)
            {
                activityLogger.LogException($"DeleteUwpRules for {string.Join(",", packageFamilyNames)}", ex);
            }
        }

        public void DeleteAdvancedRules(List<string> ruleNames)
        {
            if (ruleNames.Count == 0) return;
            try
            {
                firewallService.DeleteRulesByName(ruleNames);
                foreach (var name in ruleNames) activityLogger.LogChange("Advanced Rule Deleted", name);
            }
            catch (COMException ex)
            {
                activityLogger.LogException($"DeleteAdvancedRules for {string.Join(",", ruleNames)}", ex);
            }
        }

        private void ManageCryptoServiceRule(bool enable)
        {
            INetFwRule2? rule = null;
            try
            {
                rule = firewallService.GetRuleByName(CryptoRuleName);
                if (enable)
                {
                    if (rule == null)
                    {
                        var newRule = (INetFwRule2)Activator.CreateInstance(Type.GetTypeFromProgID("HNetCfg.FWRule")!)!;
                        newRule.WithName(CryptoRuleName)
                               .WithDescription("Allows Windows to check for certificate revocation online. Essential for the 'auto-allow trusted' feature in Lockdown Mode.")
                               .ForService("CryptSvc")
                               .WithDirection(Directions.Outgoing)
                               .WithAction(Actions.Allow)
                               .WithProtocol(ProtocolTypes.TCP.Value)
                               .WithRemotePorts("80,443")
                               .WithGrouping(MFWConstants.MainRuleGroup)
                               .IsEnabled();
                        firewallService.CreateRule(newRule);
                        activityLogger.LogDebug("Created system rule for certificate checks.");
                    }
                    else if (!rule.Enabled)
                    {
                        rule.Enabled = true;
                        activityLogger.LogDebug("Enabled system rule for certificate checks.");
                    }
                }
                else
                {
                    if (rule != null && rule.Enabled)
                    {
                        rule.Enabled = false;
                        activityLogger.LogDebug("Disabled system rule for certificate checks.");
                    }
                }
            }
            catch (COMException ex)
            {
                activityLogger.LogException($"ManageCryptoServiceRule (enable: {enable})", ex);
            }
            finally
            {
                if (rule != null) Marshal.ReleaseComObject(rule);
            }
        }

        public void ToggleLockdown()
        {
            var isCurrentlyLocked = firewallService.GetDefaultOutboundAction() == NET_FW_ACTION_.NET_FW_ACTION_BLOCK;
            bool newLockdownState = !isCurrentlyLocked;
            activityLogger.LogDebug($"Toggling Lockdown. Current state: {(isCurrentlyLocked ? "Locked" : "Unlocked")}. New state: {(newLockdownState ? "Locked" : "Unlocked")}.");
            try
            {
                AdminTaskService.SetAuditPolicy(newLockdownState);
            }
            catch (System.ComponentModel.Win32Exception ex)
            {
                activityLogger.LogException("SetAuditPolicy", ex);
            }

            ManageCryptoServiceRule(newLockdownState);
            if (newLockdownState && !AdminTaskService.IsAuditPolicyEnabled())
            {
                MessageBox.Show(
                    "Failed to verify that Windows Security Auditing was enabled.\n\n" +
                    "The Lockdown dashboard will not be able to detect blocked connections.\n\n" +
                    "Potential Causes:\n" +
                    "1. A local or domain Group Policy is preventing this change.\n" +
                    "2. Other security software is blocking this action.\n\n" +
                    "The firewall's default policy will be set back to 'Allow' for safety.",
                    "Lockdown Mode Failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
                try
                {
                    firewallService.SetDefaultOutboundAction(NET_FW_ACTION_.NET_FW_ACTION_ALLOW);
                }
                catch (COMException ex)
                {
                    activityLogger.LogException("SetDefaultOutboundAction(Allow) after audit failure", ex);
                }
                activityLogger.LogDebug("Lockdown Mode Failed: Could not enable audit policy.");
                return;
            }

            try
            {
                firewallService.SetDefaultOutboundAction(
                    newLockdownState ? NET_FW_ACTION_.NET_FW_ACTION_BLOCK : NET_FW_ACTION_.NET_FW_ACTION_ALLOW);
            }
            catch (COMException ex)
            {
                activityLogger.LogException("SetDefaultOutboundAction", ex);
                MessageBox.Show("Failed to change default outbound policy.\nCheck debug_log.txt for details.",
                    "Lockdown Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            if (newLockdownState)
            {
                eventListenerService.Start();
            }
            else
            {
                eventListenerService.Stop();
            }

            activityLogger.LogChange("Lockdown Mode", newLockdownState ? "Enabled" : "Disabled");
            if (!newLockdownState)
            {
                ReenableMfwRules();
                activityLogger.LogDebug("All MFW rules re-enabled upon disabling Lockdown mode.");
            }
        }

        public void ProcessPendingConnection(PendingConnectionViewModel pending, string decision, TimeSpan duration = default, bool trustPublisher = false)
        {
            activityLogger.LogDebug($"Processing Pending Connection for '{pending.AppPath}'. Decision: {decision}, Duration: {duration}, Trust Publisher: {trustPublisher}");
            TimeSpan shortSnoozeDuration = TimeSpan.FromSeconds(10);
            TimeSpan longSnoozeDuration = TimeSpan.FromMinutes(2);

            if (trustPublisher && SignatureValidationService.GetPublisherInfo(pending.AppPath, out var publisherName) && publisherName != null)
            {
                _whitelistService.Add(publisherName);
                activityLogger.LogChange("Publisher Whitelisted", $"Publisher '{publisherName}' was added to the whitelist.");
            }

            eventListenerService.ClearPendingNotification(pending.AppPath, pending.Direction);
            switch (decision)
            {
                case "Allow":
                case "Block":
                    eventListenerService.SnoozeNotificationsForApp(pending.AppPath, shortSnoozeDuration);
                    string action = (decision == "Allow" ? "Allow" : "Block") + " (" + pending.Direction + ")";
                    if (!string.IsNullOrEmpty(pending.ServiceName))
                    {
                        var serviceNames = pending.ServiceName.Split([',', ' '], StringSplitOptions.RemoveEmptyEntries);
                        foreach (var serviceName in serviceNames)
                        {
                            ApplyServiceRuleChange(serviceName, action, pending.AppPath);
                        }
                    }
                    else if (!string.IsNullOrEmpty(pending.AppPath))
                    {
                        ApplyApplicationRuleChange([pending.AppPath], action);
                    }
                    break;
                case "TemporaryAllow":
                    eventListenerService.SnoozeNotificationsForApp(pending.AppPath, shortSnoozeDuration);
                    CreateTemporaryAllowRule(pending.AppPath, pending.ServiceName, pending.Direction, duration);
                    break;

                case "Ignore":
                    eventListenerService.SnoozeNotificationsForApp(pending.AppPath, longSnoozeDuration);
                    activityLogger.LogDebug($"Ignored Connection: {pending.Direction} for {pending.AppPath}");
                    break;
            }
        }

        private void ReenableMfwRules()
        {
            var allRules = firewallService.GetAllRules();
            try
            {
                foreach (var rule in allRules)
                {
                    try
                    {
                        if (!string.IsNullOrEmpty(rule.Grouping) &&
                            (rule.Grouping.EndsWith(MFWConstants.MfwRuleSuffix) ||
                             rule.Grouping == "Minimal Firewall" ||
                             rule.Grouping == "Minimal Firewall (Wildcard)"))
                        {
                            if (!rule.Enabled)
                            {
                                rule.Enabled = true;
                            }
                        }
                    }
                    catch (COMException ex)
                    {
                        activityLogger.LogException($"Enable rule '{rule.Name}'", ex);
                    }
                }
            }
            finally
            {
                foreach (var rule in allRules)
                {
                    Marshal.ReleaseComObject(rule);
                }
            }
        }

        private void CreateTemporaryAllowRule(string appPath, string serviceName, string direction, TimeSpan duration)
        {
            if (!ParseActionString($"Allow ({direction})", out Actions parsedAction, out Directions parsedDirection)) return;
            string baseName = !string.IsNullOrEmpty(serviceName) ? serviceName.Split(',')[0].Trim() : Path.GetFileNameWithoutExtension(appPath);
            string guid = Guid.NewGuid().ToString();
            string description = "Temporarily allowed by Minimal Firewall.";
            string ruleName = $"Temp Allow - {baseName} - {direction} - {guid}";

            if (!string.IsNullOrEmpty(serviceName))
            {
                CreateServiceRule(ruleName, serviceName, parsedDirection, parsedAction, ProtocolTypes.Any.Value, appPath);
            }
            else
            {
                CreateApplicationRule(ruleName, appPath, parsedDirection, parsedAction, ProtocolTypes.Any.Value, description);
            }

            DateTime expiry = DateTime.UtcNow.Add(duration);
            _temporaryRuleManager.Add(ruleName, expiry);
            activityLogger.LogChange("Temporary Rule Created", $"Allowed {baseName} ({appPath}) for {duration.TotalMinutes} minutes.");
            var timer = new System.Threading.Timer(_ =>
            {
                try
                {
                    firewallService.DeleteRulesByName([ruleName]);
                    _temporaryRuleManager.Remove(ruleName);
                    if (_temporaryRuleTimers.TryRemove(ruleName, out var t))
                    {
                        t.Dispose();
                    }
                    activityLogger.LogDebug($"Temporary rule {ruleName} expired and was removed.");
                }
                catch (COMException ex)
                {
                    activityLogger.LogException($"Deleting temporary rule {ruleName}", ex);
                }
            }, null, duration, Timeout.InfiniteTimeSpan);
            _temporaryRuleTimers[ruleName] = timer;
        }

        public void AcceptForeignRule(FirewallRuleChange change)
        {
            if (change.Rule?.Name is not null)
            {
                foreignRuleTracker.AcknowledgeRules([change.Rule.Name]);
                activityLogger.LogChange("Foreign Rule Accepted", change.Rule.Name);
                activityLogger.LogDebug($"Sentry: Accepting foreign rule '{change.Rule.Name}'");
            }
        }

        public void DeleteForeignRule(FirewallRuleChange change)
        {
            if (change.Rule?.Name is not null)
            {
                activityLogger.LogDebug($"Sentry: Deleting foreign rule '{change.Rule.Name}'");
                DeleteAdvancedRules([change.Rule.Name]);
            }
        }

        public void SetGroupEnabledState(string groupName, bool isEnabled)
        {
            INetFwRules? comRules = null;
            var rulesInGroup = new List<INetFwRule2>();
            try
            {
                comRules = _firewallPolicy.Rules;
                foreach (INetFwRule2 r in comRules)
                {
                    if (r != null && string.Equals(r.Grouping, groupName, StringComparison.OrdinalIgnoreCase))
                    {
                        rulesInGroup.Add(r);
                    }
                    else
                    {
                        if (r != null) Marshal.ReleaseComObject(r);
                    }
                }

                foreach (var rule in rulesInGroup)
                {
                    try
                    {
                        if (rule.Enabled != isEnabled)
                        {
                            rule.Enabled = isEnabled;
                        }
                    }
                    catch (COMException ex)
                    {
                        activityLogger.LogException($"SetGroupEnabledState for rule '{rule.Name}'", ex);
                    }
                }
                activityLogger.LogChange("Group State Changed", $"Group '{groupName}' {(isEnabled ? "Enabled" : "Disabled")}");
            }
            catch (COMException ex)
            {
                activityLogger.LogException($"SetGroupEnabledState for group '{groupName}'", ex);
            }
            finally
            {
                foreach (var rule in rulesInGroup)
                {
                    if (rule != null) Marshal.ReleaseComObject(rule);
                }
                if (comRules != null) Marshal.ReleaseComObject(comRules);
            }
        }

        public void AcceptAllForeignRules(List<FirewallRuleChange> changes)
        {
            if (changes == null || changes.Count == 0) return;
            var ruleNames = changes.Select(c => c.Rule?.Name).Where(n => n != null).Select(n => n!).ToList();
            if (ruleNames.Any())
            {
                foreignRuleTracker.AcknowledgeRules(ruleNames);
                activityLogger.LogChange("All Foreign Rules Accepted", $"{ruleNames.Count} rules accepted.");
                activityLogger.LogDebug($"Sentry: Accepted all {ruleNames.Count} foreign rules.");
            }
        }

        public void CreateAdvancedRule(AdvancedRuleViewModel vm, string interfaceTypes, string icmpTypesAndCodes)
        {
            if (!string.IsNullOrWhiteSpace(vm.ApplicationName))
            {
                vm.ApplicationName = PathResolver.NormalizePath(vm.ApplicationName);
            }

            if (vm.Status == "Allow" && !string.IsNullOrWhiteSpace(vm.ApplicationName))
            {
                FindAndQueueDeleteForGeneralBlockRule(vm.ApplicationName);
            }

            bool hasProgramOrService = !string.IsNullOrWhiteSpace(vm.ApplicationName) || !string.IsNullOrWhiteSpace(vm.ServiceName);
            bool isProtocolTcpUdpOrAny = vm.Protocol == ProtocolTypes.TCP.Value ||
                                     vm.Protocol == ProtocolTypes.UDP.Value ||
                                     vm.Protocol == ProtocolTypes.Any.Value;
            if (hasProgramOrService && !isProtocolTcpUdpOrAny)
            {
                MessageBox.Show(
                    "When specifying a program or service, the protocol must be TCP, UDP, or Any.",
                    "Invalid Rule", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            var directionsToCreate = new List<Directions>(2);
            if (vm.Direction.HasFlag(Directions.Incoming)) directionsToCreate.Add(Directions.Incoming);
            if (vm.Direction.HasFlag(Directions.Outgoing)) directionsToCreate.Add(Directions.Outgoing);

            var protocolsToCreate = new List<int>();
            if (hasProgramOrService && vm.Protocol == ProtocolTypes.Any.Value)
            {
                protocolsToCreate.Add(ProtocolTypes.TCP.Value);
                protocolsToCreate.Add(ProtocolTypes.UDP.Value);
            }
            else
            {
                protocolsToCreate.Add(vm.Protocol);
            }

            foreach (var direction in directionsToCreate)
            {
                foreach (var protocol in protocolsToCreate)
                {
                    var ruleVm = new AdvancedRuleViewModel
                    {
                        Name = vm.Name,
                        Status = vm.Status,
                        IsEnabled = vm.IsEnabled,
                        Description = vm.Description,
                        Grouping = vm.Grouping,
                        ApplicationName = vm.ApplicationName,
                        ServiceName = vm.ServiceName,
                        LocalPorts = vm.LocalPorts,
                        RemotePorts = vm.RemotePorts,
                        LocalAddresses = vm.LocalAddresses,
                        RemoteAddresses = vm.RemoteAddresses,
                        Profiles = vm.Profiles,
                        Type = vm.Type,
                        Direction = direction,
                        Protocol = (short)protocol
                    };
                    string nameSuffix = "";
                    if (directionsToCreate.Count > 1)
                    {
                        nameSuffix += $" - {direction}";
                    }
                    if (protocolsToCreate.Count > 1)
                    {
                        nameSuffix += (protocol == ProtocolTypes.TCP.Value) ?
                            " - TCP" : " - UDP";
                    }
                    ruleVm.Name = vm.Name + nameSuffix;
                    CreateSingleAdvancedRule(ruleVm, interfaceTypes, icmpTypesAndCodes);
                }
            }
        }

        private void CreateSingleAdvancedRule(AdvancedRuleViewModel vm, string interfaceTypes, string icmpTypesAndCodes)
        {
            var firewallRule = (INetFwRule2)Activator.CreateInstance(Type.GetTypeFromProgID("HNetCfg.FWRule")!)!;
            firewallRule.Name = vm.Name;
            firewallRule.Description = vm.Description;
            firewallRule.Enabled = vm.IsEnabled;
            firewallRule.Grouping = vm.Grouping;
            firewallRule.Action = vm.Status == "Allow" ?
                NET_FW_ACTION_.NET_FW_ACTION_ALLOW : NET_FW_ACTION_.NET_FW_ACTION_BLOCK;
            firewallRule.Direction = (NET_FW_RULE_DIRECTION_)vm.Direction;
            firewallRule.Protocol = vm.Protocol;

            if (!string.IsNullOrWhiteSpace(vm.ServiceName))
            {
                firewallRule.serviceName = vm.ServiceName;
            }

            if (!string.IsNullOrWhiteSpace(vm.ApplicationName))
            {
                firewallRule.ApplicationName = vm.ApplicationName;
            }
            else
            {
                firewallRule.ApplicationName = null;
            }

            if (vm.Protocol != ProtocolTypes.TCP.Value && vm.Protocol != ProtocolTypes.UDP.Value)
            {
                firewallRule.LocalPorts = "*";
                firewallRule.RemotePorts = "*";
            }
            else
            {
                firewallRule.LocalPorts = !string.IsNullOrEmpty(vm.LocalPorts) ?
                    vm.LocalPorts : "*";
                firewallRule.RemotePorts = !string.IsNullOrEmpty(vm.RemotePorts) ? vm.RemotePorts : "*";
            }

            firewallRule.LocalAddresses = !string.IsNullOrEmpty(vm.LocalAddresses) ? vm.LocalAddresses : "*";
            firewallRule.RemoteAddresses = !string.IsNullOrEmpty(vm.RemoteAddresses) ? vm.RemoteAddresses : "*";

            NET_FW_PROFILE_TYPE2_ profiles = 0;
            if (vm.Profiles.Contains("Domain")) profiles |= NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_DOMAIN;
            if (vm.Profiles.Contains("Private")) profiles |= NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_PRIVATE;
            if (vm.Profiles.Contains("Public")) profiles |= NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_PUBLIC;
            if (profiles == 0) profiles = NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_ALL;
            firewallRule.Profiles = (int)profiles;
            firewallRule.InterfaceTypes = interfaceTypes;
            if (vm.Protocol == ProtocolTypes.ICMPv4.Value || vm.Protocol == ProtocolTypes.ICMPv6.Value)
            {
                if (!string.IsNullOrWhiteSpace(icmpTypesAndCodes))
                {
                    firewallRule.IcmpTypesAndCodes = icmpTypesAndCodes;
                }
            }

            firewallService.CreateRule(firewallRule);
            activityLogger.LogChange("Advanced Rule Created", vm.Name);
            activityLogger.LogDebug($"Created Advanced Rule: '{vm.Name}'");
        }

        public static bool ParseActionString(string action, out Actions parsedAction, out Directions parsedDirection)
        {
            parsedAction = Actions.Allow;
            parsedDirection = 0;
            if (string.IsNullOrEmpty(action)) return false;

            parsedAction = action.StartsWith("Allow", StringComparison.OrdinalIgnoreCase) ? Actions.Allow : Actions.Block;
            if (action.Contains("(All)"))
            {
                parsedDirection = Directions.Incoming |
                    Directions.Outgoing;
            }
            else
            {
                if (action.Contains("Inbound") || action.Contains("Incoming"))
                {
                    parsedDirection |= Directions.Incoming;
                }
                if (action.Contains("Outbound") || action.Contains("Outgoing"))
                {
                    parsedDirection |= Directions.Outgoing;
                }
            }

            if (parsedDirection == 0)
            {
                parsedDirection = Directions.Outgoing;
            }

            return true;
        }

        private static void ApplyRuleAction(string appName, string action, Action<string, Directions, Actions> createRule)
        {
            if (!ParseActionString(action, out Actions parsedAction, out Directions parsedDirection))
            {
                return;
            }

            string actionStr = parsedAction == Actions.Allow ?
                "" : "Block ";
            string inName = $"{appName} - {actionStr}In";
            string outName = $"{appName} - {actionStr}Out";
            if (parsedDirection.HasFlag(Directions.Incoming))
            {
                createRule(inName, Directions.Incoming, parsedAction);
            }
            if (parsedDirection.HasFlag(Directions.Outgoing))
            {
                createRule(outName, Directions.Outgoing, parsedAction);
            }
        }

        private static INetFwRule2 CreateRuleObject(string name, string appPath, Directions direction, Actions action, int protocol, string description = "")
        {
            var firewallRule = (INetFwRule2)Activator.CreateInstance(Type.GetTypeFromProgID("HNetCfg.FWRule")!)!;
            firewallRule.Name = name;
            firewallRule.ApplicationName = appPath;
            firewallRule.Direction = (NET_FW_RULE_DIRECTION_)direction;
            firewallRule.Action = (NET_FW_ACTION_)action;
            firewallRule.Enabled = true;
            firewallRule.Protocol = protocol;
            if (!string.IsNullOrEmpty(description) && description.StartsWith(MFWConstants.WildcardDescriptionPrefix))
            {
                firewallRule.Grouping = MFWConstants.WildcardRuleGroup;
                firewallRule.Description = description;
            }
            else
            {
                firewallRule.Grouping = MFWConstants.MainRuleGroup;
            }
            return firewallRule;
        }

        private void CreateApplicationRule(string name, string appPath, Directions direction, Actions action, int protocol, string description)
        {
            activityLogger.LogDebug($"Creating Application Rule: '{name}' for '{appPath}'");
            var firewallRule = CreateRuleObject(name, appPath, direction, action, protocol, description);
            firewallService.CreateRule(firewallRule);
        }

        private void CreateServiceRule(string name, string serviceName, Directions direction, Actions action, int protocol, string appPath = "")
        {
            activityLogger.LogDebug($"Creating Service Rule: '{name}' for service '{serviceName}' with program '{appPath}'");
            var firewallRule = (INetFwRule2)Activator.CreateInstance(Type.GetTypeFromProgID("HNetCfg.FWRule")!)!;
            firewallRule.Name = name;
            firewallRule.serviceName = serviceName;
            if (!string.IsNullOrEmpty(appPath))
            {
                firewallRule.ApplicationName = appPath;
            }
            firewallRule.Direction = (NET_FW_RULE_DIRECTION_)direction;
            firewallRule.Action = (NET_FW_ACTION_)action;
            firewallRule.Protocol = protocol;
            firewallRule.Grouping = MFWConstants.MainRuleGroup;
            firewallRule.Enabled = true;
            firewallService.CreateRule(firewallRule);
        }

        private void CreateUwpRule(string name, string packageFamilyName, Directions direction, Actions action, int protocol)
        {
            activityLogger.LogDebug($"Creating UWP Rule: '{name}' for PFN '{packageFamilyName}'");
            var firewallRule = (INetFwRule2)Activator.CreateInstance(Type.GetTypeFromProgID("HNetCfg.FWRule")!)!;
            firewallRule.Name = name;
            firewallRule.Description = MFWConstants.UwpDescriptionPrefix + packageFamilyName;
            firewallRule.Direction = (NET_FW_RULE_DIRECTION_)direction;
            firewallRule.Action = (NET_FW_ACTION_)action;
            firewallRule.Protocol = protocol;
            firewallRule.Grouping = MFWConstants.MainRuleGroup;
            firewallRule.Enabled = true;
            firewallService.CreateRule(firewallRule);
        }

        public async Task DeleteGroupAsync(string groupName)
        {
            await Task.Run(() =>
            {
                try
                {
                    activityLogger.LogDebug($"Deleting all rules in group: {groupName}");
                    firewallService.DeleteRulesByGroup(groupName);
                }
                catch (COMException ex)
                {
                    activityLogger.LogException($"DeleteGroupAsync for {groupName}", ex);
                }
            });
        }

        public void DeleteAllMfwRules()
        {
            try
            {
                firewallService.DeleteAllMfwRules();
                _wildcardRuleService.ClearRules();
                activityLogger.LogChange("Bulk Delete", "All Minimal Firewall rules deleted by user.");
            }
            catch (COMException ex)
            {
                activityLogger.LogException("DeleteAllMfwRules", ex);
            }
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/FirewallDataService.cs
--------------------------------------------------------------------------------
﻿// File: FirewallDataService.cs
using NetFwTypeLib;
using System.IO;
using System.Linq;
using MinimalFirewall.TypedObjects;
using System.Collections.Generic;
using Microsoft.Extensions.Caching.Memory;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using System.Diagnostics;
namespace MinimalFirewall
{
    public class FirewallDataService
    {
        private readonly FirewallRuleService _firewallService;
        private readonly WildcardRuleService _wildcardRuleService;
        private readonly UwpService _uwpService;
        private readonly MemoryCache _localCache;
        private const string ServicesCacheKey = "ServicesList";
        private const string MfwRulesCacheKey = "MfwRulesList";
        private const string AggregatedRulesCacheKey = "AggregatedRulesList";
        public FirewallDataService(FirewallRuleService firewallService, WildcardRuleService wildcardRuleService, UwpService uwpService)
        {
            _firewallService = firewallService;
            _wildcardRuleService = wildcardRuleService;
            _uwpService = uwpService;
            _localCache = new MemoryCache(new MemoryCacheOptions());
        }

        public void ClearAggregatedRulesCache()
        {
            _localCache.Remove(AggregatedRulesCacheKey);
        }

        public void InvalidateMfwRuleCache()
        {
            _localCache.Remove(MfwRulesCacheKey);
        }

        public List<ServiceViewModel> GetCachedServicesWithExePaths()
        {
            if (_localCache.TryGetValue(ServicesCacheKey, out List<ServiceViewModel>? services) && services != null)
            {
                return services;
            }

            services = SystemDiscoveryService.GetServicesWithExePaths();
            var cacheOptions = new MemoryCacheEntryOptions()
                .SetSlidingExpiration(TimeSpan.FromMinutes(10));
            _localCache.Set(ServicesCacheKey, services, cacheOptions);
            return services;
        }

        public async Task<List<AggregatedRuleViewModel>> GetAggregatedRulesAsync(CancellationToken token, IProgress<int>? progress = null)
        {
            if (_localCache.TryGetValue(AggregatedRulesCacheKey, out List<AggregatedRuleViewModel>? cachedRules) && cachedRules != null)
            {
                progress?.Report(100);
                return cachedRules;
            }

            var aggregatedRules = await Task.Run(() =>
            {
                var allRules = _firewallService.GetAllRules();
                try
                {
                    var enabledRules = allRules.Where(r => r.Enabled && !string.IsNullOrEmpty(r.Grouping)).ToList();
                    int totalRules = enabledRules.Count;
                    if (totalRules == 0)
                    {
                        progress?.Report(100);
                        return new List<AggregatedRuleViewModel>();
                    }

                    var groupedByGroupingAndProtocol = enabledRules
                        .GroupBy(r => $"{r.Grouping}|{r.ApplicationName}|{r.serviceName}|{r.Protocol}")
                        .ToList();

                    var aggRules = new List<AggregatedRuleViewModel>();
                    int processedCount = 0;

                    foreach (var group in groupedByGroupingAndProtocol)
                    {
                        if (token.IsCancellationRequested) return new List<AggregatedRuleViewModel>();
                        var groupList = group.ToList();
                        aggRules.Add(CreateAggregatedViewModelForRuleGroup(groupList));
                        processedCount += groupList.Count;
                        progress?.Report((processedCount * 100) / totalRules);
                    }

                    progress?.Report(100);
                    return aggRules.OrderBy(r => r.Name).ToList();
                }
                finally
                {
                    foreach (var rule in allRules)
                    {
                        if (rule != null) Marshal.ReleaseComObject(rule);
                    }
                }
            }, token);

            if (token.IsCancellationRequested) return new List<AggregatedRuleViewModel>();

            var cacheEntryOptions = new MemoryCacheEntryOptions().SetSlidingExpiration(TimeSpan.FromMinutes(5));
            _localCache.Set(AggregatedRulesCacheKey, aggregatedRules, cacheEntryOptions);

            return aggregatedRules;
        }

        private AggregatedRuleViewModel CreateAggregatedViewModelForRuleGroup(List<INetFwRule2> group)
        {
            var firstRule = group.First();

            var commonName = GetCommonName(group);
            if (string.IsNullOrEmpty(commonName) || commonName.StartsWith("@"))
            {
                commonName = firstRule.Grouping;
            }

            var aggRule = new AggregatedRuleViewModel
            {
                Name = commonName,
                ApplicationName = firstRule.ApplicationName,
                ServiceName = firstRule.serviceName,
                Protocol = firstRule.Protocol,
                ProtocolName = GetProtocolName(firstRule.Protocol),
                Type = DetermineRuleType(firstRule),
                UnderlyingRules = group.Select(CreateAdvancedRuleViewModel).ToList(),
                IsEnabled = group.All(r => r.Enabled),
                Profiles = GetProfileString(firstRule.Profiles),
                Grouping = firstRule.Grouping ?? "",
                Description = firstRule.Description ?? ""
            };

            bool hasInAllow = group.Any(r => r.Action == NET_FW_ACTION_.NET_FW_ACTION_ALLOW && r.Direction == NET_FW_RULE_DIRECTION_.NET_FW_RULE_DIR_IN);
            bool hasOutAllow = group.Any(r => r.Action == NET_FW_ACTION_.NET_FW_ACTION_ALLOW && r.Direction == NET_FW_RULE_DIRECTION_.NET_FW_RULE_DIR_OUT);
            bool hasInBlock = group.Any(r => r.Action == NET_FW_ACTION_.NET_FW_ACTION_BLOCK && r.Direction == NET_FW_RULE_DIRECTION_.NET_FW_RULE_DIR_IN);
            bool hasOutBlock = group.Any(r => r.Action == NET_FW_ACTION_.NET_FW_ACTION_BLOCK && r.Direction == NET_FW_RULE_DIRECTION_.NET_FW_RULE_DIR_OUT);

            aggRule.InboundStatus = hasInAllow ? "Allow" : (hasInBlock ? "Block" : "N/A");
            if (hasInAllow && hasInBlock) aggRule.InboundStatus = "Allow, Block";

            aggRule.OutboundStatus = hasOutAllow ? "Allow" : (hasOutBlock ? "Block" : "N/A");
            if (hasOutAllow && hasOutBlock) aggRule.OutboundStatus = "Allow, Block";

            var localPorts = group.Select(r => r.LocalPorts).Where(p => !string.IsNullOrEmpty(p) && p != "*").Distinct().ToList();
            aggRule.LocalPorts = localPorts.Any() ? string.Join(", ", localPorts) : "*";

            var remotePorts = group.Select(r => r.RemotePorts).Where(p => !string.IsNullOrEmpty(p) && p != "*").Distinct().ToList();
            aggRule.RemotePorts = remotePorts.Any() ? string.Join(", ", remotePorts) : "*";

            var localAddresses = group.Select(r => r.LocalAddresses).Where(p => !string.IsNullOrEmpty(p) && p != "*").Distinct().ToList();
            aggRule.LocalAddresses = localAddresses.Any() ? string.Join(", ", localAddresses) : "*";

            var remoteAddresses = group.Select(r => r.RemoteAddresses).Where(p => !string.IsNullOrEmpty(p) && p != "*").Distinct().ToList();
            aggRule.RemoteAddresses = remoteAddresses.Any() ? string.Join(", ", remoteAddresses) : "*";

            return aggRule;
        }

        private string GetCommonName(List<INetFwRule2> group)
        {
            if (group.Count == 0) return string.Empty;
            if (group.Count == 1) return group[0].Name;

            var names = group.Select(r => r.Name).ToList();
            string first = names[0];
            int commonPrefixLength = first.Length;

            foreach (string name in names.Skip(1))
            {
                commonPrefixLength = Math.Min(commonPrefixLength, name.Length);
                for (int i = 0; i < commonPrefixLength; i++)
                {
                    if (first[i] != name[i])
                    {
                        commonPrefixLength = i;
                        break;
                    }
                }
            }

            string commonPrefix = first.Substring(0, commonPrefixLength).Trim();
            if (commonPrefix.EndsWith("-") || commonPrefix.EndsWith("("))
            {
                commonPrefix = commonPrefix.Substring(0, commonPrefix.Length - 1).Trim();
            }

            return string.IsNullOrEmpty(commonPrefix) ? group[0].Grouping : commonPrefix;
        }


        private RuleType DetermineRuleType(INetFwRule2 rule)
        {
            if (!string.IsNullOrEmpty(rule.serviceName) && rule.serviceName != "*")
                return RuleType.Service;
            if (!string.IsNullOrEmpty(rule.ApplicationName) && rule.ApplicationName != "*")
            {
                bool hasSpecifics = (!string.IsNullOrEmpty(rule.LocalPorts) && rule.LocalPorts != "*") ||
                                    (!string.IsNullOrEmpty(rule.RemotePorts) && rule.RemotePorts != "*") ||
                                    (!string.IsNullOrEmpty(rule.LocalAddresses) && rule.LocalAddresses != "*") ||
                                    (!string.IsNullOrEmpty(rule.RemoteAddresses) && rule.RemoteAddresses != "*");
                return hasSpecifics ? RuleType.Advanced : RuleType.Program;
            }
            return RuleType.Advanced;
        }


        private List<AdvancedRuleViewModel> GetMfwRulesFromCache()
        {
            if (_localCache.TryGetValue(MfwRulesCacheKey, out List<AdvancedRuleViewModel>? cachedRules) && cachedRules != null)
            {
                return cachedRules;
            }

            var allRules = _firewallService.GetAllRules();
            try
            {
                var newCachedRules = allRules
                    .Where(rule =>
                        !string.IsNullOrEmpty(rule.Grouping) &&
                        (rule.Grouping == MFWConstants.MainRuleGroup || rule.Grouping == MFWConstants.WildcardRuleGroup || rule.Grouping.EndsWith(MFWConstants.MfwRuleSuffix))
                    )
                    .Select(CreateAdvancedRuleViewModel)
                    .ToList();
                var cacheEntryOptions = new MemoryCacheEntryOptions()
                    .SetSlidingExpiration(TimeSpan.FromMinutes(10));
                _localCache.Set(MfwRulesCacheKey, newCachedRules, cacheEntryOptions);
                return newCachedRules;
            }
            finally
            {
                foreach (var rule in allRules)
                {
                    Marshal.ReleaseComObject(rule);
                }
            }
        }

        public bool DoesAnyRuleExist(string appPath, string serviceName, string direction)
        {
            if (!Enum.TryParse<Directions>(direction, true, out var dirEnum))
            {
                return false;
            }

            var mfwRules = GetMfwRulesFromCache();
            bool ruleExists = false;
            foreach (var rule in mfwRules)
            {
                if (rule.Direction.HasFlag(dirEnum))
                {
                    if (!string.IsNullOrEmpty(rule.ApplicationName) && rule.ApplicationName.Equals(appPath, StringComparison.OrdinalIgnoreCase))
                    {
                        ruleExists = true;
                        break;
                    }
                    if (!string.IsNullOrEmpty(serviceName) && !string.IsNullOrEmpty(rule.ServiceName))
                    {
                        var serviceNames = serviceName.Split([',', ' '], StringSplitOptions.RemoveEmptyEntries);
                        foreach (var sName in serviceNames)
                        {
                            if (rule.ServiceName.Equals(sName, StringComparison.OrdinalIgnoreCase))
                            {
                                ruleExists = true;
                                break;
                            }
                        }
                        if (ruleExists) break;
                    }
                }
            }
            return ruleExists;
        }

        public void ClearCaches()
        {
            _localCache.Remove(ServicesCacheKey);
            _localCache.Remove(MfwRulesCacheKey);
            _localCache.Remove(AggregatedRulesCacheKey);
        }

        public static AdvancedRuleViewModel CreateAdvancedRuleViewModel(INetFwRule2 rule)
        {
            var appName = rule.ApplicationName ?? string.Empty;
            return new AdvancedRuleViewModel
            {
                Name = rule.Name ?? "Unnamed Rule",
                Description = rule.Description ?? "N/A",
                IsEnabled = rule.Enabled,
                Status = rule.Action == NET_FW_ACTION_.NET_FW_ACTION_ALLOW ? "Allow" : "Block",
                Direction = (Directions)rule.Direction,
                ApplicationName = appName == "*" ? "*" : PathResolver.NormalizePath(appName),
                LocalPorts = string.IsNullOrEmpty(rule.LocalPorts) ? "*" : rule.LocalPorts,
                RemotePorts = string.IsNullOrEmpty(rule.RemotePorts) ? "*" : rule.RemotePorts,
                Protocol = (int)rule.Protocol,
                ProtocolName = GetProtocolName(rule.Protocol),
                ServiceName = (string.IsNullOrEmpty(rule.serviceName) || rule.serviceName == "*") ? string.Empty : rule.serviceName,
                LocalAddresses = string.IsNullOrEmpty(rule.LocalAddresses) ? "*" : rule.LocalAddresses,
                RemoteAddresses = string.IsNullOrEmpty(rule.RemoteAddresses) ? "*" : rule.RemoteAddresses,
                Profiles = GetProfileString(rule.Profiles),
                Grouping = rule.Grouping ?? string.Empty,
                InterfaceTypes = rule.InterfaceTypes ?? "All",
                IcmpTypesAndCodes = rule.IcmpTypesAndCodes ?? ""
            };
        }


        private static string GetProtocolName(int protocolValue)
        {
            return protocolValue switch
            {
                6 => "TCP",
                17 => "UDP",
                1 => "ICMPv4",
                58 => "ICMPv6",
                2 => "IGMP",
                256 => "Any",
                _ => protocolValue.ToString(),
            };
        }

        private static string GetProfileString(int profiles)
        {
            if (profiles == (int)NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_ALL) return "All";
            var profileNames = new List<string>(3);
            if ((profiles & (int)NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_DOMAIN) != 0) profileNames.Add("Domain");
            if ((profiles & (int)NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_PRIVATE) != 0) profileNames.Add("Private");
            if ((profiles & (int)NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_PUBLIC) != 0) profileNames.Add("Public");
            return string.Join(", ", profileNames);
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/FirewallEventListenerService.cs
--------------------------------------------------------------------------------
﻿using System.Diagnostics;
using System.Diagnostics.Eventing.Reader;
using System.IO;
using System.Xml;
using System.Collections.Concurrent;
namespace MinimalFirewall
{
    public partial class FirewallEventListenerService : IDisposable
    {
        private readonly FirewallDataService _dataService;
        private readonly WildcardRuleService _wildcardRuleService;
        private readonly Func<bool> _isLockdownEnabled;
        private readonly AppSettings _appSettings;
        private readonly PublisherWhitelistService _whitelistService;
        private readonly ConcurrentDictionary<string, DateTime> _snoozedApps = new(StringComparer.OrdinalIgnoreCase);
        private readonly ConcurrentDictionary<string, bool> _pendingNotifications = new(StringComparer.OrdinalIgnoreCase);
        private EventLogWatcher? _eventWatcher;
        private readonly Action<string> _logAction;

        public FirewallActionsService? ActionsService { get; set; }

        public event Action<PendingConnectionViewModel>? PendingConnectionDetected;
        public FirewallEventListenerService(FirewallDataService dataService, WildcardRuleService wildcardRuleService, Func<bool> isLockdownEnabled, Action<string> logAction, AppSettings appSettings, PublisherWhitelistService whitelistService)
        {
            _dataService = dataService;
            _wildcardRuleService = wildcardRuleService;
            _isLockdownEnabled = isLockdownEnabled;
            _logAction = logAction;
            _appSettings = appSettings;
            _whitelistService = whitelistService;
        }

        public void Start()
        {
            if (_eventWatcher != null)
            {
                if (!_eventWatcher.Enabled)
                {
                    _eventWatcher.Enabled = true;
                    _logAction("[EventListener] Event watcher re-enabled.");
                }
                return;
            }

            try
            {
                var query = new EventLogQuery("Security", PathType.LogName, "*[System[EventID=5157]]");
                _eventWatcher = new EventLogWatcher(query);
                _eventWatcher.EventRecordWritten += OnEventRecordWritten;
                _eventWatcher.Enabled = true;
                _logAction("[EventListener] Event watcher started successfully.");
            }
            catch (EventLogException ex)
            {
                _logAction($"[EventListener ERROR] You may not have permission to read the Security event log: {ex.Message}");
                MessageBox.Show("Could not start firewall event listener. Please run as Administrator.", "Permission Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public void Stop()
        {
            if (_eventWatcher != null)
            {
                _eventWatcher.Enabled = false;
                _eventWatcher.EventRecordWritten -= OnEventRecordWritten;
                _eventWatcher.Dispose();
                _eventWatcher = null;
                _logAction("[EventListener] Event watcher stopped and disposed.");
            }
        }

        private void OnEventRecordWritten(object? sender, EventRecordWrittenEventArgs e)
        {
            if (e.EventRecord == null)
            {
                return;
            }

            try
            {
                string xmlContent = e.EventRecord.ToXml();
                Task.Run(() => OnFirewallBlockEvent(xmlContent));
            }
            catch (EventLogException)
            {
            }
        }

        private void OnFirewallBlockEvent(string xmlContent)
        {
            string rawAppPathForClear = GetValueFromXml(xmlContent, "Application");
            string appPathForClear = PathResolver.NormalizePath(PathResolver.ConvertDevicePathToDrivePath(rawAppPathForClear));
            string directionForClear = ParseDirection(GetValueFromXml(xmlContent, "Direction"));
            try
            {
                string rawAppPath = GetValueFromXml(xmlContent, "Application");
                _logAction($"[EventListener] Block event received for raw path: '{rawAppPath}'");
                string appPath = PathResolver.ConvertDevicePathToDrivePath(rawAppPath);
                if (string.IsNullOrEmpty(appPath) || appPath.Equals("System", StringComparison.OrdinalIgnoreCase)) return;
                appPath = PathResolver.NormalizePath(appPath);
                string eventDirection = ParseDirection(GetValueFromXml(xmlContent, "Direction"));
                _logAction($"[EventListener] Normalized path: '{appPath}', Direction: '{eventDirection}'");

                string notificationKey = $"{appPath}|{eventDirection}";
                if (!_pendingNotifications.TryAdd(notificationKey, true)) return;

                if (!ShouldProcessEvent(appPath))
                {
                    ClearPendingNotification(appPath, eventDirection);
                    return;
                }

                string serviceName = string.Empty;
                if (Path.GetFileName(appPath).Equals("svchost.exe", StringComparison.OrdinalIgnoreCase))
                {
                    string processId = GetValueFromXml(xmlContent, "ProcessID");
                    if (!string.IsNullOrEmpty(processId) && processId != "0")
                    {
                        serviceName = SystemDiscoveryService.GetServicesByPID(processId);
                    }
                }

                if (_dataService.DoesAnyRuleExist(appPath, serviceName, eventDirection))
                {
                    _logAction($"[EventListener] A rule already exists for '{appPath}' (Service: '{serviceName}', Direction: '{eventDirection}'). Ignoring event.");
                    ClearPendingNotification(appPath, eventDirection);
                    return;
                }

                var matchingRule = _wildcardRuleService.Match(appPath);
                if (matchingRule != null)
                {
                    _logAction($"[EventListener] Wildcard rule matched for '{appPath}'. Action: '{matchingRule.Action}'.");
                    if (matchingRule.Action.StartsWith("Allow", StringComparison.OrdinalIgnoreCase) && ActionsService != null)
                    {
                        ActionsService.ApplyApplicationRuleChange(new List<string> { appPath }, matchingRule.Action, matchingRule.FolderPath);
                    }
                    ClearPendingNotification(appPath, eventDirection);
                    return;
                }

                if (_appSettings.AutoAllowSystemTrusted)
                {
                    if (SignatureValidationService.IsSignatureTrusted(appPath, out var trustedPublisherName) && trustedPublisherName != null)
                    {
                        _logAction($"[EventListener] Auto-allowing trusted application '{appPath}' by publisher '{trustedPublisherName}'.");
                        string allowAction = $"Allow ({eventDirection})";
                        ActionsService?.ApplyApplicationRuleChange(new List<string> { appPath }, allowAction);
                        ClearPendingNotification(appPath, eventDirection);
                        return;
                    }
                }

                var pendingVm = new PendingConnectionViewModel
                {
                    AppPath = appPath,
                    Direction = eventDirection,
                    ServiceName = serviceName
                };
                PendingConnectionDetected?.Invoke(pendingVm);
            }
            catch (Exception ex)
            {
                _logAction($"[FATAL ERROR IN EVENT HANDLER] {ex}");
                if (!string.IsNullOrEmpty(appPathForClear))
                {
                    ClearPendingNotification(appPathForClear, directionForClear);
                }
            }
        }

        public void ClearPendingNotification(string appPath, string direction)
        {
            if (string.IsNullOrEmpty(appPath) || string.IsNullOrEmpty(direction)) return;
            string key = $"{appPath}|{direction}";
            _pendingNotifications.TryRemove(key, out _);
        }

        public void SnoozeNotificationsForApp(string appPath, TimeSpan duration)
        {
            _snoozedApps[appPath] = DateTime.UtcNow.Add(duration);
        }

        public void ClearAllSnoozes()
        {
            _snoozedApps.Clear();
        }

        private bool ShouldProcessEvent(string appPath)
        {
            if (string.IsNullOrEmpty(appPath) || appPath.Equals("System", StringComparison.OrdinalIgnoreCase))
            {
                return false;
            }

            if (_snoozedApps.TryGetValue(appPath, out DateTime snoozeUntil) && DateTime.UtcNow < snoozeUntil)
            {
                _logAction($"[EventListener] Event for '{appPath}' is snoozed. Ignoring.");
                return false;
            }

            return _isLockdownEnabled();
        }

        private static string ParseDirection(string rawDirection)
        {
            return rawDirection switch
            {
                "%%14592" => "Incoming",
                "%%14593" => "Outgoing",
                _ => rawDirection,
            };
        }

        private static string GetValueFromXml(string xml, string elementName)
        {
            try
            {
                using var stringReader = new StringReader(xml);
                using var xmlReader = XmlReader.Create(stringReader);
                while (xmlReader.ReadToFollowing("Data"))
                {
                    if (xmlReader.GetAttribute("Name") == elementName)
                    {
                        return xmlReader.ReadElementContentAsString();
                    }
                }
            }
            catch (XmlException ex)
            {
                Debug.WriteLine($"[XML PARSE ERROR] Failed to parse event XML for element '{elementName}': {ex.Message}");
            }
            return string.Empty;
        }

        public void Dispose()
        {
            Stop();
            GC.SuppressFinalize(this);
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/FirewallGroups.cs
--------------------------------------------------------------------------------
﻿// File: FirewallGroups.cs
using NetFwTypeLib;
using System.ComponentModel;
using System.Linq;
using System.Runtime.InteropServices;
namespace MinimalFirewall.Groups
{
    public class FirewallGroup : INotifyPropertyChanged
    {
        private readonly INetFwPolicy2 _firewallPolicy;

        public string Name { get; }
        public int RuleCount { get; }

        public event PropertyChangedEventHandler? PropertyChanged;
        public FirewallGroup(string name, List<INetFwRule2> groupRules, INetFwPolicy2 firewallPolicy)
        {
            Name = name;
            _firewallPolicy = firewallPolicy;
            RuleCount = groupRules.Count;
            IsEnabled = groupRules.Count > 0 && groupRules.All(r => r.Enabled);
        }

        public bool IsEnabled { get; private set; }

        public void SetEnabledState(bool isEnabled)
        {
            if (IsEnabled != isEnabled)
            {
                IsEnabled = isEnabled;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(IsEnabled)));
            }
        }
    }

    public class FirewallGroupManager
    {
        private readonly INetFwPolicy2 _policy;
        public FirewallGroupManager(INetFwPolicy2 policy) => _policy = policy;

        public List<FirewallGroup> GetAllGroups()
        {
            var groupsData = new Dictionary<string, List<INetFwRule2>>(System.StringComparer.OrdinalIgnoreCase);
            INetFwRules? comRules = null;
            try
            {
                comRules = _policy.Rules;
                foreach (INetFwRule2 rule in comRules)
                {
                    if (rule?.Grouping is { Length: > 0 } && rule.Grouping.EndsWith(MFWConstants.MfwRuleSuffix))
                    {
                        if (!groupsData.TryGetValue(rule.Grouping, out var ruleList))
                        {
                            ruleList = new List<INetFwRule2>();
                            groupsData[rule.Grouping] = ruleList;
                        }
                        ruleList.Add(rule);
                    }
                    else
                    {
                        if (rule != null) Marshal.ReleaseComObject(rule);
                    }
                }
            }
            finally
            {
                if (comRules != null) Marshal.ReleaseComObject(comRules);
            }

            var list = new List<FirewallGroup>(groupsData.Count);
            foreach (var group in groupsData)
            {
                list.Add(new FirewallGroup(group.Key, group.Value, _policy));
            }

            foreach (var ruleList in groupsData.Values)
            {
                foreach (var rule in ruleList)
                {
                    Marshal.ReleaseComObject(rule);
                }
            }

            return list.OrderBy(g => g.Name).ToList();
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/FirewallRuleBuilderExtensions.cs
--------------------------------------------------------------------------------
﻿// FirewallRuleBuilderExtensions.cs
using MinimalFirewall.TypedObjects;
using NetFwTypeLib;

namespace MinimalFirewall
{
    public static class FirewallRuleBuilderExtensions
    {
        public static INetFwRule2 WithName(this INetFwRule2 rule, string name)
        {
            rule.Name = name;
            return rule;
        }

        public static INetFwRule2 WithDescription(this INetFwRule2 rule, string description)
        {
            rule.Description = description;
            return rule;
        }

        public static INetFwRule2 WithDirection(this INetFwRule2 rule, Directions direction)
        {
            rule.Direction = (NET_FW_RULE_DIRECTION_)direction;
            return rule;
        }

        public static INetFwRule2 WithAction(this INetFwRule2 rule, Actions action)
        {
            rule.Action = (NET_FW_ACTION_)action;
            return rule;
        }

        public static INetFwRule2 WithProtocol(this INetFwRule2 rule, int protocol)
        {
            rule.Protocol = protocol;
            return rule;
        }

        public static INetFwRule2 WithLocalPorts(this INetFwRule2 rule, string ports)
        {
            rule.LocalPorts = ports;
            return rule;
        }

        public static INetFwRule2 WithRemotePorts(this INetFwRule2 rule, string ports)
        {
            rule.RemotePorts = ports;
            return rule;
        }

        public static INetFwRule2 ForApplication(this INetFwRule2 rule, string applicationPath)
        {
            rule.ApplicationName = applicationPath;
            return rule;
        }

        public static INetFwRule2 ForService(this INetFwRule2 rule, string serviceName)
        {
            rule.serviceName = serviceName;
            return rule;
        }

        public static INetFwRule2 WithGrouping(this INetFwRule2 rule, string group)
        {
            rule.Grouping = group;
            return rule;
        }

        public static INetFwRule2 IsEnabled(this INetFwRule2 rule, bool enabled = true)
        {
            rule.Enabled = enabled;
            return rule;
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/FirewallRuleService.cs
--------------------------------------------------------------------------------
﻿// File: FirewallRuleService.cs
using NetFwTypeLib;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace MinimalFirewall
{
    public class FirewallRuleService
    {
        private readonly INetFwPolicy2 _firewallPolicy;
        public FirewallRuleService(INetFwPolicy2 firewallPolicy)
        {
            _firewallPolicy = firewallPolicy;
        }

        public List<INetFwRule2> GetAllRules()
        {
            if (_firewallPolicy?.Rules == null) return [];
            var rulesList = new List<INetFwRule2>();
            var comRules = _firewallPolicy.Rules;
            try
            {
                foreach (INetFwRule2 rule in comRules)
                {
                    rulesList.Add(rule);
                }
                return rulesList;
            }
            catch (COMException ex)
            {
                Debug.WriteLine($"Failed to retrieve all firewall rules: {ex.Message}");
                foreach (var rule in rulesList)
                {
                    Marshal.ReleaseComObject(rule);
                }
                return [];
            }
            finally
            {
                if (comRules != null) Marshal.ReleaseComObject(comRules);
            }
        }

        public INetFwRule2?
        GetRuleByName(string name)
        {
            if (_firewallPolicy == null) return null;
            try
            {
                return _firewallPolicy.Rules.Item(name) as INetFwRule2;
            }
            catch
            {
                return null;
            }
        }

        public void SetDefaultOutboundAction(NET_FW_ACTION_ action)
        {
            foreach (NET_FW_PROFILE_TYPE2_ profile in new[]
            {
                NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_DOMAIN,
                NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_PRIVATE,

               NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_PUBLIC
            })
            {
                try
                {
                    _firewallPolicy.set_DefaultOutboundAction(profile, action);
                }
                catch (COMException ex)
                {
                    System.Diagnostics.Debug.WriteLine($"Failed to set outbound action for {profile}: {ex.HResult:X8} {ex.Message}");
                }
            }
        }

        public List<string> GetRuleNamesByPathAndDirection(string appPath, NET_FW_RULE_DIRECTION_ direction)
        {
            var rules = GetRulesByPathAndDirection(appPath, direction);
            var names = rules.Select(r => r.Name).ToList();
            foreach (var rule in rules)
            {
                Marshal.ReleaseComObject(rule);
            }
            return names;
        }

        public List<INetFwRule2> GetRulesByPathAndDirection(string appPath, NET_FW_RULE_DIRECTION_ direction)
        {
            if (_firewallPolicy == null || string.IsNullOrEmpty(appPath)) return [];
            string normalizedAppPath = PathResolver.NormalizePath(appPath);
            var matchingRules = new List<INetFwRule2>();
            var allRules = GetAllRules();
            try
            {
                foreach (var rule in allRules)
                {
                    if (rule != null &&
                        !string.IsNullOrEmpty(rule.ApplicationName) &&

                         string.Equals(PathResolver.NormalizePath(rule.ApplicationName), normalizedAppPath, StringComparison.OrdinalIgnoreCase) &&
                        rule.Direction == direction)
                    {
                        matchingRules.Add(rule);
                    }
                    else
                    {
                        Marshal.ReleaseComObject(rule);
                    }
                }
            }
            finally
            {
                var allRulesSet = new HashSet<INetFwRule2>(allRules);
                foreach (var rule in matchingRules)
                {
                    allRulesSet.Remove(rule);
                }
                foreach (var rule in allRulesSet)
                {
                    if (rule != null) Marshal.ReleaseComObject(rule);
                }
            }
            return matchingRules;
        }

        public NET_FW_ACTION_ GetDefaultOutboundAction()
        {
            if (_firewallPolicy == null) return NET_FW_ACTION_.NET_FW_ACTION_ALLOW;
            try
            {
                var currentProfileTypes = (NET_FW_PROFILE_TYPE2_)_firewallPolicy.CurrentProfileTypes;
                if ((currentProfileTypes & NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_PUBLIC) != 0)
                {
                    return _firewallPolicy.DefaultOutboundAction[NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_PUBLIC];
                }
                if ((currentProfileTypes & NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_PRIVATE) != 0)
                {
                    return _firewallPolicy.DefaultOutboundAction[NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_PRIVATE];
                }
                if ((currentProfileTypes & NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_DOMAIN) != 0)
                {
                    return _firewallPolicy.DefaultOutboundAction[NET_FW_PROFILE_TYPE2_.NET_FW_PROFILE2_DOMAIN];
                }
            }
            catch (COMException ex)
            {
                Debug.WriteLine($"Error getting default outbound action: {ex.Message}");
            }

            return NET_FW_ACTION_.NET_FW_ACTION_ALLOW;
        }

        public List<string> DeleteRulesByPath(List<string> appPaths)
        {
            if (_firewallPolicy == null || appPaths.Count == 0) return [];
            var pathSet = new HashSet<string>(appPaths.Select(PathResolver.NormalizePath), StringComparer.OrdinalIgnoreCase);
            var rulesToRemove = new List<string>();
            var allRules = GetAllRules();
            try
            {
                foreach (var rule in allRules)
                {
                    if (rule != null && !string.IsNullOrEmpty(rule.ApplicationName) && pathSet.Contains(PathResolver.NormalizePath(rule.ApplicationName)))
                    {

                        rulesToRemove.Add(rule.Name);
                    }
                }
            }
            finally
            {
                foreach (var rule in allRules)
                {

                    Marshal.ReleaseComObject(rule);
                }
            }

            foreach (var ruleName in rulesToRemove)
            {
                try
                {
                    _firewallPolicy.Rules.Remove(ruleName);
                }
                catch (Exception ex) when (ex is COMException or FileNotFoundException)
                {
                    Debug.WriteLine($"[ERROR] Failed to remove rule '{ruleName}': {ex.Message}");
                }
            }
            return rulesToRemove;
        }

        public List<string> DeleteRulesByServiceName(string serviceName)
        {
            if (_firewallPolicy == null || string.IsNullOrEmpty(serviceName)) return [];
            var rulesToRemove = new List<string>();
            var allRules = GetAllRules();
            try
            {
                foreach (var rule in allRules)
                {
                    if (rule is INetFwRule2 rule2 && rule2 != null && string.Equals(rule2.serviceName, serviceName, StringComparison.OrdinalIgnoreCase))

                    {
                        rulesToRemove.Add(rule2.Name);
                    }
                }
            }
            finally
            {
                foreach (var rule in allRules)
                {

                    Marshal.ReleaseComObject(rule);
                }
            }

            foreach (var ruleName in rulesToRemove)
            {
                try
                {
                    _firewallPolicy.Rules.Remove(ruleName);
                }
                catch (Exception ex) when (ex is COMException or FileNotFoundException)
                {
                    Debug.WriteLine($"[ERROR] Failed to remove rule '{ruleName}': {ex.Message}");
                }
            }
            return rulesToRemove;
        }

        public List<string> DeleteUwpRules(List<string> packageFamilyNames)
        {
            if (_firewallPolicy == null || packageFamilyNames.Count == 0) return [];
            var pfnSet = new HashSet<string>(packageFamilyNames, StringComparer.OrdinalIgnoreCase);
            var rulesToRemove = new List<string>();
            var allRules = GetAllRules();
            try
            {
                foreach (var rule in allRules)
                {
                    if (rule != null && rule.Description?.StartsWith(MFWConstants.UwpDescriptionPrefix, StringComparison.Ordinal) == true)
                    {

                        string pfnInRule = rule.Description[MFWConstants.UwpDescriptionPrefix.Length..];
                        if (pfnSet.Contains(pfnInRule))
                        {
                            rulesToRemove.Add(rule.Name);
                        }
                    }
                }
            }
            finally
            {
                foreach (var rule in allRules)

                {
                    Marshal.ReleaseComObject(rule);
                }
            }

            foreach (var ruleName in rulesToRemove)
            {
                try
                {
                    _firewallPolicy.Rules.Remove(ruleName);
                }
                catch (Exception ex) when (ex is COMException or FileNotFoundException)
                {
                    Debug.WriteLine($"[ERROR] Failed to remove rule '{ruleName}': {ex.Message}");
                }
            }
            return rulesToRemove;
        }

        public void DeleteRulesByName(List<string> ruleNames)
        {
            if (_firewallPolicy == null || ruleNames.Count == 0) return;
            foreach (var name in ruleNames)
            {
                try
                {
                    _firewallPolicy.Rules.Remove(name);
                }
                catch (Exception ex) when (ex is COMException or FileNotFoundException)
                {
                    Debug.WriteLine($"[ERROR] Failed to remove rule '{name}': {ex.Message}");
                }
            }
        }

        public void CreateRule(INetFwRule2 rule)
        {
            try
            {
                _firewallPolicy?.Rules.Add(rule);
            }
            catch (COMException ex)
            {
                MessageBox.Show("Failed to create rule. The firewall API rejected the input.\n\nError: " + ex.Message, "Rule Creation Failed", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public List<string> DeleteRulesByDescription(string description)
        {
            if (_firewallPolicy == null || string.IsNullOrEmpty(description)) return [];
            var rulesToRemove = new List<string>();
            var allRules = GetAllRules();
            try
            {
                foreach (var rule in allRules)
                {
                    if (rule != null && string.Equals(rule.Description, description, StringComparison.OrdinalIgnoreCase))

                    {
                        rulesToRemove.Add(rule.Name);
                    }
                }
            }
            finally
            {
                foreach (var rule in allRules)
                {

                    Marshal.ReleaseComObject(rule);
                }
            }

            foreach (var ruleName in rulesToRemove)
            {
                try
                {
                    _firewallPolicy.Rules.Remove(ruleName);
                }
                catch (Exception ex) when (ex is COMException or FileNotFoundException)
                {
                    Debug.WriteLine($"[ERROR] Failed to remove rule '{ruleName}': {ex.Message}");
                }
            }
            return rulesToRemove;
        }

        public List<string> DeleteRulesByGroup(string groupName)
        {
            if (_firewallPolicy == null || string.IsNullOrEmpty(groupName)) return [];
            var rulesToRemove = new List<string>();
            var allRules = GetAllRules();
            try
            {
                foreach (var rule in allRules)
                {
                    if (rule != null && string.Equals(rule.Grouping, groupName, StringComparison.OrdinalIgnoreCase))

                    {
                        rulesToRemove.Add(rule.Name);
                    }
                }
            }
            finally
            {
                foreach (var rule in allRules)
                {

                    Marshal.ReleaseComObject(rule);
                }
            }

            foreach (var ruleName in rulesToRemove)
            {
                try
                {
                    _firewallPolicy.Rules.Remove(ruleName);
                }
                catch (Exception ex) when (ex is COMException or FileNotFoundException)
                {
                    Debug.WriteLine($"[ERROR] Failed to remove rule '{ruleName}': {ex.Message}");
                }
            }
            return rulesToRemove;
        }

        public void DeleteAllMfwRules()
        {
            if (_firewallPolicy == null) return;
            var rulesToRemove = new List<string>();
            var allRules = GetAllRules();
            try
            {
                foreach (var rule in allRules)
                {
                    if (rule != null && !string.IsNullOrEmpty(rule.Grouping) && rule.Grouping.Contains("MFW"))

                    {
                        rulesToRemove.Add(rule.Name);
                    }
                }
            }
            finally
            {
                foreach (var rule in allRules)
                {

                    Marshal.ReleaseComObject(rule);
                }
            }

            foreach (var ruleName in rulesToRemove)
            {
                try
                {

                    _firewallPolicy.Rules.Remove(ruleName);
                }
                catch (Exception ex) when (ex is COMException or FileNotFoundException)
                {
                    Debug.WriteLine($"[ERROR] Failed to remove rule '{ruleName}': {ex.Message}");
                }
            }
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/FirewallSentryService.cs
--------------------------------------------------------------------------------
﻿// File: FirewallSentryService.cs
using System.Management;
using System.Runtime.InteropServices;

namespace MinimalFirewall
{
    public partial class FirewallSentryService : IDisposable
    {
        private readonly FirewallRuleService firewallService;
        private ManagementEventWatcher? _watcher;
        private bool _isStarted = false;
        public event Action? RuleSetChanged;
        public FirewallSentryService(FirewallRuleService firewallService)
        {
            this.firewallService = firewallService;
        }

        public void Start()
        {
            if (_isStarted)
            {
                return;
            }

            try
            {
                var scope = new ManagementScope(@"root\StandardCimv2");
                var query = new WqlEventQuery(
                    "SELECT * FROM __InstanceOperationEvent WITHIN 1 " +
                    "WHERE TargetInstance ISA 'MSFT_NetFirewallRule'");
                _watcher = new ManagementEventWatcher(scope, query);
                _watcher.EventArrived += OnFirewallRuleChangeEvent;
                _watcher.Start();
                _isStarted = true;
            }
            catch (ManagementException ex)
            {
                System.Diagnostics.Debug.WriteLine($"[SENTRY ERROR] Failed to start WMI watcher: {ex.Message}");
            }
        }

        public void Stop()
        {
            if (!_isStarted)
            {
                return;
            }

            try
            {
                _watcher?.Stop();
                _watcher?.Dispose();
                _watcher = null;
                _isStarted = false;
            }
            catch (ManagementException ex)
            {
                System.Diagnostics.Debug.WriteLine($"[SENTRY ERROR] Failed to stop WMI watcher: {ex.Message}");
            }
        }

        private void OnFirewallRuleChangeEvent(object sender, EventArrivedEventArgs e)
        {
            RuleSetChanged?.Invoke();
        }

        public List<FirewallRuleChange> CheckForChanges(ForeignRuleTracker acknowledgedTracker, IProgress<int>? progress = null, CancellationToken token = default)
        {
            var changes = new List<FirewallRuleChange>();
            var allRules = firewallService.GetAllRules();
            try
            {
                int totalRules = allRules.Count;
                if (totalRules == 0)
                {
                    progress?.Report(100);
                    return changes;
                }
                int processedRules = 0;
                foreach (var rule in allRules)
                {
                    if (token.IsCancellationRequested) return new List<FirewallRuleChange>();
                    processedRules++;
                    progress?.Report((processedRules * 100) / totalRules);

                    if (rule == null || string.IsNullOrEmpty(rule.Name)) continue;
                    if (IsMfwRule(rule) || acknowledgedTracker.IsAcknowledged(rule.Name))
                    {
                        continue;
                    }

                    changes.Add(new FirewallRuleChange { Type = ChangeType.New, Rule = FirewallDataService.CreateAdvancedRuleViewModel(rule) });
                }
            }
            finally
            {
                foreach (var rule in allRules)
                {
                    if (rule != null) Marshal.ReleaseComObject(rule);
                }
            }
            return changes;
        }

        private static bool IsMfwRule(NetFwTypeLib.INetFwRule2 rule)
        {
            if (string.IsNullOrEmpty(rule.Grouping)) return false;
            return rule.Grouping.EndsWith(MFWConstants.MfwRuleSuffix) ||
                   rule.Grouping == MFWConstants.MainRuleGroup ||
                   rule.Grouping == MFWConstants.WildcardRuleGroup;
        }

        public void Dispose()
        {
            Stop();
            GC.SuppressFinalize(this);
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/FirewallTraffic.cs
--------------------------------------------------------------------------------
﻿// File: FirewallTraffic.cs
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Net;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Input;
using System.Linq;
using MinimalFirewall;
namespace Firewall.Traffic
{
    public static partial class TcpTrafficTracker
    {
        private const int AF_INET = 2;
        private const int AF_INET6 = 23;

        [LibraryImport("iphlpapi.dll", SetLastError = true)]
        private static partial uint GetExtendedTcpTable(IntPtr pTcpTable, ref int pdwSize, [MarshalAs(UnmanagedType.Bool)] bool bOrder, int ulAf, int TableClass, uint Reserved);
        public static List<TcpTrafficRow> GetConnections()
        {
            var connections = new List<TcpTrafficRow>();
            connections.AddRange(GetConnectionsForFamily(AF_INET));
            connections.AddRange(GetConnectionsForFamily(AF_INET6));
            return connections;
        }

        public static string GetStateString(uint state)
        {
            return state switch
            {
                1 => "Closed",
                2 => "Listen",
                3 => "Syn-Sent",
                4 => "Syn-Rcvd",
                5 => "Established",
                6 => "Fin-Wait-1",
                7 => "Fin-Wait-2",
                8 => "Close-Wait",
                9 => "Closing",
                10 => "Last-Ack",
                11 => "Time-Wait",
                12 => "Delete-Tcb",
                _ => "Unknown",
            };
        }

        private static List<TcpTrafficRow> GetConnectionsForFamily(int family)
        {
            IntPtr pTcpTable = IntPtr.Zero;
            int pdwSize = 0;
            _ = GetExtendedTcpTable(pTcpTable, ref pdwSize, true, family, 5, 0);
            pTcpTable = Marshal.AllocHGlobal(pdwSize);
            try
            {
                if (GetExtendedTcpTable(pTcpTable, ref pdwSize, true, family, 5, 0) == 0)
                {
                    int rowCount = Marshal.ReadInt32(pTcpTable);
                    var connections = new List<TcpTrafficRow>(rowCount);
                    IntPtr rowPtr = pTcpTable + 4;
                    for (int i = 0; i < rowCount; i++)
                    {
                        if (family == AF_INET)
                        {

                            var rowStructure = Marshal.PtrToStructure<MIB_TCPROW_OWNER_PID>(rowPtr);
                            connections.Add(new TcpTrafficRow(rowStructure));
                            rowPtr += Marshal.SizeOf(typeof(MIB_TCPROW_OWNER_PID));
                        }
                        else
                        {
                            var rowStructure = Marshal.PtrToStructure<MIB_TCP6ROW_OWNER_PID>(rowPtr);
                            connections.Add(new TcpTrafficRow(rowStructure));
                            rowPtr += Marshal.SizeOf(typeof(MIB_TCP6ROW_OWNER_PID));
                        }
                    }
                    return connections;
                }
            }
            finally
            {
                Marshal.FreeHGlobal(pTcpTable);
            }
            return [];
        }

        #region Native Structures
        public readonly struct TcpTrafficRow : IEquatable<TcpTrafficRow>
        {
            public readonly IPEndPoint LocalEndPoint;
            public readonly IPEndPoint RemoteEndPoint;
            public readonly int ProcessId;
            public readonly uint State;
            public TcpTrafficRow(MIB_TCPROW_OWNER_PID row)
            {
                LocalEndPoint = new IPEndPoint(row.localAddr, (ushort)IPAddress.NetworkToHostOrder((short)row.localPort));
                RemoteEndPoint = new IPEndPoint(row.remoteAddr, (ushort)IPAddress.NetworkToHostOrder((short)row.remotePort));
                ProcessId = row.owningPid;
                State = row.state;
            }
            public TcpTrafficRow(MIB_TCP6ROW_OWNER_PID row)
            {
                LocalEndPoint = new IPEndPoint(new IPAddress(row.localAddr, row.localScopeId), (ushort)IPAddress.NetworkToHostOrder((short)row.localPort));
                RemoteEndPoint = new IPEndPoint(new IPAddress(row.remoteAddr, row.remoteScopeId), (ushort)IPAddress.NetworkToHostOrder((short)row.remotePort));
                ProcessId = row.owningPid;
                State = row.state;
            }

            public bool Equals(TcpTrafficRow other)
            {
                return LocalEndPoint.Equals(other.LocalEndPoint) &&
                       RemoteEndPoint.Equals(other.RemoteEndPoint) &&
                       ProcessId == other.ProcessId &&
                       State == other.State;
            }

            public override bool Equals(object? obj)
            {
                return obj is TcpTrafficRow other && Equals(other);
            }

            public override int GetHashCode()
            {
                return HashCode.Combine(LocalEndPoint, RemoteEndPoint, ProcessId, State);
            }
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct MIB_TCPROW_OWNER_PID { public uint state; public uint localAddr; public uint localPort; public uint remoteAddr; public uint remotePort; public int owningPid; }

        [StructLayout(LayoutKind.Sequential)]
        public struct MIB_TCP6ROW_OWNER_PID
        {
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
            public byte[] localAddr;
            public uint localScopeId;
            public uint localPort;
            [MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
            public byte[] remoteAddr;
            public uint remoteScopeId;
            public uint remotePort;
            public uint state;
            public int owningPid;
        }
        #endregion
    }
}

namespace Firewall.Traffic.ViewModels
{
    public class TcpConnectionViewModel : INotifyPropertyChanged
    {
        public TcpTrafficTracker.TcpTrafficRow Connection { get; }
        public string ProcessName { get; private set; }
        public string ProcessPath { get; private set; }
        public string ServiceName { get; private set; }
        public string DisplayName => string.IsNullOrEmpty(ServiceName) ? ProcessName : $"{ProcessName} ({ServiceName})";
        public string LocalAddress => Connection.LocalEndPoint.Address.ToString();
        public int LocalPort => Connection.LocalEndPoint.Port;
        public string RemoteAddress => Connection.RemoteEndPoint.Address.ToString();
        public int RemotePort => Connection.RemoteEndPoint.Port;
        public string State => TcpTrafficTracker.GetStateString(Connection.State);
        public ICommand KillProcessCommand { get; }
        public ICommand BlockRemoteIpCommand { get; }

        public TcpConnectionViewModel(TcpTrafficTracker.TcpTrafficRow connection, (string Name, string Path, string ServiceName) processInfo)
        {
            Connection = connection;
            ProcessName = processInfo.Name;
            ProcessPath = processInfo.Path;
            ServiceName = processInfo.ServiceName;
            KillProcessCommand = new RelayCommand(KillProcess, CanKillProcess);
            BlockRemoteIpCommand = new RelayCommand(BlockIp, () => true);
        }

        private void KillProcess()
        {
            try
            {
                var process = Process.GetProcessById(Connection.ProcessId);
                process.Kill();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to kill process: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private bool CanKillProcess() => !ProcessName.Equals("System", StringComparison.OrdinalIgnoreCase);
        private void BlockIp()
        {
        }

        public event PropertyChangedEventHandler? PropertyChanged;

        private void OnPropertyChanged(string name) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }

    public class TrafficMonitorViewModel
    {
        private System.Threading.Timer? _timer;
        private bool _isRefreshing = false;
        private readonly SynchronizationContext? _syncContext;
        public ObservableCollection<TcpConnectionViewModel> ActiveConnections { get; } = [];
        public TrafficMonitorViewModel()
        {
            _syncContext = SynchronizationContext.Current;
        }

        public void StartMonitoring()
        {
            if (_timer != null) return;
            _timer = new System.Threading.Timer(RefreshConnections, null, 0, 5000);
        }

        public void StopMonitoring()
        {
            _timer?.Dispose();
            _timer = null;
            ActiveConnections.Clear();
        }

        private async void RefreshConnections(object? state)
        {
            if (_isRefreshing) return;
            _isRefreshing = true;

            try
            {
                var newVms = await Task.Run(() =>
                {
                    var connections = TcpTrafficTracker.GetConnections().Distinct().ToList();
                    var processInfoCache = new Dictionary<int, (string Name, string Path, string ServiceName)>();
                    var viewModels = new List<TcpConnectionViewModel>();

                    foreach (var conn in connections)
                    {
                        if (!processInfoCache.TryGetValue(conn.ProcessId, out var info))
                        {
                            try
                            {
                                using (var p = Process.GetProcessById(conn.ProcessId))
                                {
                                    string name = p.ProcessName;
                                    string path = string.Empty;
                                    string serviceName = string.Empty;
                                    try { if (p.MainModule != null) path = p.MainModule.FileName; }
                                    catch (Win32Exception) { path = "N/A (Access Denied)"; }

                                    if (name.Equals("svchost", StringComparison.OrdinalIgnoreCase))
                                    {
                                        serviceName = SystemDiscoveryService.GetServicesByPID(conn.ProcessId.ToString());
                                    }

                                    info = (name, path, serviceName);
                                }
                            }
                            catch (ArgumentException) { info = ("(Exited)", string.Empty, string.Empty); }
                            catch { info = ("System", string.Empty, string.Empty); }
                            processInfoCache[conn.ProcessId] = info;
                        }
                        viewModels.Add(new TcpConnectionViewModel(conn, info));
                    }
                    return viewModels;
                });

                _syncContext?.Post(_ =>
                {
                    if (ActiveConnections == null) return;

                    var newViewModelMap = newVms.ToDictionary(vm => vm.Connection);
                    var existingViewModelMap = ActiveConnections.ToDictionary(vm => vm.Connection);

                    var keysToRemove = existingViewModelMap.Keys.Except(newViewModelMap.Keys).ToList();
                    foreach (var key in keysToRemove)
                    {
                        ActiveConnections.Remove(existingViewModelMap[key]);
                    }

                    var keysToAdd = newViewModelMap.Keys.Except(existingViewModelMap.Keys).ToList();
                    foreach (var key in keysToAdd)
                    {
                        ActiveConnections.Add(newViewModelMap[key]);
                    }
                }, null);
            }
            finally
            {
                _isRefreshing = false;
            }
        }
    }

    public class RelayCommand(Action execute, Func<bool> canExecute) : ICommand
    {
        public event EventHandler? CanExecuteChanged;
        public bool CanExecute(object? p) => canExecute();
        public void Execute(object? p) => execute();
        public void RaiseCanExecuteChanged()
        {
            CanExecuteChanged?.Invoke(this, EventArgs.Empty);
        }
    }
}


--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/FlatComboBox.cs
--------------------------------------------------------------------------------
﻿// File: FlatComboBox.cs
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace DarkModeForms
{

    public class FlatComboBox : ComboBox
    {
        private Color borderColor = Color.Gray;
        [DefaultValue(typeof(Color), "Gray")]
        public Color BorderColor
        {
            get { return borderColor; }
            set
            {
                if (borderColor != value)
                {
                    borderColor = value;
                    Invalidate();
                }
            }
        }

        private Color buttonColor = Color.LightGray;
        [DefaultValue(typeof(Color), "LightGray")]
        public Color ButtonColor
        {
            get { return buttonColor; }
            set
            {
                if (buttonColor != value)
                {
                    buttonColor = value;
                    Invalidate();
                }
            }
        }

        private int Scale(int value, Graphics g) => (int)(value * (g.DpiX / 96f));
        protected override void WndProc(ref Message m)
        {
            if (m.Msg == WM_PAINT && DropDownStyle != ComboBoxStyle.Simple)
            {
                var clientRect = ClientRectangle;
                var dropDownButtonWidth = SystemInformation.HorizontalScrollBarArrowWidth;
                var outerBorder = new Rectangle(clientRect.Location,
                    new Size(clientRect.Width - 1, clientRect.Height - 1));
                var innerBorder = new Rectangle(outerBorder.X + 1, outerBorder.Y + 1,
                    outerBorder.Width - dropDownButtonWidth - 2, outerBorder.Height - 2);
                var innerInnerBorder = new Rectangle(innerBorder.X + 1, innerBorder.Y + 1,
                    innerBorder.Width - 2, innerBorder.Height - 2);
                var dropDownRect = new Rectangle(innerBorder.Right + 1, innerBorder.Y - 1,
                    dropDownButtonWidth, innerBorder.Height + 2);
                if (RightToLeft == RightToLeft.Yes)
                {
                    innerBorder.X = clientRect.Width - innerBorder.Right;
                    innerInnerBorder.X = clientRect.Width - innerInnerBorder.Right;
                    dropDownRect.X = clientRect.Width - dropDownRect.Right;
                    dropDownRect.Width += 1;
                }
                var innerBorderColor = Enabled ? BackColor : SystemColors.Control;
                var outerBorderColor = Enabled ? BorderColor : SystemColors.ControlDark;
                var buttonColor1 = Enabled ? ButtonColor : SystemColors.Control;
                var middle = new Point(dropDownRect.Left + dropDownRect.Width / 2,
                    dropDownRect.Top + dropDownRect.Height / 2);
                var arrow = new Point[]
                {
            new Point(middle.X - 3, middle.Y - 2),
            new Point(middle.X + 4, middle.Y - 2),
            new Point(middle.X, middle.Y + 2)
                };
                var ps = new PAINTSTRUCT();
                bool shoulEndPaint = false;
                IntPtr dc;
                if (m.WParam == IntPtr.Zero)
                {
                    dc = BeginPaint(Handle, ref ps);
                    m.WParam = dc;
                    shoulEndPaint = true;
                }
                else
                {
                    dc = m.WParam;
                }
                var rgn = CreateRectRgn(innerInnerBorder.Left, innerInnerBorder.Top,
                    innerInnerBorder.Right, innerInnerBorder.Bottom);
                SelectClipRgn(dc, rgn);
                DefWndProc(ref m);
                DeleteObject(rgn);
                rgn = CreateRectRgn(clientRect.Left, clientRect.Top,
                    clientRect.Right, clientRect.Bottom);
                SelectClipRgn(dc, rgn);

                using (var g = Graphics.FromHdc(dc))
                {
                    g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBilinear;
                    g.CompositingQuality = System.Drawing.Drawing2D.CompositingQuality.HighQuality;
                    g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;

                    #region DropDown Button

                    using (var b = new SolidBrush(buttonColor1))
                    {
                        g.FillRectangle(b, dropDownRect);
                    }

                    #endregion DropDown Button

                    #region Chevron

                    Size cSize = new Size(Scale(8, g), Scale(4, g));
                    var chevron = new Point[]
                    {
                        new Point(middle.X - (cSize.Width / 2), middle.Y - (cSize.Height / 2)),
                        new Point(middle.X + (cSize.Width / 2), middle.Y - (cSize.Height / 2)),
                        new Point(middle.X, middle.Y + (cSize.Height / 2))
                    };
                    using (var chevronPen = new Pen(BorderColor, 2.5f))
                    {
                        g.DrawLine(chevronPen, chevron[0], chevron[2]);
                        g.DrawLine(chevronPen, chevron[1], chevron[2]);
                    }

                    #endregion Chevron

                    #region Borders

                    using (var p = new Pen(innerBorderColor))
                    {
                        g.DrawRectangle(p, innerBorder);
                        g.DrawRectangle(p, innerInnerBorder);
                    }
                    using (var p = new Pen(outerBorderColor))
                    {
                        g.DrawRectangle(p, outerBorder);
                    }

                    #endregion Borders
                }
                if (shoulEndPaint)
                    EndPaint(Handle, ref ps);
                DeleteObject(rgn);
            }
            else
                base.WndProc(ref m);
        }

        private const int WM_PAINT = 0xF;
        [StructLayout(LayoutKind.Sequential)]
        public struct RECT
        {
            public int L, T, R, B;
        }

        [StructLayout(LayoutKind.Sequential)]
        public struct PAINTSTRUCT
        {
            public IntPtr hdc;
            public bool fErase;
            public int rcPaint_left;
            public int rcPaint_top;
            public int rcPaint_right;
            public int rcPaint_bottom;
            public bool fRestore;
            public bool fIncUpdate;
            public int reserved1;
            public int reserved2;
            public int reserved3;
            public int reserved4;
            public int reserved5;
            public int reserved6;
            public int reserved7;
            public int reserved8;
        }

        [DllImport("user32.dll")]
        private static extern IntPtr BeginPaint(IntPtr hWnd,
            [In, Out] ref PAINTSTRUCT lpPaint);
        [DllImport("user32.dll")]
        private static extern bool EndPaint(IntPtr hWnd, ref PAINTSTRUCT lpPaint);
        [DllImport("gdi32.dll")]
        public static extern int SelectClipRgn(IntPtr hDC, IntPtr hRgn);
        [DllImport("user32.dll")]
        public static extern int GetUpdateRgn(IntPtr hwnd, IntPtr hrgn, bool fErase);
        public enum RegionFlags
        {
            ERROR = 0,
            NULLREGION = 1,
            SIMPLEREGION = 2,
            COMPLEXREGION = 3,
        }

        [DllImport("gdi32.dll")]
        internal static extern bool DeleteObject(IntPtr hObject);
        [DllImport("gdi32.dll")]
        private static extern IntPtr CreateRectRgn(int x1, int y1, int x2, int y2);
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/FlatProgressBar.cs
--------------------------------------------------------------------------------
﻿// File: FlatProgressBar.cs
using System;
using System.Drawing;
using System.Windows.Forms;
using Timer = System.Windows.Forms.Timer;

namespace DarkModeForms
{
    public class FlatProgressBar : ProgressBar
    {
        private Timer marqueeTimer;
        private int marqueePosition = 0;
        private ProgressBarStyle style = ProgressBarStyle.Blocks;
        public new ProgressBarStyle Style
        {
            get { return style; }
            set
            {
                style = value;
                if (style == ProgressBarStyle.Marquee)
                {
                    marqueeTimer.Start();
                }
                else
                {
                    marqueeTimer.Stop();
                }
                this.Invalidate();
            }
        }

        public FlatProgressBar()
        {
            this.SetStyle(ControlStyles.UserPaint, true);
            this.SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
            marqueeTimer = new Timer();
            marqueeTimer.Interval = 30;
            marqueeTimer.Tick += MarqueeTimer_Tick;
        }

        private void MarqueeTimer_Tick(object? sender, EventArgs e)
        {
            marqueePosition += 5;
            if (marqueePosition > this.Width)
            {
                marqueePosition = -100;
            }
            this.Invalidate();
        }

        protected override void OnPaintBackground(PaintEventArgs pevent)
        {
        }

        int min = 0;
        int max = 100;
        int val = 0;
        Color BarColor = Color.Green;
        protected override void OnResize(EventArgs e)
        {
            this.Invalidate();
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            Graphics g = e.Graphics;
            using (SolidBrush brush = new SolidBrush(BarColor))
            using (Brush BackBrush = new SolidBrush(this.BackColor))
            {
                g.FillRectangle(BackBrush, this.ClientRectangle);
                if (Style == ProgressBarStyle.Marquee)
                {
                    int marqueeWidth = this.Width / 4;
                    Rectangle marqueeRect = new Rectangle(marqueePosition, 0, marqueeWidth, this.Height);
                    g.FillRectangle(brush, marqueeRect);
                }
                else
                {
                    float percent = (float)(val - min) / (float)(max - min);
                    Rectangle rect = this.ClientRectangle;
                    rect.Width = (int)((float)rect.Width * percent);
                    g.FillRectangle(brush, rect);
                }

                Draw3DBorder(g);
            }
        }

        public new int Minimum
        {
            get
            {
                return min;
            }

            set
            {
                if (value < 0)
                {
                    value = 0;
                }

                if (value > max)
                {
                    max = value;
                }

                min = value;
                if (val < min)
                {
                    val = min;
                }

                this.Invalidate();
            }
        }

        public new int Maximum
        {
            get
            {
                return max;
            }

            set
            {
                if (value < min)
                {
                    min = value;
                }

                max = value;
                if (val > max)
                {
                    val = max;
                }

                this.Invalidate();
            }
        }

        public new int Value
        {
            get
            {
                return val;
            }

            set
            {
                int oldValue = val;
                if (value < min)
                {
                    val = min;
                }
                else if (value > max)
                {
                    val = max;
                }
                else
                {
                    val = value;
                }

                float percent;
                Rectangle newValueRect = this.ClientRectangle;
                Rectangle oldValueRect = this.ClientRectangle;

                percent = (float)(val - min) / (float)(max - min);
                newValueRect.Width = (int)((float)newValueRect.Width * percent);

                percent = (float)(oldValue - min) / (float)(max - min);
                oldValueRect.Width = (int)((float)oldValueRect.Width * percent);
                Rectangle updateRect = new Rectangle();

                if (newValueRect.Width > oldValueRect.Width)
                {
                    updateRect.X = oldValueRect.Size.Width;
                    updateRect.Width = newValueRect.Width - oldValueRect.Width;
                }
                else
                {
                    updateRect.X = newValueRect.Size.Width;
                    updateRect.Width = oldValueRect.Width - newValueRect.Width;
                }

                updateRect.Height = this.Height;
                this.Invalidate(updateRect);
            }
        }

        public Color ProgressBarColor
        {
            get
            {
                return BarColor;
            }

            set
            {
                BarColor = value;
                this.Invalidate();
            }
        }

        private void Draw3DBorder(Graphics g)
        {
            int PenWidth = (int)Pens.White.Width;
            g.DrawLine(Pens.DarkGray,
                new Point(this.ClientRectangle.Left, this.ClientRectangle.Top),
                new Point(this.ClientRectangle.Width - PenWidth, this.ClientRectangle.Top));
            g.DrawLine(Pens.DarkGray,
                new Point(this.ClientRectangle.Left, this.ClientRectangle.Top),
                new Point(this.ClientRectangle.Left, this.ClientRectangle.Height - PenWidth));
            g.DrawLine(Pens.DarkGray,
                new Point(this.ClientRectangle.Left, this.ClientRectangle.Height - PenWidth),
                new Point(this.ClientRectangle.Width - PenWidth, this.ClientRectangle.Height - PenWidth));
            g.DrawLine(Pens.DarkGray,
                new Point(this.ClientRectangle.Width - PenWidth, this.ClientRectangle.Top),
                new Point(this.ClientRectangle.Width - PenWidth, this.ClientRectangle.Height - PenWidth));
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                marqueeTimer?.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/FlatTabControl.cs
--------------------------------------------------------------------------------
﻿// File: FlatTabControl.cs
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Drawing.Drawing2D;

namespace DarkModeForms
{
    public class FlatTabControl : TabControl
    {
        [Description("Color for a decorative line"), Category("Appearance")]
        public Color LineColor { get; set; } = SystemColors.Highlight;

        [Description("Color for all Borders"), Category("Appearance")]
        public Color BorderColor { get; set; } = SystemColors.ControlDark;

        [Description("Back color for selected Tab"), Category("Appearance")]
        public Color SelectTabColor { get; set; } = SystemColors.ControlLight;

        [Description("Fore Color for Selected Tab"), Category("Appearance")]
        public Color SelectedForeColor { get; set; } = SystemColors.HighlightText;

        [Description("Back Color for un-selected tabs"), Category("Appearance")]
        public Color TabColor { get; set; } = SystemColors.ControlLight;

        [Description("Background color for the whole control"), Category("Appearance"), Browsable(true)]
        public override Color BackColor { get; set; } = SystemColors.Control;

        [Description("Fore Color for all Texts"), Category("Appearance")]
        public override Color ForeColor { get; set; } = SystemColors.ControlText;

        public FlatTabControl()
        {
            try
            {
                this.DrawMode = TabDrawMode.OwnerDrawFixed;
            }
            catch { }
        }

        private int Scale(int value, Graphics g) => (int)(value * (g.DpiX / 96f));
        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);
            DrawControl(e.Graphics);
        }

        internal void DrawControl(Graphics g)
        {
            try
            {
                if (!Visible)
                {
                    return;
                }

                using (Brush bBackColor = new SolidBrush(this.BackColor))
                {
                    g.FillRectangle(bBackColor, this.ClientRectangle);
                }

                for (int i = 0; i < this.TabCount; i++)
                {
                    DrawTab(g, this.TabPages[i], i);
                }
            }
            catch { }
        }

        internal void DrawTab(Graphics g, TabPage customTabPage, int nIndex)
        {
            Rectangle tabRect = this.GetTabRect(nIndex);
            bool isSelected = (this.SelectedIndex == nIndex);

            g.SmoothingMode = SmoothingMode.AntiAlias;

            if (this.Alignment == TabAlignment.Left)
            {
                Color tabBackColor = isSelected ? SelectTabColor : this.TabColor;

                using (Brush b = new SolidBrush(tabBackColor))
                {
                    g.FillRectangle(b, tabRect);
                }
                using (Pen p = new Pen(this.BorderColor))
                {
                    g.DrawRectangle(p, tabRect.X, tabRect.Y, tabRect.Width, tabRect.Height - Scale(1, g));
                }

                if (this.ImageList != null && customTabPage.ImageIndex >= 0 && customTabPage.ImageIndex < this.ImageList.Images.Count)
                {
                    Image? icon = this.ImageList.Images[customTabPage.ImageIndex];
                    if (icon != null)
                    {
                        int iconHeight = this.ImageList.ImageSize.Height;
                        int iconWidth = this.ImageList.ImageSize.Width;
                        int iconX = tabRect.X + (tabRect.Width - iconWidth) / 2;
                        int iconY = tabRect.Y + (tabRect.Height - iconHeight) / 2;
                        g.DrawImage(icon, new Rectangle(iconX, iconY, iconWidth, iconHeight));
                    }
                }

                if (isSelected)
                {
                    using (Pen p = new Pen(this.LineColor, Scale(2, g)))
                    {
                        g.DrawLine(p, tabRect.Right - Scale(1, g), tabRect.Top, tabRect.Right - Scale(1, g), tabRect.Bottom - Scale(1, g));
                    }
                }
            }
            else
            {
                int scaled3 = Scale(3, g);
                Point[] points;
                points = new[]
                {
                    new Point(tabRect.Left, tabRect.Bottom),
                    new Point(tabRect.Left, tabRect.Top + scaled3),
                    new Point(tabRect.Left + scaled3, tabRect.Top),
                    new Point(tabRect.Right - scaled3, tabRect.Top),
                    new Point(tabRect.Right, tabRect.Top + scaled3),
                    new Point(tabRect.Right, tabRect.Bottom),
                    new Point(tabRect.Left, tabRect.Bottom)
                };
                using (Brush brush = new SolidBrush(isSelected ? SelectTabColor : this.TabColor))
                {
                    g.FillPolygon(brush, points);
                    using (Pen borderPen = new Pen(this.BorderColor))
                    {
                        g.DrawPolygon(borderPen, points);
                    }
                }

                if (isSelected)
                {
                    g.DrawLine(new Pen(SelectTabColor, Scale(2, g)), new Point(tabRect.Left, tabRect.Bottom), new Point(tabRect.Right, tabRect.Bottom));
                }

                TextRenderer.DrawText(g, customTabPage.Text, Font, tabRect, isSelected ? SelectedForeColor : ForeColor, TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter);
            }
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/ForeignRuleTracker.cs
--------------------------------------------------------------------------------
﻿// ForeignRuleTracker.cs
using System.IO;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Diagnostics;

namespace MinimalFirewall
{
    public class ForeignRuleTracker
    {
        private readonly string _baselinePath;
        private HashSet<string> _acknowledgedRuleNames = new(StringComparer.OrdinalIgnoreCase);

        public ForeignRuleTracker()
        {
            string baseDirectory = AppContext.BaseDirectory;
            _baselinePath = Path.Combine(baseDirectory, "foreign_rules_baseline.json");
            LoadAcknowledgedRules();
        }

        private void LoadAcknowledgedRules()
        {
            try
            {
                if (File.Exists(_baselinePath))
                {
                    string json = File.ReadAllText(_baselinePath);
                    _acknowledgedRuleNames = JsonSerializer.Deserialize(json, ForeignRuleTrackerJsonContext.Default.HashSetString) ?? new HashSet<string>(StringComparer.OrdinalIgnoreCase);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ERROR] Failed to load foreign rule baseline: {ex.Message}");
                _acknowledgedRuleNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            }
        }

        private void Save()
        {
            try
            {
                string json = JsonSerializer.Serialize(_acknowledgedRuleNames, ForeignRuleTrackerJsonContext.Default.HashSetString);
                File.WriteAllText(_baselinePath, json);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ERROR] Failed to save foreign rule baseline: {ex.Message}");
            }
        }

        public void Clear()
        {
            _acknowledgedRuleNames.Clear();
            Save();
        }

        public bool IsAcknowledged(string ruleName)
        {
            return _acknowledgedRuleNames.Contains(ruleName);
        }

        public void AcknowledgeRules(IEnumerable<string> ruleNames)
        {
            foreach (var name in ruleNames)
            {
                _acknowledgedRuleNames.Add(name);
            }
            Save();
        }
    }

    [JsonSourceGenerationOptions(WriteIndented = true)]
    [JsonSerializable(typeof(HashSet<string>))]
    internal partial class ForeignRuleTrackerJsonContext : JsonSerializerContext { }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/GroupsControl.cs
--------------------------------------------------------------------------------
﻿// File: GroupsControl.cs
using DarkModeForms;
using MinimalFirewall.Groups;
using System.Windows.Forms;
using System.Threading.Tasks;
using System.Linq;
using System.ComponentModel;
using System.Collections.Generic;
using System;
using System.Drawing;

namespace MinimalFirewall
{
    public partial class GroupsControl : UserControl
    {
        private FirewallGroupManager?
        _groupManager;
        private BackgroundFirewallTaskService? _backgroundTaskService;
        private DarkModeCS? _dm;
        private BindingSource _bindingSource;
        public GroupsControl()
        {
            InitializeComponent();
            this.DoubleBuffered = true;
        }

        public void Initialize(FirewallGroupManager groupManager, BackgroundFirewallTaskService backgroundTaskService, DarkModeCS dm)
        {
            _groupManager = groupManager;
            _backgroundTaskService = backgroundTaskService;
            _dm = dm;

            groupsDataGridView.AutoGenerateColumns = false;
            _bindingSource = new BindingSource();
            groupsDataGridView.DataSource = _bindingSource;
        }

        public void ClearGroups()
        {
            _bindingSource.DataSource = null;
        }

        public async Task OnTabSelectedAsync()
        {
            await DisplayGroupsAsync();
        }

        private async Task DisplayGroupsAsync()
        {
            if (groupsDataGridView is null || _groupManager is null) return;
            var groups = await Task.Run(() => _groupManager.GetAllGroups());
            _bindingSource.DataSource = new SortableBindingList<FirewallGroup>(groups);
            groupsDataGridView.Refresh();
        }

        private void deleteGroupToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (groupsDataGridView.SelectedRows.Count > 0 && _backgroundTaskService != null)
            {
                var result = MessageBox.Show("Are you sure you want to delete the \nselected group(s) and all associated rules?", "Confirm Deletion", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (result == DialogResult.Yes)
                {
                    var rowsToDelete = new List<DataGridViewRow>();
                    foreach (DataGridViewRow row in groupsDataGridView.SelectedRows)
                    {
                        if (row.DataBoundItem is FirewallGroup group)

                        {
                            _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.DeleteGroup, group.Name));
                            rowsToDelete.Add(row);
                        }
                    }

                    foreach (var row in rowsToDelete)
                    {
                        groupsDataGridView.Rows.Remove(row);
                    }
                }
            }
        }

        private void groupsDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex == groupsDataGridView.Columns["groupEnabledColumn"].Index)
            {
                if (groupsDataGridView.Rows[e.RowIndex].DataBoundItem is FirewallGroup group && _backgroundTaskService != null)

                {
                    bool newState = !group.IsEnabled;
                    group.SetEnabledState(newState);

                    var payload = new SetGroupEnabledStatePayload { GroupName = group.Name, IsEnabled = newState };
                    _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.SetGroupEnabledState, payload));

                    groupsDataGridView.InvalidateCell(e.ColumnIndex, e.RowIndex);
                }
            }
        }

        private void groupsDataGridView_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex == groupsDataGridView.Columns["groupEnabledColumn"].Index)
            {
                e.PaintBackground(e.CellBounds, true);
                if (groupsDataGridView.Rows[e.RowIndex].DataBoundItem is FirewallGroup group)
                {
                    DrawToggleSwitch(e.Graphics, e.CellBounds, group.IsEnabled);
                }

                e.Handled = true;
            }
        }

        private void DrawToggleSwitch(Graphics g, Rectangle bounds, bool isChecked)
        {
            if (_dm == null) return;
            int switchWidth = (int)(50 * (g.DpiY / 96f));
            int switchHeight = (int)(25 * (g.DpiY / 96f));
            int thumbSize = (int)(21 * (g.DpiY / 96f));
            int padding = (int)(10 * (g.DpiY / 96f));
            Rectangle switchRect = new Rectangle(
                bounds.X + (bounds.Width - switchWidth) / 2, // Centered
                bounds.Y + (bounds.Height - switchHeight) / 2,
                switchWidth,
                switchHeight);
            g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;

            Color backColor = isChecked ? Color.FromArgb(0, 192, 0) : Color.FromArgb(200, 0, 0);
            using (var path = new System.Drawing.Drawing2D.GraphicsPath())
            {
                path.AddArc(switchRect.X, switchRect.Y, switchRect.Height, switchRect.Height, 90, 180);
                path.AddArc(switchRect.Right - switchRect.Height, switchRect.Y, switchRect.Height, switchRect.Height, 270, 180);
                path.CloseFigure();
                g.FillPath(new SolidBrush(backColor), path);
            }

            int thumbX = isChecked ?
            switchRect.Right - thumbSize - (int)(2 * (g.DpiY / 96f)) : switchRect.X + (int)(2 * (g.DpiY / 96f));
            Rectangle thumbRect = new Rectangle(
                thumbX,
                switchRect.Y + (switchRect.Height - thumbSize) / 2,
                thumbSize,
                thumbSize);
            using (var thumbBrush = new SolidBrush(_dm.OScolors.TextActive))
            {
                g.FillEllipse(thumbBrush, thumbRect);
            }
        }

        private void groupsDataGridView_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            var column = groupsDataGridView.Columns[e.ColumnIndex];
            string propertyName = column.DataPropertyName;

            if (string.IsNullOrEmpty(propertyName)) return;

            var sortDirection = ListSortDirection.Ascending;
            if (groupsDataGridView.SortedColumn?.Name == column.Name && groupsDataGridView.SortOrder == SortOrder.Ascending)
            {
                sortDirection = ListSortDirection.Descending;
            }

            if (_bindingSource.DataSource is SortableBindingList<FirewallGroup> list)
            {
                list.Sort(propertyName, sortDirection);
            }

            groupsDataGridView.Sort(column, sortDirection);
        }

        private void groupsDataGridView_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right && e.RowIndex >= 0)
            {
                var grid = (DataGridView)sender;
                var clickedRow = grid.Rows[e.RowIndex];

                if (!clickedRow.Selected)
                {
                    grid.ClearSelection();
                    clickedRow.Selected = true;
                }
            }
        }

        public class SortableBindingList<T> : BindingList<T>
        {
            private PropertyDescriptor?
            _sortProperty;
            private ListSortDirection _sortDirection;

            public SortableBindingList(IList<T> list) : base(list) { }

            protected override bool SupportsSortingCore => true;
            protected override bool IsSortedCore => _sortProperty != null;
            protected override PropertyDescriptor? SortPropertyCore => _sortProperty;
            protected override ListSortDirection SortDirectionCore => _sortDirection;
            protected override void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction)
            {
                _sortProperty = prop;
                _sortDirection = direction;

                if (Items is List<T> items)
                {
                    items.Sort((a, b) =>
                    {
                        var valueA = prop.GetValue(a);

                        var valueB = prop.GetValue(b);

                        int result = (valueA as IComparable)?.CompareTo(valueB) ?? 0;
                        return direction == ListSortDirection.Ascending ? result : -result;

                    });

                    ResetBindings();
                }
            }

            public void Sort(string propertyName, ListSortDirection direction)
            {
                var prop = TypeDescriptor.GetProperties(typeof(T)).Find(propertyName, true);
                if (prop != null)
                {
                    ApplySortCore(prop, direction);
                }
            }
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/GroupsControl.Designer.cs
--------------------------------------------------------------------------------
﻿// File: GroupsControl.Designer.cs
namespace MinimalFirewall
{
    partial class GroupsControl
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.ContextMenuStrip groupsContextMenu;
        private System.Windows.Forms.ToolStripMenuItem deleteGroupToolStripMenuItem;
        private System.Windows.Forms.DataGridView groupsDataGridView;
        private System.Windows.Forms.DataGridViewTextBoxColumn groupNameColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn groupEnabledColumn;
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle1 = new System.Windows.Forms.DataGridViewCellStyle();
            this.groupsContextMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.deleteGroupToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.groupsDataGridView = new System.Windows.Forms.DataGridView();
            this.groupNameColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.groupEnabledColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.groupsContextMenu.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.groupsDataGridView)).BeginInit();
            this.SuspendLayout();
            // 
            // groupsContextMenu
            // 
            this.groupsContextMenu.ImageScalingSize = new System.Drawing.Size(20, 20);
            this.groupsContextMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.deleteGroupToolStripMenuItem});
            this.groupsContextMenu.Name = "groupsContextMenu";
            this.groupsContextMenu.Size = new System.Drawing.Size(177, 28);
            // 
            // deleteGroupToolStripMenuItem
            // 
            this.deleteGroupToolStripMenuItem.Name = "deleteGroupToolStripMenuItem";
            this.deleteGroupToolStripMenuItem.Size = new System.Drawing.Size(176, 24);
            this.deleteGroupToolStripMenuItem.Text = "Delete Group...";
            this.deleteGroupToolStripMenuItem.Click += new System.EventHandler(this.deleteGroupToolStripMenuItem_Click);
            // 
            // groupsDataGridView
            // 
            this.groupsDataGridView.AllowUserToAddRows = false;
            this.groupsDataGridView.AllowUserToDeleteRows = false;
            this.groupsDataGridView.AllowUserToResizeRows = false;
            this.groupsDataGridView.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            this.groupsDataGridView.BackgroundColor = System.Drawing.SystemColors.Control;
            this.groupsDataGridView.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.groupsDataGridView.CellBorderStyle = System.Windows.Forms.DataGridViewCellBorderStyle.None;
            this.groupsDataGridView.ColumnHeadersBorderStyle = System.Windows.Forms.DataGridViewHeaderBorderStyle.None;
            dataGridViewCellStyle1.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle1.BackColor = System.Drawing.SystemColors.Control;
            dataGridViewCellStyle1.Font = new System.Drawing.Font("Segoe UI", 12F);
            dataGridViewCellStyle1.ForeColor = System.Drawing.SystemColors.WindowText;
            dataGridViewCellStyle1.SelectionBackColor = System.Drawing.SystemColors.Highlight;
            dataGridViewCellStyle1.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
            dataGridViewCellStyle1.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
            this.groupsDataGridView.ColumnHeadersDefaultCellStyle = dataGridViewCellStyle1;
            this.groupsDataGridView.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.groupsDataGridView.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
            this.groupNameColumn,
            this.groupEnabledColumn});
            this.groupsDataGridView.ContextMenuStrip = this.groupsContextMenu;
            this.groupsDataGridView.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupsDataGridView.EnableHeadersVisualStyles = false;
            this.groupsDataGridView.GridColor = System.Drawing.SystemColors.Control;
            this.groupsDataGridView.Location = new System.Drawing.Point(0, 0);
            this.groupsDataGridView.Name = "groupsDataGridView";
            this.groupsDataGridView.ReadOnly = true;
            this.groupsDataGridView.RowHeadersVisible = false;
            this.groupsDataGridView.RowTemplate.Height = 35;
            this.groupsDataGridView.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.groupsDataGridView.ShowCellToolTips = true;
            this.groupsDataGridView.Size = new System.Drawing.Size(800, 600);
            this.groupsDataGridView.TabIndex = 1;
            this.groupsDataGridView.CellContentClick += new System.Windows.Forms.DataGridViewCellEventHandler(this.groupsDataGridView_CellContentClick);
            this.groupsDataGridView.CellMouseDown += new System.Windows.Forms.DataGridViewCellMouseEventHandler(this.groupsDataGridView_CellMouseDown);
            this.groupsDataGridView.CellPainting += new System.Windows.Forms.DataGridViewCellPaintingEventHandler(this.groupsDataGridView_CellPainting);
            this.groupsDataGridView.ColumnHeaderMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(this.groupsDataGridView_ColumnHeaderMouseClick);
            // 
            // groupNameColumn
            // 
            this.groupNameColumn.DataPropertyName = "Name";
            this.groupNameColumn.FillWeight = 80F;
            this.groupNameColumn.HeaderText = "Group Name";
            this.groupNameColumn.Name = "groupNameColumn";
            this.groupNameColumn.ReadOnly = true;
            // 
            // groupEnabledColumn
            // 
            this.groupEnabledColumn.DataPropertyName = "IsEnabled";
            this.groupEnabledColumn.FillWeight = 20F;
            this.groupEnabledColumn.HeaderText = "Enabled";
            this.groupEnabledColumn.Name = "groupEnabledColumn";
            this.groupEnabledColumn.ReadOnly = true;
            // 
            // GroupsControl
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 20F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.Controls.Add(this.groupsDataGridView);
            this.Name = "GroupsControl";
            this.Size = new System.Drawing.Size(800, 600);
            this.groupsContextMenu.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.groupsDataGridView)).EndInit();
            this.ResumeLayout(false);
        }
        #endregion
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/IconService.cs
--------------------------------------------------------------------------------
﻿// File: IconService.cs
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace MinimalFirewall
{
    public class IconService : Component
    {
        private ImageList? _imageList;
        private readonly Dictionary<string, int> _iconCache = new(StringComparer.OrdinalIgnoreCase);
        private int _defaultIconIndex = -1;
        private int _systemIconIndex = -1;

        #region Native Methods
        [DllImport("shell32.dll", CharSet = CharSet.Auto)]
        private static extern IntPtr SHGetFileInfo(string pszPath, uint dwFileAttributes, ref SHFILEINFO psfi, uint cbFileInfo, uint uFlags);

        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool DestroyIcon(IntPtr hIcon);

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
        private struct SHFILEINFO
        {
            public IntPtr hIcon;
            public int iIcon;
            public uint dwAttributes;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
            public string szDisplayName;
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 80)]
            public string szTypeName;
        }

        private const uint SHGFI_ICON = 0x000000100;
        private const uint SHGFI_LARGEICON = 0x000000000;
        #endregion

        public ImageList? ImageList
        {
            get => _imageList;
            set
            {
                _imageList = value;
                if (_imageList != null)
                {
                    AddDefaultIcon();
                    AddSystemIcon();
                }
            }
        }

        public IconService() { }

        public IconService(IContainer container)
        {
            container.Add(this);
        }

        private void AddDefaultIcon()
        {
            if (_imageList == null || _imageList.Images.ContainsKey("default")) return;
            try
            {
                var bmp = new Bitmap(32, 32);
                using (var g = Graphics.FromImage(bmp))
                {
                    g.Clear(Color.Transparent);
                }
                _imageList.Images.Add("default", (Bitmap)bmp.Clone());
                bmp.Dispose();
                _defaultIconIndex = _imageList.Images.IndexOfKey("default");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[IconService] Failed to create default icon: {ex.Message}");
            }
        }

        private void AddSystemIcon()
        {
            if (_imageList == null || _imageList.Images.ContainsKey("system_icon")) return;
            try
            {
                if (_imageList.Images.ContainsKey("advanced.png"))
                {
                    Image systemImage = _imageList.Images["advanced.png"];
                    _imageList.Images.Add("system_icon", systemImage);
                    _systemIconIndex = _imageList.Images.IndexOfKey("system_icon");
                }
                else
                {
                    _systemIconIndex = _defaultIconIndex;
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[IconService] Failed to create system icon: {ex.Message}");
                _systemIconIndex = _defaultIconIndex;
            }
        }

        public int GetIconIndex(string? filePath)
        {
            if (string.IsNullOrEmpty(filePath) || _imageList == null)
            {
                return _systemIconIndex;
            }

            if (_iconCache.TryGetValue(filePath, out int cachedIndex))
            {
                return cachedIndex;
            }

            if (!File.Exists(filePath))
            {
                return _systemIconIndex;
            }

            IntPtr hIcon = IntPtr.Zero;
            try
            {
                var shinfo = new SHFILEINFO();
                const uint flags = SHGFI_ICON | SHGFI_LARGEICON;
                SHGetFileInfo(filePath, 0, ref shinfo, (uint)Marshal.SizeOf(shinfo), flags);
                hIcon = shinfo.hIcon;

                if (hIcon != IntPtr.Zero)
                {
                    Icon icon = (Icon)Icon.FromHandle(hIcon).Clone();
                    _imageList.Images.Add(filePath, icon);

                    int newIndex = _imageList.Images.IndexOfKey(filePath);
                    _iconCache[filePath] = newIndex;
                    return newIndex;
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[IconService] SHGetFileInfo failed for {filePath}: {ex.Message}");
            }
            finally
            {
                if (hIcon != IntPtr.Zero)
                {
                    DestroyIcon(hIcon);
                }
            }

            try
            {
                using (Icon? icon = Icon.ExtractAssociatedIcon(filePath))
                {
                    if (icon != null)
                    {
                        _imageList.Images.Add(filePath, (Icon)icon.Clone());
                        int newIndex = _imageList.Images.IndexOfKey(filePath);
                        _iconCache[filePath] = newIndex;
                        return newIndex;
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[IconService] Fallback icon extraction failed for {filePath}: {ex.Message}");
            }

            _iconCache[filePath] = _systemIconIndex;
            return _systemIconIndex;
        }

        public void ClearCache()
        {
            if (_imageList == null)
            {
                _iconCache.Clear();
                return;
            }

            foreach (var key in _iconCache.Keys)
            {
                if (key != "default" && key != "system_icon")
                {
                    if (_imageList.Images.ContainsKey(key))
                    {
                        _imageList.Images.RemoveByKey(key);
                    }
                }
            }
            _iconCache.Clear();
        }
    }
}



--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/LiveConnectionsControl.cs
--------------------------------------------------------------------------------
﻿using MinimalFirewall.TypedObjects;
using System.Collections.Specialized;
using System.Windows.Forms;
using Firewall.Traffic.ViewModels;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System;
using System.ComponentModel;
namespace MinimalFirewall
{
    public partial class LiveConnectionsControl : UserControl
    {
        private TrafficMonitorViewModel _trafficMonitorViewModel;
        private AppSettings _appSettings;
        private IconService _iconService;
        private BackgroundFirewallTaskService _backgroundTaskService;
        private BindingSource _bindingSource;

        private int _sortColumn = -1;
        private SortOrder _sortOrder = SortOrder.None;

        public LiveConnectionsControl()
        {
            InitializeComponent();
            this.DoubleBuffered = true;
        }

        public void Initialize(
            TrafficMonitorViewModel trafficMonitorViewModel,
            AppSettings appSettings,
            IconService iconService,
            BackgroundFirewallTaskService backgroundTaskService,
            ImageList appIconList)
        {
            _trafficMonitorViewModel =
                       trafficMonitorViewModel;
            _appSettings = appSettings;
            _iconService = iconService;
            _backgroundTaskService = backgroundTaskService;

            liveConnectionsDataGridView.AutoGenerateColumns = false;
            _bindingSource = new BindingSource();
            liveConnectionsDataGridView.DataSource = _bindingSource;
            _trafficMonitorViewModel.ActiveConnections.CollectionChanged += ActiveConnections_CollectionChanged;

            _sortColumn = _appSettings.LiveConnectionsSortColumn;
            _sortOrder = (SortOrder)_appSettings.LiveConnectionsSortOrder;
        }

        public void OnTabSelected()
        {
            liveConnectionsDataGridView.Visible = _appSettings.IsTrafficMonitorEnabled;
            liveConnectionsDisabledLabel.Visible = !_appSettings.IsTrafficMonitorEnabled;
            if (_appSettings.IsTrafficMonitorEnabled)
            {
                _trafficMonitorViewModel.StartMonitoring();
                UpdateLiveConnectionsView();
            }
            else
            {
                _bindingSource.DataSource = null;
            }
        }

        public void OnTabDeselected()
        {
            _trafficMonitorViewModel.StopMonitoring();
        }

        public void UpdateIconColumnVisibility()
        {
            liveIconColumn.Visible = _appSettings.ShowAppIcons;
        }

        private void ActiveConnections_CollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
        {
            if (this.Parent is TabPage parentTabPage && parentTabPage.Parent is TabControl parentTabControl && parentTabControl.SelectedTab == parentTabPage)
            {
                if (InvokeRequired)
                {
                    Invoke(new Action(UpdateLiveConnectionsView));
                }
                else
                {
                    UpdateLiveConnectionsView();
                }
            }
        }

        public void UpdateLiveConnectionsView()
        {
            IEnumerable<TcpConnectionViewModel> connections = _trafficMonitorViewModel.ActiveConnections;
            if (_sortOrder != SortOrder.None && _sortColumn != -1)
            {
                Func<TcpConnectionViewModel, object> keySelector = GetLiveConnectionKeySelector(_sortColumn);
                connections = (_sortOrder == SortOrder.Ascending)
                    ? connections.OrderBy(keySelector)
                    : connections.OrderByDescending(keySelector);
            }

            _bindingSource.DataSource = new SortableBindingList<TcpConnectionViewModel>(connections.ToList());
            _bindingSource.ResetBindings(false);
            liveConnectionsDataGridView.Refresh();
        }

        private Func<TcpConnectionViewModel, object> GetLiveConnectionKeySelector(int columnIndex)
        {
            return columnIndex switch
            {
                2 => conn => conn.LocalAddress,
                3 => conn => conn.LocalPort,
                4 => conn => conn.RemoteAddress,
                5 => conn => conn.RemotePort,
                6 => conn => conn.State,
                _ => conn => conn.ProcessName,
            };
        }

        private void killProcessToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (liveConnectionsDataGridView.SelectedRows.Count > 0)
            {
                if (liveConnectionsDataGridView.SelectedRows[0].DataBoundItem is TcpConnectionViewModel vm)
                {
                    vm.KillProcessCommand.Execute(null);
                }
            }
        }

        private void blockRemoteIPToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (liveConnectionsDataGridView.SelectedRows.Count > 0)
            {
                if (liveConnectionsDataGridView.SelectedRows[0].DataBoundItem is TcpConnectionViewModel vm)
                {
                    var rule = new AdvancedRuleViewModel
                    {
                        Name = $"Block {vm.RemoteAddress}",
                        Description = "Blocked from Live Connections",
                        IsEnabled = true,
                        Grouping = MFWConstants.MainRuleGroup,
                        Status = "Block",
                        Direction = Directions.Outgoing,
                        Protocol = 6,
                        LocalPorts = "*",
                        RemotePorts = "*",
                        LocalAddresses = "*",
                        RemoteAddresses = vm.RemoteAddress,
                        Profiles = "All",
                        Type = RuleType.Advanced
                    };
                    var payload = new CreateAdvancedRulePayload { ViewModel = rule, InterfaceTypes = "All", IcmpTypesAndCodes = "" };
                    _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.CreateAdvancedRule, payload));
                }
            }
        }

        private void copyDetailsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (liveConnectionsDataGridView.SelectedRows.Count > 0)
            {
                var details = new System.Text.StringBuilder();

                foreach (DataGridViewRow row in liveConnectionsDataGridView.SelectedRows)
                {
                    if (row.DataBoundItem is TcpConnectionViewModel vm)
                    {
                        if (details.Length > 0)
                        {
                            details.AppendLine();
                            details.AppendLine();
                        }

                        details.AppendLine($"Process Name: {vm.ProcessName}");
                        details.AppendLine($"Process Path: {vm.ProcessPath}");
                        details.AppendLine($"Local Endpoint: {vm.LocalAddress}:{vm.LocalPort}");
                        details.AppendLine($"Remote Endpoint: {vm.RemoteAddress}:{vm.RemotePort}");
                        details.AppendLine($"State: {vm.State}");
                    }
                }

                if (details.Length > 0)
                {
                    Clipboard.SetText(details.ToString());
                }
            }
        }

        private void liveConnectionsDataGridView_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.ColumnIndex == _sortColumn)
            {
                _sortOrder = (_sortOrder == SortOrder.Ascending) ? SortOrder.Descending : SortOrder.Ascending;
            }
            else
            {
                _sortOrder = SortOrder.Ascending;
            }

            _sortColumn = e.ColumnIndex;
            _appSettings.LiveConnectionsSortColumn = _sortColumn;
            _appSettings.LiveConnectionsSortOrder = (int)_sortOrder;

            UpdateLiveConnectionsView();
        }

        private void liveConnectionsDataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            if (e.RowIndex < 0) return;
            var grid = (DataGridView)sender;

            if (grid.Columns[e.ColumnIndex].Name == "liveIconColumn")
            {
                if (grid.Rows[e.RowIndex].DataBoundItem is TcpConnectionViewModel conn && _appSettings.ShowAppIcons && !string.IsNullOrEmpty(conn.ProcessPath))
                {
                    int iconIndex = _iconService.GetIconIndex(conn.ProcessPath);
                    if (iconIndex != -1 && _iconService.ImageList != null)
                    {
                        e.Value = _iconService.ImageList.Images[iconIndex];
                    }
                }
            }
        }

        private void liveConnectionsDataGridView_RowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)
        {
            var grid = (DataGridView)sender;
            var row = grid.Rows[e.RowIndex];

            if (row.Selected) return;

            var mouseOverRow = grid.HitTest(grid.PointToClient(MousePosition).X, grid.PointToClient(MousePosition).Y).RowIndex;
            if (e.RowIndex == mouseOverRow)
            {
                using var overlayBrush = new System.Drawing.SolidBrush(System.Drawing.Color.FromArgb(25, System.Drawing.Color.Black));
                e.Graphics.FillRectangle(overlayBrush, e.RowBounds);
            }
        }

        private void liveConnectionsDataGridView_CellMouseEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                var grid = (DataGridView)sender;
                grid.InvalidateRow(e.RowIndex);
            }
        }

        private void liveConnectionsDataGridView_CellMouseLeave(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                var grid = (DataGridView)sender;
                grid.InvalidateRow(e.RowIndex);
            }
        }

        private void liveConnectionsDataGridView_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right && e.RowIndex >= 0)
            {
                var grid = (DataGridView)sender;
                var clickedRow = grid.Rows[e.RowIndex];

                if (!clickedRow.Selected)
                {
                    grid.ClearSelection();
                    clickedRow.Selected = true;
                }
            }
        }
    }

    public class SortableBindingList<T> : BindingList<T>
    {
        public SortableBindingList(IList<T> list) : base(list) { }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/LiveConnectionsControl.Designer.cs
--------------------------------------------------------------------------------
﻿namespace MinimalFirewall
{
    partial class LiveConnectionsControl
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.Label liveConnectionsDisabledLabel;
        private System.Windows.Forms.ContextMenuStrip liveConnectionsContextMenu;
        private System.Windows.Forms.ToolStripMenuItem killProcessToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem blockRemoteIPToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
        private System.Windows.Forms.ToolStripMenuItem copyDetailsToolStripMenuItem;
        private System.Windows.Forms.DataGridView liveConnectionsDataGridView;
        private System.Windows.Forms.DataGridViewImageColumn liveIconColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn processNameColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn localAddressColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn localPortColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn remoteAddressColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn remotePortColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn stateColumn;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle1 = new System.Windows.Forms.DataGridViewCellStyle();
            this.liveConnectionsDisabledLabel = new System.Windows.Forms.Label();
            this.liveConnectionsContextMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.killProcessToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.blockRemoteIPToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.copyDetailsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.liveConnectionsDataGridView = new System.Windows.Forms.DataGridView();
            this.liveIconColumn = new System.Windows.Forms.DataGridViewImageColumn();
            this.processNameColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.localAddressColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.localPortColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.remoteAddressColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.remotePortColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.stateColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.liveConnectionsContextMenu.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.liveConnectionsDataGridView)).BeginInit();
            this.SuspendLayout();
            // 
            // liveConnectionsDisabledLabel
            // 
            this.liveConnectionsDisabledLabel.Dock = System.Windows.Forms.DockStyle.Fill;
            this.liveConnectionsDisabledLabel.Font = new System.Drawing.Font("Segoe UI", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point);
            this.liveConnectionsDisabledLabel.Location = new System.Drawing.Point(0, 0);
            this.liveConnectionsDisabledLabel.Name = "liveConnectionsDisabledLabel";
            this.liveConnectionsDisabledLabel.Size = new System.Drawing.Size(800, 600);
            this.liveConnectionsDisabledLabel.TabIndex = 1;
            this.liveConnectionsDisabledLabel.Text = "Please turn on Live Connections in the Settings tab.";
            this.liveConnectionsDisabledLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            this.liveConnectionsDisabledLabel.Visible = false;
            // 
            // liveConnectionsContextMenu
            // 
            this.liveConnectionsContextMenu.ImageScalingSize = new System.Drawing.Size(20, 20);
            this.liveConnectionsContextMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.killProcessToolStripMenuItem,
            this.blockRemoteIPToolStripMenuItem,
            this.toolStripSeparator1,
            this.copyDetailsToolStripMenuItem});
            this.liveConnectionsContextMenu.Name = "liveConnectionsContextMenu";
            this.liveConnectionsContextMenu.Size = new System.Drawing.Size(186, 82);
            // 
            // killProcessToolStripMenuItem
            // 
            this.killProcessToolStripMenuItem.Name = "killProcessToolStripMenuItem";
            this.killProcessToolStripMenuItem.Size = new System.Drawing.Size(185, 24);
            this.killProcessToolStripMenuItem.Text = "Kill Process";
            this.killProcessToolStripMenuItem.Click += new System.EventHandler(this.killProcessToolStripMenuItem_Click);
            // 
            // blockRemoteIPToolStripMenuItem
            // 
            this.blockRemoteIPToolStripMenuItem.Name = "blockRemoteIPToolStripMenuItem";
            this.blockRemoteIPToolStripMenuItem.Size = new System.Drawing.Size(185, 24);
            this.blockRemoteIPToolStripMenuItem.Text = "Block Remote IP";
            this.blockRemoteIPToolStripMenuItem.Click += new System.EventHandler(this.blockRemoteIPToolStripMenuItem_Click);
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            this.toolStripSeparator1.Size = new System.Drawing.Size(182, 6);
            // 
            // copyDetailsToolStripMenuItem
            // 
            this.copyDetailsToolStripMenuItem.Name = "copyDetailsToolStripMenuItem";
            this.copyDetailsToolStripMenuItem.Size = new System.Drawing.Size(185, 24);
            this.copyDetailsToolStripMenuItem.Text = "Copy Details";
            this.copyDetailsToolStripMenuItem.Click += new System.EventHandler(this.copyDetailsToolStripMenuItem_Click);
            // 
            // liveConnectionsDataGridView
            // 
            this.liveConnectionsDataGridView.AllowUserToAddRows = false;
            this.liveConnectionsDataGridView.AllowUserToDeleteRows = false;
            this.liveConnectionsDataGridView.AllowUserToResizeRows = false;
            this.liveConnectionsDataGridView.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            this.liveConnectionsDataGridView.BackgroundColor = System.Drawing.SystemColors.Control;
            this.liveConnectionsDataGridView.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.liveConnectionsDataGridView.CellBorderStyle = System.Windows.Forms.DataGridViewCellBorderStyle.None;
            this.liveConnectionsDataGridView.ColumnHeadersBorderStyle = System.Windows.Forms.DataGridViewHeaderBorderStyle.None;
            dataGridViewCellStyle1.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle1.BackColor = System.Drawing.SystemColors.Control;
            dataGridViewCellStyle1.Font = new System.Drawing.Font("Segoe UI", 9F);
            dataGridViewCellStyle1.ForeColor = System.Drawing.SystemColors.WindowText;
            dataGridViewCellStyle1.SelectionBackColor = System.Drawing.SystemColors.Highlight;
            dataGridViewCellStyle1.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
            dataGridViewCellStyle1.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
            this.liveConnectionsDataGridView.ColumnHeadersDefaultCellStyle = dataGridViewCellStyle1;
            this.liveConnectionsDataGridView.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.liveConnectionsDataGridView.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
            this.liveIconColumn,
            this.processNameColumn,
            this.localAddressColumn,
            this.localPortColumn,
            this.remoteAddressColumn,
            this.remotePortColumn,
            this.stateColumn});
            this.liveConnectionsDataGridView.ContextMenuStrip = this.liveConnectionsContextMenu;
            this.liveConnectionsDataGridView.Dock = System.Windows.Forms.DockStyle.Fill;
            this.liveConnectionsDataGridView.EnableHeadersVisualStyles = false;
            this.liveConnectionsDataGridView.GridColor = System.Drawing.SystemColors.Control;
            this.liveConnectionsDataGridView.Location = new System.Drawing.Point(0, 0);
            this.liveConnectionsDataGridView.MultiSelect = true;
            this.liveConnectionsDataGridView.Name = "liveConnectionsDataGridView";
            this.liveConnectionsDataGridView.ReadOnly = true;
            this.liveConnectionsDataGridView.RowHeadersVisible = false;
            this.liveConnectionsDataGridView.RowTemplate.Height = 28;
            this.liveConnectionsDataGridView.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.liveConnectionsDataGridView.ShowCellToolTips = true;
            this.liveConnectionsDataGridView.Size = new System.Drawing.Size(800, 600);
            this.liveConnectionsDataGridView.TabIndex = 2;
            this.liveConnectionsDataGridView.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(this.liveConnectionsDataGridView_CellFormatting);
            this.liveConnectionsDataGridView.CellMouseDown += new System.Windows.Forms.DataGridViewCellMouseEventHandler(this.liveConnectionsDataGridView_CellMouseDown);
            this.liveConnectionsDataGridView.CellMouseEnter += new System.Windows.Forms.DataGridViewCellEventHandler(this.liveConnectionsDataGridView_CellMouseEnter);
            this.liveConnectionsDataGridView.CellMouseLeave += new System.Windows.Forms.DataGridViewCellEventHandler(this.liveConnectionsDataGridView_CellMouseLeave);
            this.liveConnectionsDataGridView.ColumnHeaderMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(this.liveConnectionsDataGridView_ColumnHeaderMouseClick);
            this.liveConnectionsDataGridView.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler(this.liveConnectionsDataGridView_RowPostPaint);
            // 
            // liveIconColumn
            // 
            this.liveIconColumn.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None;
            this.liveIconColumn.FillWeight = 5F;
            this.liveIconColumn.HeaderText = "";
            this.liveIconColumn.ImageLayout = System.Windows.Forms.DataGridViewImageCellLayout.Zoom;
            this.liveIconColumn.MinimumWidth = 32;
            this.liveIconColumn.Name = "liveIconColumn";
            this.liveIconColumn.ReadOnly = true;
            this.liveIconColumn.Resizable = System.Windows.Forms.DataGridViewTriState.False;
            this.liveIconColumn.Width = 32;
            // 
            // processNameColumn
            // 
            this.processNameColumn.DataPropertyName = "DisplayName";
            this.processNameColumn.FillWeight = 30F;
            this.processNameColumn.HeaderText = "Process Name";
            this.processNameColumn.Name = "processNameColumn";
            this.processNameColumn.ReadOnly = true;
            // 
            // localAddressColumn
            // 
            this.localAddressColumn.DataPropertyName = "LocalAddress";
            this.localAddressColumn.FillWeight = 25F;
            this.localAddressColumn.HeaderText = "Local Address";
            this.localAddressColumn.Name = "localAddressColumn";
            this.localAddressColumn.ReadOnly = true;
            // 
            // localPortColumn
            // 
            this.localPortColumn.DataPropertyName = "LocalPort";
            this.localPortColumn.FillWeight = 10F;
            this.localPortColumn.HeaderText = "Local Port";
            this.localPortColumn.Name = "localPortColumn";
            this.localPortColumn.ReadOnly = true;
            // 
            // remoteAddressColumn
            // 
            this.remoteAddressColumn.DataPropertyName = "RemoteAddress";
            this.remoteAddressColumn.FillWeight = 25F;
            this.remoteAddressColumn.HeaderText = "Remote Address";
            this.remoteAddressColumn.Name = "remoteAddressColumn";
            this.remoteAddressColumn.ReadOnly = true;
            // 
            // remotePortColumn
            // 
            this.remotePortColumn.DataPropertyName = "RemotePort";
            this.remotePortColumn.FillWeight = 10F;
            this.remotePortColumn.HeaderText = "Remote Port";
            this.remotePortColumn.Name = "remotePortColumn";
            this.remotePortColumn.ReadOnly = true;
            // 
            // stateColumn
            // 
            this.stateColumn.DataPropertyName = "State";
            this.stateColumn.FillWeight = 15F;
            this.stateColumn.HeaderText = "State";
            this.stateColumn.Name = "stateColumn";
            this.stateColumn.ReadOnly = true;
            // 
            // LiveConnectionsControl
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 20F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.Controls.Add(this.liveConnectionsDataGridView);
            this.Controls.Add(this.liveConnectionsDisabledLabel);
            this.Name = "LiveConnectionsControl";
            this.Size = new System.Drawing.Size(800, 600);
            this.liveConnectionsContextMenu.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.liveConnectionsDataGridView)).EndInit();
            this.ResumeLayout(false);
        }
        #endregion
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/MainForm.cs
--------------------------------------------------------------------------------
﻿using DarkModeForms;
using NetFwTypeLib;
using System.Diagnostics;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Reflection;
using System.Runtime.InteropServices;
using MinimalFirewall.Groups;
using Firewall.Traffic.ViewModels;
using MinimalFirewall.TypedObjects;
using System.Windows.Forms;
using System.ComponentModel;
using MinimalFirewall;
using System.Collections.Concurrent;

namespace MinimalFirewall
{
    public partial class MainForm : Form
    {
        #region Fields
        private readonly INetFwPolicy2 _firewallPolicy;
        private readonly FirewallDataService _dataService;
        private readonly FirewallActionsService _actionsService;
        private readonly FirewallEventListenerService _eventListenerService;
        private readonly FirewallSentryService _firewallSentryService;
        private readonly FirewallRuleService _firewallRuleService;
        private readonly UserActivityLogger _activityLogger;
        private readonly WildcardRuleService _wildcardRuleService;
        private readonly ForeignRuleTracker _foreignRuleTracker;
        private readonly AppSettings _appSettings;
        private readonly StartupService _startupService;
        private readonly FirewallGroupManager _groupManager;
        private readonly IconService _iconService;
        private readonly PublisherWhitelistService _whitelistService;
        private readonly BackgroundFirewallTaskService _backgroundTaskService;
        private readonly MainViewModel _mainViewModel;
        private readonly Queue<PendingConnectionViewModel> _popupQueue = new();
        private volatile bool _isPopupVisible = false;
        private readonly object _popupLock = new();
        private readonly DarkModeCS dm;
        private System.Threading.Timer? _autoRefreshTimer;
        private readonly Dictionary<string, System.Threading.Timer> _tabUnloadTimers = new();
        private Image? _lockedGreenIcon;
        private Image? _unlockedWhiteIcon;
        private Image? _refreshWhiteIcon;
        private ToolStripMenuItem? lockdownTrayMenuItem;
        private Icon? _defaultTrayIcon;
        private Icon? _unlockedTrayIcon;
        private Icon? _alertTrayIcon;
        private bool _isRefreshingData = false;
        private bool _isSentryServiceStarted = false;
        private readonly bool _startMinimized;
        private StatusForm? _auditStatusForm = null;
        private CancellationTokenSource? _scanCts = null;
        #endregion

        #region Native Methods
        [LibraryImport("kernel32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static partial bool SetProcessWorkingSetSize(IntPtr process,
            IntPtr minimumWorkingSetSize, IntPtr maximumWorkingSetSize);
        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        extern static bool DestroyIcon(IntPtr handle);
        #endregion

        #region Constructor and Initialization
        public MainForm(bool startMinimized = false)
        {
            _startMinimized = startMinimized;
            InitializeComponent();

            this.Opacity = 0;
            this.ShowInTaskbar = false;

            using (Graphics g = this.CreateGraphics())
            {
                float dpiScale = g.DpiY / 96f;
                if (dpiScale > 1f)
                {
                    int newTabWidth = (int)(mainTabControl.ItemSize.Width * dpiScale);
                    int newTabHeight = (int)(mainTabControl.ItemSize.Height * dpiScale);
                    mainTabControl.ItemSize = new Size(newTabWidth, newTabHeight);
                }
            }

            this.DoubleBuffered = true;
            this.Text = "Minimal Firewall";

            _appSettings = AppSettings.Load();
            dm = new DarkModeCS(this);
            if (this.components != null)
            {
                dm.Components = this.components.Components;
            }

            try
            {
                Type? firewallPolicyType = Type.GetTypeFromProgID("HNetCfg.FwPolicy2");
                if (firewallPolicyType != null)
                {
                    _firewallPolicy = (INetFwPolicy2)Activator.CreateInstance(firewallPolicyType)!;
                }
                else
                {
                    throw new InvalidOperationException("Firewall policy type could not be retrieved.");
                }
            }
            catch (Exception ex) when (ex is COMException or InvalidOperationException)
            {
                MessageBox.Show("Could not initialize Windows Firewall policy management. The application cannot continue.\n\nError: " + ex.Message, "Fatal Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Environment.Exit(1);
                return;
            }

            _startupService = new StartupService();
            _groupManager = new FirewallGroupManager(_firewallPolicy);
            _iconService = new IconService { ImageList = this.appIconList };
            _whitelistService = new PublisherWhitelistService();
            _firewallRuleService = new FirewallRuleService(_firewallPolicy);
            _activityLogger = new UserActivityLogger { IsEnabled = _appSettings.IsLoggingEnabled };
            _wildcardRuleService = new WildcardRuleService();
            _foreignRuleTracker = new ForeignRuleTracker();
            var uwpService = new UwpService();
            _dataService = new FirewallDataService(_firewallRuleService, _wildcardRuleService, uwpService);
            _firewallSentryService = new FirewallSentryService(_firewallRuleService);
            var trafficMonitorViewModel = new TrafficMonitorViewModel();
            _eventListenerService = new FirewallEventListenerService(_dataService, _wildcardRuleService, () => _mainViewModel.IsLockedDown, msg => _activityLogger.LogDebug(msg), _appSettings, _whitelistService);
            _actionsService = new FirewallActionsService(_firewallRuleService, _activityLogger, _eventListenerService, _foreignRuleTracker, _firewallSentryService, _whitelistService, _firewallPolicy, _wildcardRuleService, _dataService);
            _eventListenerService.ActionsService = _actionsService;
            _backgroundTaskService = new BackgroundFirewallTaskService(_actionsService, _activityLogger, _wildcardRuleService);
            _mainViewModel = new MainViewModel(_firewallRuleService, _wildcardRuleService, _backgroundTaskService, _dataService, _firewallSentryService, _foreignRuleTracker, trafficMonitorViewModel, _eventListenerService, _appSettings, _activityLogger);
            _backgroundTaskService.QueueCountChanged += OnQueueCountChanged;
            _mainViewModel.PopupRequired += OnPopupRequired;
            _mainViewModel.DashboardActionProcessed += OnDashboardActionProcessed;

            dashboardControl1.Initialize(_mainViewModel, _appSettings, _iconService, dm, _wildcardRuleService, _actionsService, _firewallPolicy);
            rulesControl1.Initialize(_mainViewModel, _actionsService, _firewallPolicy, _wildcardRuleService, _backgroundTaskService, _iconService, _appSettings, appIconList, dm);
            auditControl1.Initialize(_mainViewModel, _foreignRuleTracker, _firewallSentryService, _appSettings, dm);
            groupsControl1.Initialize(_groupManager, _backgroundTaskService, dm);
            liveConnectionsControl1.Initialize(_mainViewModel.TrafficMonitorViewModel, _appSettings, _iconService, _backgroundTaskService, appIconList);

            string versionInfo = "Version " + Assembly.GetExecutingAssembly().GetName()?.Version?.ToString(3);
            _mainViewModel.SystemChangesUpdated += () => {
                UpdateUiWithChangesCount();
            };

            settingsControl1.Initialize(_appSettings, _startupService, _whitelistService, _actionsService, _activityLogger, _mainViewModel, appImageList, versionInfo, dm);

            settingsControl1.ThemeChanged += UpdateThemeAndColors;
            settingsControl1.IconVisibilityChanged += UpdateIconColumnVisibility;
            settingsControl1.DataRefreshRequested += async () => await ForceDataRefreshAsync(true);
            settingsControl1.AutoRefreshTimerChanged += SetupAutoRefreshTimer;

            SetupTrayIcon();

            lockdownButton.BringToFront();
            rescanButton.BringToFront();
        }

        private void OnQueueCountChanged(int count)
        {
            if (this.InvokeRequired)
            {
                this.Invoke(() => OnQueueCountChanged(count));
                return;
            }

            if (count == 0)
            {
                _mainViewModel.ClearRulesCache();
            }
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            ApplyLastWindowState();
        }

        protected override async void OnShown(EventArgs e)
        {
            base.OnShown(e);
            DarkModeCS.ExcludeFromProcessing(rescanButton);
            rescanButton.BackColor = Color.Transparent;
            DarkModeCS.ExcludeFromProcessing(lockdownButton);
            lockdownButton.BackColor = Color.Transparent;
            lockdownButton.Paint += OwnerDrawnButton_Paint;
            rescanButton.Paint += OwnerDrawnButton_Paint;

            SetupAppIcons();
            if (!_startMinimized)
            {
                await DisplayCurrentTabData();
                UpdateThemeAndColors();

                this.ShowInTaskbar = true;

                var fadeTimer = new System.Windows.Forms.Timer();
                fadeTimer.Interval = 20;
                fadeTimer.Tick += (sender, args) =>
                {
                    this.Opacity += 0.1;
                    if (this.Opacity >= 1.0)
                    {
                        fadeTimer.Stop();
                        fadeTimer.Dispose();
                        this.Opacity = 1.0;
                    }
                };
                fadeTimer.Start();

                this.Activate();
            }
            else
            {
                Hide();
                await PrepareForTrayAsync();
            }

            _actionsService.CleanupTemporaryRulesOnStartup();
            if (_mainViewModel.IsLockedDown)
            {
                AdminTaskService.SetAuditPolicy(true);
                _eventListenerService.Start();
            }

            UpdateTrayStatus();
            string versionInfo = "Version " + Assembly.GetExecutingAssembly().GetName()?.Version?.ToString(3);
            _activityLogger.LogDebug("Application Started: " + versionInfo);
            settingsControl1.LoadSettingsToUI();
            SetupAutoRefreshTimer();
            UpdateIconColumnVisibility();
        }

        private Icon CreateRecoloredIcon(Icon originalIcon, Color color)
        {
            using var bmp = originalIcon.ToBitmap();
            using var recoloredImage = RecolorImage(bmp, color);
            IntPtr hIcon = ((Bitmap)recoloredImage).GetHicon();
            try
            {
                using var newIcon = Icon.FromHandle(hIcon);
                return (Icon)newIcon.Clone();
            }
            finally
            {
                DestroyIcon(hIcon);
            }
        }

        private void SetupAppIcons()
        {
            var assembly = Assembly.GetExecutingAssembly();
            using (var stream = assembly.GetManifestResourceStream("MinimalFirewall.logo.ico"))
            {
                if (stream != null)
                {
                    var icon = new Icon(stream);
                    this.Icon = icon;
                    _defaultTrayIcon = icon;
                    _unlockedTrayIcon = CreateRecoloredIcon(icon, Color.Red);
                    _alertTrayIcon = CreateRecoloredIcon(icon, Color.Orange);
                    if (notifyIcon != null)
                    {
                        notifyIcon.Icon = _mainViewModel.IsLockedDown ?
                                          _defaultTrayIcon : _unlockedTrayIcon;
                    }
                }
            }

            appImageList.ImageSize = new Size(32, 32);
            mainTabControl.ImageList = appImageList;

            Image? lockedIcon = appImageList.Images["locked.png"];
            if (lockedIcon != null)
            {
                _lockedGreenIcon = DarkModeCS.RecolorImage(lockedIcon, Color.FromArgb(0, 200, 83));
            }
            Image? unlockedIcon = appImageList.Images["unlocked.png"];
            if (unlockedIcon != null)
            {
                _unlockedWhiteIcon = DarkModeCS.RecolorImage(unlockedIcon, Color.White);
            }
            Image? refreshIcon = appImageList.Images["refresh.png"];
            if (refreshIcon != null)
            {
                _refreshWhiteIcon = DarkModeCS.RecolorImage(refreshIcon, Color.White);
            }

            lockdownButton!.Text = string.Empty;
            rescanButton.Text = string.Empty;
            lockdownButton.AutoSize = false;
            rescanButton.AutoSize = false;
            using (var g = this.CreateGraphics())
            {
                int scaledSize = (int)(40 * (g.DpiY / 96f));
                lockdownButton.Size = new Size(scaledSize, scaledSize);
                rescanButton.Size = new Size(scaledSize, scaledSize);
            }
            lockdownButton.Image = null;
            rescanButton.Image = null;
            using (var stream = assembly.GetManifestResourceStream("MinimalFirewall.logo.png"))
            {
                if (stream != null)
                {
                    logoPictureBox.Image = Image.FromStream(stream);
                }
            }
        }
        #endregion

        #region Settings and Theme

        private void UpdateThemeAndColors()
        {
            this.SuspendLayout();
            bool isDark = _appSettings.Theme == "Dark";
            dm.ColorMode = isDark ? DarkModeCS.DisplayMode.DarkMode : DarkModeCS.DisplayMode.ClearMode;
            dm.ApplyTheme(isDark);
            rulesControl1.ApplyThemeFixes();
            auditControl1.ApplyThemeFixes();
            settingsControl1.ApplyTheme(isDark, dm);
            settingsControl1.ApplyThemeFixes();

            rescanButton.Invalidate();
            UpdateTrayStatus();
            this.ResumeLayout(true);
            this.Refresh();
            lockdownButton.FlatAppearance.BorderColor = this.BackColor;
            rescanButton.FlatAppearance.BorderColor = this.BackColor;

            lockdownButton.BringToFront();
            rescanButton.BringToFront();
        }

        private void UpdateIconColumnVisibility()
        {
            rulesControl1.UpdateIconColumnVisibility();
            dashboardControl1.SetIconColumnVisibility(_appSettings.ShowAppIcons);
            liveConnectionsControl1.UpdateIconColumnVisibility();
        }
        #endregion

        #region Core Logic and Backend Event Handlers
        private void UpdateTrayStatus()
        {
            bool locked = _mainViewModel.IsLockedDown;
            logoPictureBox.Visible = !locked;
            dashboardControl1.Visible = locked;

            lockdownButton.Invalidate();

            if (notifyIcon != null)
            {
                if (locked)
                {
                    notifyIcon.Icon = _defaultTrayIcon;
                }
                else if (_appSettings.AlertOnForeignRules && _mainViewModel.UnseenSystemChangesCount > 0)
                {
                    notifyIcon.Icon = _alertTrayIcon;
                }
                else
                {
                    notifyIcon.Icon = _unlockedTrayIcon;
                }
            }
        }

        private void UpdateUiWithChangesCount()
        {
            if (this.InvokeRequired)
            {
                this.Invoke(new Action(UpdateUiWithChangesCount));
                return;
            }

            if (_appSettings.AlertOnForeignRules && _mainViewModel.UnseenSystemChangesCount > 0)
            {
                systemChangesTabPage.Text = "Audit";
                dm.SetNotificationCount(systemChangesTabPage, _mainViewModel.UnseenSystemChangesCount);
            }
            else
            {
                systemChangesTabPage.Text = "Audit";
                dm.SetNotificationCount(systemChangesTabPage, 0);
            }
            UpdateTrayStatus();
        }

        private void OnPopupRequired(PendingConnectionViewModel pending)
        {
            if (this.InvokeRequired)
            {
                this.Invoke(() => OnPopupRequired(pending));
                return;
            }

            bool alreadyInPopupQueue = _popupQueue.Any(p => p.AppPath.Equals(pending.AppPath, StringComparison.OrdinalIgnoreCase) && p.Direction.Equals(pending.Direction, StringComparison.OrdinalIgnoreCase));
            if (alreadyInPopupQueue)
            {
                _activityLogger.LogDebug($"Ignoring duplicate pending connection for {pending.AppPath} (in popup queue)");
                return;
            }

            if (_appSettings.IsPopupsEnabled)
            {
                lock (_popupLock)
                {
                    _popupQueue.Enqueue(pending);
                }
                BeginInvoke(new Action(ProcessNextPopup));
            }
        }

        private void ProcessNextPopup()
        {
            lock (_popupLock)
            {
                if (_isPopupVisible || _popupQueue.Count == 0)
                {
                    return;
                }

                _isPopupVisible = true;
                var pending = _popupQueue.Dequeue();

                var notifier = new NotifierForm(pending, _appSettings.Theme == "Dark");
                notifier.FormClosed += Notifier_FormClosed;
                notifier.TopMost = true;
                notifier.Show();
            }
        }

        private void Notifier_FormClosed(object? sender, FormClosedEventArgs e)
        {
            try
            {
                if (sender is not NotifierForm notifier) return;
                notifier.FormClosed -= Notifier_FormClosed;

                var pending = notifier.PendingConnection;
                var result = notifier.Result;
                _mainViewModel.PendingConnections.Remove(pending);
                if (result == NotifierForm.NotifierResult.CreateWildcard)
                {
                    this.BeginInvoke(new Action(() =>
                    {
                        using var wildcardDialog = new WildcardCreatorForm(_wildcardRuleService, pending.AppPath);
                        if (wildcardDialog.ShowDialog(this) == DialogResult.OK)
                        {
                            var newRule = new WildcardRule
                            {
                                FolderPath = wildcardDialog.FolderPath,
                                ExeName = wildcardDialog.ExeName,
                                Action = wildcardDialog.FinalAction
                            };
                            _wildcardRuleService.AddRule(newRule);
                            var payload = new ApplyApplicationRulePayload
                            {
                                AppPaths = [pending.AppPath],
                                Action = newRule.Action,
                                WildcardSourcePath = newRule.FolderPath
                            };
                            _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.ApplyApplicationRule, payload));
                        }

                        lock (_popupLock)
                        {
                            _isPopupVisible = false;
                        }
                        BeginInvoke(new Action(ProcessNextPopup));
                    }));
                }
                else
                {
                    var payload = new ProcessPendingConnectionPayload
                    {
                        PendingConnection = pending,
                        Decision = result.ToString(),
                        Duration = (result == NotifierForm.NotifierResult.TemporaryAllow) ?
                                   notifier.TemporaryDuration : default,
                        TrustPublisher = notifier.TrustPublisher
                    };
                    _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.ProcessPendingConnection, payload));

                    lock (_popupLock)
                    {
                        _isPopupVisible = false;
                    }
                    BeginInvoke(new Action(ProcessNextPopup));
                }
            }
            catch (Exception)
            {
            }
            finally
            {
                if (sender is IDisposable disposable)
                {
                    disposable.Dispose();
                }
            }
        }

        private void OnDashboardActionProcessed(PendingConnectionViewModel processedConnection)
        {
            if (this.InvokeRequired)
            {
                this.Invoke(() => OnDashboardActionProcessed(processedConnection));
                return;
            }

            NotifierForm? notifierToClose = null;
            lock (_popupLock)
            {
                var newQueue = new Queue<PendingConnectionViewModel>(
                    _popupQueue.Where(p =>
                        !(p.AppPath.Equals(processedConnection.AppPath, StringComparison.OrdinalIgnoreCase) &&
                          p.Direction.Equals(processedConnection.Direction, StringComparison.OrdinalIgnoreCase))
                    )
                );
                _popupQueue.Clear();
                foreach (var item in newQueue)
                {
                    _popupQueue.Enqueue(item);
                }

                if (_isPopupVisible)
                {
                    var activeNotifier = Application.OpenForms.OfType<NotifierForm>().FirstOrDefault();
                    if (activeNotifier != null)
                    {
                        var pendingInPopup = activeNotifier.PendingConnection;
                        if (pendingInPopup.AppPath.Equals(processedConnection.AppPath, StringComparison.OrdinalIgnoreCase) &&
                            pendingInPopup.Direction.Equals(processedConnection.Direction, StringComparison.OrdinalIgnoreCase))
                        {
                            notifierToClose = activeNotifier;
                        }
                    }
                }
            }

            if (notifierToClose != null)
            {
                notifierToClose.Result = NotifierForm.NotifierResult.Ignore;
                notifierToClose.Close();
            }
        }
        #endregion

        #region System Tray & Lifecycle
        private void SetupTrayIcon()
        {
            lockdownTrayMenuItem = new ToolStripMenuItem("Toggle Lockdown", null, ToggleLockdownTrayMenuItem_Click);
            var contextMenu = new ContextMenuStrip();
            contextMenu.Items.Add(lockdownTrayMenuItem);
            contextMenu.Items.Add(new ToolStripMenuItem("Show", null, ShowWindow));
            contextMenu.Items.Add(new ToolStripMenuItem("Exit", null, ExitApplication));
            contextMenu.Opening += TrayContextMenu_Opening;
            notifyIcon = new NotifyIcon(this.components)
            {
                Icon = this.Icon,
                Text = "Minimal Firewall",
                Visible = true,
                ContextMenuStrip = contextMenu
            };
            notifyIcon.DoubleClick += ShowWindow;
        }

        private void ToggleLockdownTrayMenuItem_Click(object? sender, EventArgs e)
        {
            _actionsService.ToggleLockdown();
            UpdateTrayStatus();
        }

        private void TrayContextMenu_Opening(object? sender, System.ComponentModel.CancelEventArgs e)
        {
            if (lockdownTrayMenuItem != null)
            {
                lockdownTrayMenuItem.Text = _mainViewModel.IsLockedDown ?
                                            "Disable Lockdown" : "Enable Lockdown";
            }
        }

        private void SetupAutoRefreshTimer()
        {
            _autoRefreshTimer?.Dispose();
            if (_appSettings.AutoRefreshIntervalMinutes > 0)
            {
                var interval = TimeSpan.FromMinutes(_appSettings.AutoRefreshIntervalMinutes);
                _autoRefreshTimer = new System.Threading.Timer(_ =>
                {
                    if (this.IsDisposed || !this.IsHandleCreated)
                    {
                        return;
                    }

                    try
                    {
                        this.Invoke(new Action(async () =>
                        {
                            if (this.Visible && (mainTabControl.SelectedTab?.Name is "rulesTabPage"))
                            {
                                await ForceDataRefreshAsync();
                            }
                        }));
                    }
                    catch (ObjectDisposedException)
                    {
                    }
                }, null, interval, interval);
                _activityLogger.LogDebug($"Auto-refresh timer set to {_appSettings.AutoRefreshIntervalMinutes} minutes.");
            }
        }

        private void ApplyLastWindowState()
        {
            if (_appSettings.WindowSize.Width > 0 && _appSettings.WindowSize.Height > 0)
            {
                this.Size = _appSettings.WindowSize;
            }

            bool isVisible = false;
            foreach (Screen screen in Screen.AllScreens)
            {
                if (screen.WorkingArea.Contains(_appSettings.WindowLocation))
                {
                    isVisible = true;
                    break;
                }
            }
            if (isVisible)
            {
                this.Location = _appSettings.WindowLocation;
            }
            else
            {
                this.StartPosition = FormStartPosition.CenterScreen;
            }

            FormWindowState savedState = (FormWindowState)_appSettings.WindowState;
            if (savedState == FormWindowState.Minimized)
            {
                savedState = FormWindowState.Normal;
            }

            this.WindowState = savedState;
        }

        private async void ShowWindow(object? sender, EventArgs e)
        {
            this.Opacity = 1;
            this.ShowInTaskbar = true;

            ApplyLastWindowState();
            this.Show();
            this.Activate();
            if (_mainViewModel.IsLockedDown)
            {
                _eventListenerService.Start();
            }
            if (_isSentryServiceStarted)
            {
                _firewallSentryService.Start();
            }

            SetupAutoRefreshTimer();
            await DisplayCurrentTabData();
            await RefreshRulesListAsync();
        }

        private void ExitApplication(object? sender, EventArgs e)
        {
            Application.Exit();
        }

        private void MainForm_FormClosing(object? sender, FormClosingEventArgs e)
        {
            if (this.WindowState == FormWindowState.Maximized)
            {
                _appSettings.WindowLocation = this.RestoreBounds.Location;
                _appSettings.WindowSize = this.RestoreBounds.Size;
                _appSettings.WindowState = (int)FormWindowState.Maximized;
            }
            else if (this.WindowState == FormWindowState.Normal)
            {
                _appSettings.WindowLocation = this.Location;
                _appSettings.WindowSize = this.Size;
                _appSettings.WindowState = (int)FormWindowState.Normal;
            }
            else
            {
                _appSettings.WindowLocation = this.RestoreBounds.Location;
                _appSettings.WindowSize = this.RestoreBounds.Size;
                _appSettings.WindowState = (int)FormWindowState.Normal;
            }

            settingsControl1.SaveSettingsFromUI();
            bool isExiting = !(_appSettings.CloseToTray && e.CloseReason == CloseReason.UserClosing);

            if (!isExiting)
            {
                e.Cancel = true;
                this.Hide();
                if (notifyIcon != null)
                {
                    notifyIcon.Visible = true;
                }
                PrepareForTrayAsync();
            }
            else
            {
                _scanCts?.Cancel();
                foreach (var timer in _tabUnloadTimers.Values)
                {
                    timer.Dispose();
                }
                _tabUnloadTimers.Clear();
                _mainViewModel.PopupRequired -= OnPopupRequired;
                _backgroundTaskService.QueueCountChanged -= OnQueueCountChanged;
                Application.Exit();
            }
        }

        public async Task PrepareForTrayAsync()
        {
            _scanCts?.Cancel();
            _firewallSentryService.Stop();
            _mainViewModel.TrafficMonitorViewModel.StopMonitoring();
            _autoRefreshTimer?.Dispose();

            _mainViewModel.ClearRulesData();
            _mainViewModel.PendingConnections.Clear();
            _mainViewModel.SystemChanges.Clear();
            auditControl1.ApplySearchFilter();
            groupsControl1.ClearGroups();

            _dataService.ClearCaches();
            _iconService.ClearCache();
            await Task.Run(() =>
            {
                GC.Collect(GC.MaxGeneration, GCCollectionMode.Forced, true);
                GC.WaitForPendingFinalizers();
                if (Environment.OSVersion.Platform == PlatformID.Win32NT)
                {
                    SetProcessWorkingSetSize(Process.GetCurrentProcess().Handle, -1, -1);
                }
            });
        }
        #endregion

        #region Tab Loading and Filtering
        private async Task DisplayCurrentTabData()
        {
            if (mainTabControl is null) return;
            var selectedTab = mainTabControl.SelectedTab;
            if (selectedTab == null) return;

            this.SuspendLayout();
            if (selectedTab != liveConnectionsTabPage)
            {
                liveConnectionsControl1.OnTabDeselected();
            }

            try
            {
                switch (selectedTab.Name)
                {
                    case "dashboardTabPage":
                        break;
                    case "rulesTabPage":
                        await ForceDataRefreshAsync(true);
                        break;
                    case "systemChangesTabPage":
                        await ScanForSystemChangesAsync(true);
                        break;
                    case "groupsTabPage":
                        await groupsControl1.OnTabSelectedAsync();
                        break;
                    case "liveConnectionsTabPage":
                        liveConnectionsControl1.OnTabSelected();
                        break;
                }
            }
            catch (OperationCanceledException) { }
            this.ResumeLayout(true);
        }

        public async Task ForceDataRefreshAsync(bool forceUwpScan = false, bool showStatus = true, StatusForm? statusFormInstance = null)
        {
            if (_isRefreshingData) return;
            _scanCts?.Cancel();
            _scanCts = new CancellationTokenSource();
            var token = _scanCts.Token;
            StatusForm? statusForm = null;
            try
            {
                _isRefreshingData = true;
                statusForm = statusFormInstance;
                if (showStatus && statusForm == null && this.Visible)
                {
                    statusForm = new StatusForm("Scanning firewall rules...");
                    statusForm.Show(this);
                }

                var progress = new Progress<int>(p => statusForm?.UpdateProgress(p));
                UpdateUIForRefresh(showStatus);
                _iconService.ClearCache();

                await rulesControl1.RefreshDataAsync(forceUwpScan, progress, token);

                if (token.IsCancellationRequested)
                {
                    _mainViewModel.ClearRulesData();
                    GC.Collect();
                    return;
                }
            }
            finally
            {
                if (statusForm != null && statusFormInstance == null && !statusForm.IsDisposed)
                {
                    statusForm.Close();
                }
                _isRefreshingData = false;
                UpdateUIAfterRefresh(showStatus);
            }
        }


        private async Task RefreshRulesListAsync()
        {
            try
            {
                await rulesControl1.RefreshDataAsync();
                if (this.Visible)
                {
                    await DisplayCurrentTabData();
                }
            }
            catch (OperationCanceledException) { }
        }

        private void UpdateUIForRefresh(bool showStatus)
        {
            if (this.InvokeRequired)
            {
                this.Invoke(() => UpdateUIForRefresh(showStatus));
                return;
            }

            rescanButton.Text = "Refreshing...";
            rescanButton.Enabled = false;
            lockdownButton.Enabled = false;
        }

        private void UpdateUIAfterRefresh(bool showStatus)
        {
            if (this.InvokeRequired)
            {
                this.Invoke(() => UpdateUIAfterRefresh(showStatus));
                return;
            }

            rescanButton.Text = "";
            rescanButton.Enabled = true;
            lockdownButton.Enabled = true;
        }

        private async Task ScanForSystemChangesAsync(bool showStatusWindow = false, IProgress<int>? progress = null, CancellationToken token = default)
        {
            if (token == default)
            {
                _scanCts?.Cancel();
                _scanCts = new CancellationTokenSource();
                token = _scanCts.Token;
            }

            try
            {
                if (showStatusWindow && this.Visible)
                {
                    _auditStatusForm = new StatusForm("Scanning for system changes...");
                    var progressIndicator = new Progress<int>(p => _auditStatusForm?.UpdateProgress(p));
                    _auditStatusForm.Show(this);
                    progress = progressIndicator;
                }
                await _mainViewModel.ScanForSystemChangesAsync(token, progress);
            }
            finally
            {
                if (token.IsCancellationRequested)
                {
                    _mainViewModel.SystemChanges.Clear();
                    auditControl1.ApplySearchFilter();
                    GC.Collect();
                }
                if (_auditStatusForm?.IsDisposed == false) _auditStatusForm?.Close();
                _auditStatusForm = null;
            }
        }
        #endregion

        #region UI Event Handlers
        private async void MainTabControl_SelectedIndexChanged(object? sender, EventArgs e)
        {
            var selectedTab = mainTabControl.SelectedTab;
            if (selectedTab == null) return;

            if (_tabUnloadTimers.TryGetValue(selectedTab.Name, out var timer))
            {
                timer.Dispose();
                _tabUnloadTimers.Remove(selectedTab.Name);
            }

            if (selectedTab != liveConnectionsTabPage)
            {
                liveConnectionsControl1.OnTabDeselected();
            }

            try
            {
                switch (selectedTab.Name)
                {
                    case "dashboardTabPage":
                        break;
                    case "rulesTabPage":
                        await ForceDataRefreshAsync(true);
                        break;
                    case "systemChangesTabPage":
                        if (!_isSentryServiceStarted)
                        {
                            _firewallSentryService.Start();
                            _isSentryServiceStarted = true;
                        }
                        await ScanForSystemChangesAsync(true);
                        break;
                    case "groupsTabPage":
                        await groupsControl1.OnTabSelectedAsync();
                        break;
                    case "liveConnectionsTabPage":
                        liveConnectionsControl1.OnTabSelected();
                        break;
                }
            }
            catch (OperationCanceledException) { }
        }

        private void MainTabControl_Deselecting(object sender, TabControlCancelEventArgs e)
        {
            if (e.TabPage == null) return;
            _scanCts?.Cancel();

            var tabsToUnload = new[] { "rulesTabPage", "systemChangesTabPage", "groupsTabPage" };
            if (tabsToUnload.Contains(e.TabPage.Name))
            {
                if (_tabUnloadTimers.TryGetValue(e.TabPage.Name, out var existingTimer))
                {
                    existingTimer.Dispose();
                }

                var timer = new System.Threading.Timer(UnloadTabData, e.TabPage.Name, 30000, Timeout.Infinite);
                _tabUnloadTimers[e.TabPage.Name] = timer;
            }
        }

        private void UnloadTabData(object? state)
        {
            if (state is not string tabName) return;
            this.BeginInvoke(new Action(() =>
            {
                if (mainTabControl.SelectedTab != null && mainTabControl.SelectedTab.Name == tabName)
                {
                    return;
                }

                switch (tabName)
                {
                    case "rulesTabPage":
                        _mainViewModel.ClearRulesData();
                        break;
                    case "systemChangesTabPage":
                        if (_auditStatusForm?.IsDisposed == false) _auditStatusForm?.Close();
                        _auditStatusForm = null;
                        _mainViewModel.SystemChanges.Clear();
                        auditControl1.ApplySearchFilter();
                        UpdateUiWithChangesCount();
                        _firewallSentryService.Stop();
                        _isSentryServiceStarted = false;
                        break;
                    case "groupsTabPage":
                        groupsControl1.ClearGroups();
                        break;
                }

                GC.Collect();
                if (_tabUnloadTimers.TryGetValue(tabName, out var timer))
                {
                    timer.Dispose();
                    _tabUnloadTimers.Remove(tabName);
                }
            }));
        }


        private async void RescanButton_Click(object? sender, EventArgs e)
        {
            if (mainTabControl.SelectedTab != null)
            {
                _activityLogger.LogDebug($"Rescan triggered for tab: {mainTabControl.SelectedTab.Text}");
            }

            try
            {
                if (mainTabControl.SelectedTab == systemChangesTabPage)
                {
                    await ScanForSystemChangesAsync(true);
                }
                else
                {
                    _mainViewModel.ClearRulesCache();
                    await ForceDataRefreshAsync(true);
                }
            }
            catch (OperationCanceledException) { }
        }

        private void ToggleLockdownButton_Click(object sender, EventArgs e)
        {
            bool wasLocked = _mainViewModel.IsLockedDown;
            _actionsService.ToggleLockdown();
            UpdateTrayStatus();

            bool isNowLocked = _mainViewModel.IsLockedDown;
            if (wasLocked && !isNowLocked)
            {
                DismissAllPopups();
            }
        }

        private void DismissAllPopups()
        {
            foreach (var form in Application.OpenForms.OfType<NotifierForm>().ToList())
            {
                form.Close();
            }

            lock (_popupLock)
            {
                _popupQueue.Clear();
                _isPopupVisible = false;
            }
        }

        private void ArrowPictureBox_Paint(object sender, PaintEventArgs e)
        {
            e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
            Color arrowColor = (_appSettings.Theme == "Dark") ? Color.White : Color.Black;
            using (var arrowPen = new Pen(arrowColor, 2.5f))
            {
                arrowPen.EndCap = LineCap.ArrowAnchor;
                Point startPoint = new(arrowPictureBox.Width - 1, 0);
                Point endPoint = new(5, arrowPictureBox.Height - 5);
                Point controlPoint1 = new(arrowPictureBox.Width - 5, arrowPictureBox.Height / 2);
                Point controlPoint2 = new(arrowPictureBox.Width / 2, arrowPictureBox.Height);
                e.Graphics.DrawBezier(arrowPen, startPoint, controlPoint1, controlPoint2, endPoint);
            }
        }

        private void LockdownButton_MouseEnter(object? sender, EventArgs e)
        {
            lockdownButton.Invalidate();
        }

        private void LockdownButton_MouseLeave(object? sender, EventArgs e)
        {
            lockdownButton.Invalidate();
        }

        private void RescanButton_MouseEnter(object? sender, EventArgs e)
        {
            rescanButton.Invalidate();
        }

        private void RescanButton_MouseLeave(object? sender, EventArgs e)
        {
            rescanButton.Invalidate();
        }

        private static Image RecolorImage(Image sourceImage, Color newColor)
        {
            var newBitmap = new Bitmap(sourceImage.Width, sourceImage.Height);
            using (var g = Graphics.FromImage(newBitmap))
            {
                float r = newColor.R / 255f;
                float g_ = newColor.G / 255f;
                float b = newColor.B / 255f;
                var colorMatrix = new ColorMatrix(
                [
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0],
                    [0, 0, 0, 1, 0],
                    [r, g_, b, 0, 1]
                ]);
                using (var attributes = new ImageAttributes())
                {
                    attributes.SetColorMatrix(colorMatrix, ColorMatrixFlag.Default, ColorAdjustType.Bitmap);
                    g.DrawImage(sourceImage, new Rectangle(0, 0, sourceImage.Width, sourceImage.Height),
                                0, 0, sourceImage.Width, sourceImage.Height, GraphicsUnit.Pixel, attributes);
                }
            }
            return newBitmap;
        }

        private void OwnerDrawnButton_Paint(object? sender, PaintEventArgs e)
        {
            if (sender is not Button button) return;
            e.Graphics.Clear(this.BackColor);
            e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;
            e.Graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;

            Image? imageToDraw = null;
            if (button.Name == "lockdownButton")
            {
                imageToDraw = _mainViewModel.IsLockedDown ?
                              _lockedGreenIcon : ((_appSettings.Theme == "Dark") ? _unlockedWhiteIcon : appImageList.Images["unlocked.png"]);
            }
            else if (button.Name == "rescanButton")
            {
                if (_isRefreshingData)
                {
                    TextRenderer.DrawText(e.Graphics, "...", button.Font, button.ClientRectangle, button.ForeColor, TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter);
                    return;
                }
                imageToDraw = (_appSettings.Theme == "Dark") ?
                              _refreshWhiteIcon : appImageList.Images["refresh.png"];
            }

            if (imageToDraw != null)
            {
                int imgX = (button.ClientSize.Width - imageToDraw.Width) / 2;
                int imgY = (button.ClientSize.Height - imageToDraw.Height) / 2;
                e.Graphics.DrawImage(imageToDraw, imgX, imgY, imageToDraw.Width, imageToDraw.Height);
            }

            if (button.ClientRectangle.Contains(button.PointToClient(Cursor.Position)))
            {
                using var p = new Pen(dm.OScolors.Accent, 2);
                e.Graphics.DrawRectangle(p, 0, 0, button.Width - 1, button.Height - 1);
            }
        }
        #endregion
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/MainForm.Designer.cs
--------------------------------------------------------------------------------
﻿// File: MainForm.Designer.cs
namespace MinimalFirewall
{
    public partial class MainForm
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.NotifyIcon notifyIcon;
        private DarkModeForms.FlatTabControl mainTabControl;
        private System.Windows.Forms.TabPage dashboardTabPage;
        private System.Windows.Forms.TabPage rulesTabPage;
        private System.Windows.Forms.TabPage systemChangesTabPage;
        private System.Windows.Forms.TabPage settingsTabPage;
        private System.Windows.Forms.TabPage groupsTabPage;
        private System.Windows.Forms.TabPage liveConnectionsTabPage;
        private System.Windows.Forms.Button lockdownButton;
        private System.Windows.Forms.Button rescanButton;
        private System.Windows.Forms.ToolTip mainToolTip;
        private System.Windows.Forms.ImageList appImageList;
        private System.Windows.Forms.PictureBox logoPictureBox;
        private System.Windows.Forms.PictureBox arrowPictureBox;
        private System.Windows.Forms.Label instructionLabel;
        private System.Windows.Forms.ImageList appIconList;
        private DashboardControl dashboardControl1;
        private RulesControl rulesControl1;
        private AuditControl auditControl1;
        private GroupsControl groupsControl1;
        private LiveConnectionsControl liveConnectionsControl1;
        private SettingsControl settingsControl1;
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _autoRefreshTimer?.Dispose();
                _backgroundTaskService?.Dispose();
                _lockedGreenIcon?.Dispose();
                _unlockedWhiteIcon?.Dispose();
                _refreshWhiteIcon?.Dispose();
                _firewallSentryService?.Dispose();
                _eventListenerService?.Dispose();
                _defaultTrayIcon?.Dispose();
                _unlockedTrayIcon?.Dispose();
                _alertTrayIcon?.Dispose();
                dm?.Dispose();
                components?.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MainForm));
            this.mainTabControl = new DarkModeForms.FlatTabControl();
            this.dashboardTabPage = new System.Windows.Forms.TabPage();
            this.logoPictureBox = new System.Windows.Forms.PictureBox();
            this.arrowPictureBox = new System.Windows.Forms.PictureBox();
            this.instructionLabel = new System.Windows.Forms.Label();
            this.dashboardControl1 = new MinimalFirewall.DashboardControl();
            this.rulesTabPage = new System.Windows.Forms.TabPage();
            this.rulesControl1 = new MinimalFirewall.RulesControl();
            this.systemChangesTabPage = new System.Windows.Forms.TabPage();
            this.auditControl1 = new MinimalFirewall.AuditControl();
            this.groupsTabPage = new System.Windows.Forms.TabPage();
            this.groupsControl1 = new MinimalFirewall.GroupsControl();
            this.liveConnectionsTabPage = new System.Windows.Forms.TabPage();
            this.liveConnectionsControl1 = new MinimalFirewall.LiveConnectionsControl();
            this.settingsTabPage = new System.Windows.Forms.TabPage();
            this.settingsControl1 = new MinimalFirewall.SettingsControl();
            this.appImageList = new System.Windows.Forms.ImageList(this.components);
            this.lockdownButton = new System.Windows.Forms.Button();
            this.rescanButton = new System.Windows.Forms.Button();
            this.mainToolTip = new System.Windows.Forms.ToolTip(this.components);
            this.appIconList = new System.Windows.Forms.ImageList(this.components);
            this.mainTabControl.SuspendLayout();
            this.dashboardTabPage.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.logoPictureBox)).BeginInit();
            this.logoPictureBox.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.arrowPictureBox)).BeginInit();
            this.rulesTabPage.SuspendLayout();
            this.systemChangesTabPage.SuspendLayout();
            this.groupsTabPage.SuspendLayout();
            this.liveConnectionsTabPage.SuspendLayout();
            this.settingsTabPage.SuspendLayout();
            this.SuspendLayout();
            // 
            // mainTabControl
            // 
            this.mainTabControl.Alignment = System.Windows.Forms.TabAlignment.Left;
            this.mainTabControl.BorderColor = System.Drawing.SystemColors.ControlDark;
            this.mainTabControl.Controls.Add(this.dashboardTabPage);
            this.mainTabControl.Controls.Add(this.rulesTabPage);
            this.mainTabControl.Controls.Add(this.systemChangesTabPage);
            this.mainTabControl.Controls.Add(this.groupsTabPage);
            this.mainTabControl.Controls.Add(this.liveConnectionsTabPage);
            this.mainTabControl.Controls.Add(this.settingsTabPage);
            this.mainTabControl.Dock = System.Windows.Forms.DockStyle.Fill;
            this.mainTabControl.DrawMode = System.Windows.Forms.TabDrawMode.OwnerDrawFixed;
            this.mainTabControl.ImageList = this.appImageList;
            this.mainTabControl.ItemSize = new System.Drawing.Size(70, 120);
            this.mainTabControl.LineColor = System.Drawing.SystemColors.Highlight;
            this.mainTabControl.Location = new System.Drawing.Point(0, 0);
            this.mainTabControl.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.mainTabControl.Multiline = true;
            this.mainTabControl.Name = "mainTabControl";
            this.mainTabControl.SelectedForeColor = System.Drawing.SystemColors.HighlightText;
            this.mainTabControl.SelectedIndex = 0;
            this.mainTabControl.SelectTabColor = System.Drawing.SystemColors.ControlLight;
            this.mainTabControl.Size = new System.Drawing.Size(1143, 933);
            this.mainTabControl.SizeMode = System.Windows.Forms.TabSizeMode.Fixed;
            this.mainTabControl.TabColor = System.Drawing.SystemColors.ControlLight;
            this.mainTabControl.TabIndex = 0;
            this.mainTabControl.SelectedIndexChanged += new System.EventHandler(this.MainTabControl_SelectedIndexChanged);
            this.mainTabControl.Deselecting += new System.Windows.Forms.TabControlCancelEventHandler(this.MainTabControl_Deselecting);
            // 
            // dashboardTabPage
            // 
            this.dashboardTabPage.Controls.Add(this.logoPictureBox);
            this.dashboardTabPage.Controls.Add(this.dashboardControl1);
            this.dashboardTabPage.ImageIndex = 7;
            this.dashboardTabPage.Location = new System.Drawing.Point(124, 4);
            this.dashboardTabPage.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.dashboardTabPage.Name = "dashboardTabPage";
            this.dashboardTabPage.Padding = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.dashboardTabPage.Size = new System.Drawing.Size(1015, 925);
            this.dashboardTabPage.TabIndex = 0;
            this.dashboardTabPage.Text = "Dashboard";
            this.dashboardTabPage.UseVisualStyleBackColor = true;
            // 
            // logoPictureBox
            // 
            this.logoPictureBox.Controls.Add(this.arrowPictureBox);
            this.logoPictureBox.Controls.Add(this.instructionLabel);
            this.logoPictureBox.Dock = System.Windows.Forms.DockStyle.Fill;
            this.logoPictureBox.Location = new System.Drawing.Point(3, 4);
            this.logoPictureBox.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.logoPictureBox.Name = "logoPictureBox";
            this.logoPictureBox.Size = new System.Drawing.Size(1009, 917);
            this.logoPictureBox.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage;
            this.logoPictureBox.TabIndex = 1;
            this.logoPictureBox.TabStop = false;
            // 
            // arrowPictureBox
            // 
            this.arrowPictureBox.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.arrowPictureBox.BackColor = System.Drawing.Color.Transparent;
            this.arrowPictureBox.Location = new System.Drawing.Point(23, 829);
            this.arrowPictureBox.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.arrowPictureBox.Name = "arrowPictureBox";
            this.arrowPictureBox.Size = new System.Drawing.Size(69, 53);
            this.arrowPictureBox.TabIndex = 3;
            this.arrowPictureBox.TabStop = false;
            this.arrowPictureBox.Paint += new System.Windows.Forms.PaintEventHandler(this.ArrowPictureBox_Paint);
            // 
            // instructionLabel
            // 
            this.instructionLabel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.instructionLabel.AutoSize = true;
            this.instructionLabel.BackColor = System.Drawing.Color.Transparent;
            this.instructionLabel.Font = new System.Drawing.Font("Segoe UI", 9F);
            this.instructionLabel.Location = new System.Drawing.Point(23, 789);
            this.instructionLabel.Name = "instructionLabel";
            this.instructionLabel.Size = new System.Drawing.Size(304, 20);
            this.instructionLabel.TabIndex = 2;
            this.instructionLabel.Text = "Press the lock key to initiate firewall defense.";
            // 
            // dashboardControl1
            // 
            this.dashboardControl1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.dashboardControl1.Location = new System.Drawing.Point(3, 4);
            this.dashboardControl1.Name = "dashboardControl1";
            this.dashboardControl1.Size = new System.Drawing.Size(1009, 917);
            this.dashboardControl1.TabIndex = 2;
            // 
            // rulesTabPage
            // 
            this.rulesTabPage.Controls.Add(this.rulesControl1);
            this.rulesTabPage.ImageIndex = 5;
            this.rulesTabPage.Location = new System.Drawing.Point(124, 4);
            this.rulesTabPage.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.rulesTabPage.Name = "rulesTabPage";
            this.rulesTabPage.Padding = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.rulesTabPage.Size = new System.Drawing.Size(1015, 925);
            this.rulesTabPage.TabIndex = 1;
            this.rulesTabPage.Text = "Rules";
            this.rulesTabPage.UseVisualStyleBackColor = true;
            // 
            // rulesControl1
            // 
            this.rulesControl1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.rulesControl1.Location = new System.Drawing.Point(3, 4);
            this.rulesControl1.Name = "rulesControl1";
            this.rulesControl1.Size = new System.Drawing.Size(1009, 917);
            this.rulesControl1.TabIndex = 0;
            // 
            // systemChangesTabPage
            // 
            this.systemChangesTabPage.Controls.Add(this.auditControl1);
            this.systemChangesTabPage.ImageIndex = 3;
            this.systemChangesTabPage.Location = new System.Drawing.Point(124, 4);
            this.systemChangesTabPage.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.systemChangesTabPage.Name = "systemChangesTabPage";
            this.systemChangesTabPage.Size = new System.Drawing.Size(1015, 925);
            this.systemChangesTabPage.TabIndex = 2;
            this.systemChangesTabPage.Text = "Audit";
            this.systemChangesTabPage.UseVisualStyleBackColor = true;
            // 
            // auditControl1
            // 
            this.auditControl1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.auditControl1.Location = new System.Drawing.Point(0, 0);
            this.auditControl1.Name = "auditControl1";
            this.auditControl1.Size = new System.Drawing.Size(1015, 925);
            this.auditControl1.TabIndex = 0;
            // 
            // groupsTabPage
            // 
            this.groupsTabPage.Controls.Add(this.groupsControl1);
            this.groupsTabPage.ImageIndex = 5;
            this.groupsTabPage.Location = new System.Drawing.Point(124, 4);
            this.groupsTabPage.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.groupsTabPage.Name = "groupsTabPage";
            this.groupsTabPage.Padding = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.groupsTabPage.Size = new System.Drawing.Size(1015, 925);
            this.groupsTabPage.TabIndex = 5;
            this.groupsTabPage.Text = "Groups";
            this.groupsTabPage.UseVisualStyleBackColor = true;
            // 
            // groupsControl1
            // 
            this.groupsControl1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.groupsControl1.Location = new System.Drawing.Point(3, 4);
            this.groupsControl1.Name = "groupsControl1";
            this.groupsControl1.Size = new System.Drawing.Size(1009, 917);
            this.groupsControl1.TabIndex = 0;
            // 
            // liveConnectionsTabPage
            // 
            this.liveConnectionsTabPage.Controls.Add(this.liveConnectionsControl1);
            this.liveConnectionsTabPage.ImageIndex = 10;
            this.liveConnectionsTabPage.Location = new System.Drawing.Point(124, 4);
            this.liveConnectionsTabPage.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.liveConnectionsTabPage.Name = "liveConnectionsTabPage";
            this.liveConnectionsTabPage.Padding = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.liveConnectionsTabPage.Size = new System.Drawing.Size(1015, 925);
            this.liveConnectionsTabPage.TabIndex = 6;
            this.liveConnectionsTabPage.Text = "Live Connections";
            this.liveConnectionsTabPage.UseVisualStyleBackColor = true;
            // 
            // liveConnectionsControl1
            // 
            this.liveConnectionsControl1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.liveConnectionsControl1.Location = new System.Drawing.Point(3, 4);
            this.liveConnectionsControl1.Name = "liveConnectionsControl1";
            this.liveConnectionsControl1.Size = new System.Drawing.Size(1009, 917);
            this.liveConnectionsControl1.TabIndex = 0;
            // 
            // settingsTabPage
            // 
            this.settingsTabPage.Controls.Add(this.settingsControl1);
            this.settingsTabPage.ImageIndex = 6;
            this.settingsTabPage.Location = new System.Drawing.Point(124, 4);
            this.settingsTabPage.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.settingsTabPage.Name = "settingsTabPage";
            this.settingsTabPage.Size = new System.Drawing.Size(1015, 925);
            this.settingsTabPage.TabIndex = 4;
            this.settingsTabPage.Text = "Settings";
            this.settingsTabPage.UseVisualStyleBackColor = true;
            // 
            // settingsControl1
            // 
            this.settingsControl1.Dock = System.Windows.Forms.DockStyle.Fill;
            this.settingsControl1.Location = new System.Drawing.Point(0, 0);
            this.settingsControl1.Name = "settingsControl1";
            this.settingsControl1.Size = new System.Drawing.Size(1015, 925);
            this.settingsControl1.TabIndex = 0;
            // 
            // appImageList
            // 
            this.appImageList.ColorDepth = System.Windows.Forms.ColorDepth.Depth32Bit;
            this.appImageList.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("appImageList.ImageStream")));
            this.appImageList.TransparentColor = System.Drawing.Color.Transparent;
            this.appImageList.Images.SetKeyName(0, "coffee.png");
            this.appImageList.Images.SetKeyName(1, "refresh.png");
            this.appImageList.Images.SetKeyName(2, "rules.png");
            this.appImageList.Images.SetKeyName(3, "system_changes.png");
            this.appImageList.Images.SetKeyName(4, "locked.png");
            this.appImageList.Images.SetKeyName(5, "advanced.png");
            this.appImageList.Images.SetKeyName(6, "settings.png");
            this.appImageList.Images.SetKeyName(7, "dashboard.png");
            this.appImageList.Images.SetKeyName(8, "unlocked.png");
            this.appImageList.Images.SetKeyName(9, "logo.png");
            this.appImageList.Images.SetKeyName(10, "antenna.png");
            // 
            // lockdownButton
            // 
            this.lockdownButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.lockdownButton.BackColor = System.Drawing.Color.Transparent;
            this.lockdownButton.FlatAppearance.BorderColor = System.Drawing.SystemColors.Control;
            this.lockdownButton.FlatAppearance.BorderSize = 2;
            this.lockdownButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.lockdownButton.Location = new System.Drawing.Point(74, 869);
            this.lockdownButton.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.lockdownButton.Name = "lockdownButton";
            this.lockdownButton.Size = new System.Drawing.Size(46, 48);
            this.lockdownButton.TabIndex = 3;
            this.lockdownButton.UseVisualStyleBackColor = false;
            this.lockdownButton.Click += new System.EventHandler(this.ToggleLockdownButton_Click);
            this.lockdownButton.MouseEnter += new System.EventHandler(this.LockdownButton_MouseEnter);
            this.lockdownButton.MouseLeave += new System.EventHandler(this.LockdownButton_MouseLeave);
            // 
            // rescanButton
            // 
            this.rescanButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.rescanButton.BackColor = System.Drawing.Color.Transparent;
            this.rescanButton.FlatAppearance.BorderColor = System.Drawing.SystemColors.Control;
            this.rescanButton.FlatAppearance.BorderSize = 2;
            this.rescanButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.rescanButton.Location = new System.Drawing.Point(17, 869);
            this.rescanButton.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.rescanButton.Name = "rescanButton";
            this.rescanButton.Size = new System.Drawing.Size(46, 48);
            this.rescanButton.TabIndex = 1;
            this.rescanButton.UseVisualStyleBackColor = false;
            this.rescanButton.Click += new System.EventHandler(this.RescanButton_Click);
            this.rescanButton.MouseEnter += new System.EventHandler(this.RescanButton_MouseEnter);
            this.rescanButton.MouseLeave += new System.EventHandler(this.RescanButton_MouseLeave);
            // 
            // appIconList
            // 
            this.appIconList.ColorDepth = System.Windows.Forms.ColorDepth.Depth32Bit;
            this.appIconList.ImageSize = new System.Drawing.Size(32, 32);
            this.appIconList.TransparentColor = System.Drawing.Color.Transparent;
            // 
            // MainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 20F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(1143, 933);
            this.Controls.Add(this.rescanButton);
            this.Controls.Add(this.lockdownButton);
            this.Controls.Add(this.mainTabControl);
            this.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.Name = "MainForm";
            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.MainForm_FormClosing);
            this.mainTabControl.ResumeLayout(false);
            this.dashboardTabPage.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.logoPictureBox)).EndInit();
            this.logoPictureBox.ResumeLayout(false);
            this.logoPictureBox.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.arrowPictureBox)).EndInit();
            this.rulesTabPage.ResumeLayout(false);
            this.systemChangesTabPage.ResumeLayout(false);
            this.groupsTabPage.ResumeLayout(false);
            this.liveConnectionsTabPage.ResumeLayout(false);
            this.settingsTabPage.ResumeLayout(false);
            this.ResumeLayout(false);

        }
        #endregion
    }
}


--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/MainViewModel.cs
--------------------------------------------------------------------------------
﻿using System.Collections.ObjectModel;
using System.Linq;
using System.Windows.Forms;
using MinimalFirewall.TypedObjects;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Threading;
using Firewall.Traffic.ViewModels;
using System.Diagnostics;
using System.IO;
namespace MinimalFirewall
{
    public class MainViewModel : ObservableViewModel
    {
        private readonly FirewallRuleService _firewallRuleService;
        private readonly WildcardRuleService _wildcardRuleService;
        private readonly BackgroundFirewallTaskService _backgroundTaskService;
        private readonly FirewallDataService _dataService;
        private readonly FirewallSentryService _firewallSentryService;
        private readonly ForeignRuleTracker _foreignRuleTracker;
        private readonly FirewallEventListenerService _eventListenerService;
        private readonly AppSettings _appSettings;
        private readonly UserActivityLogger _activityLogger;
        private System.Threading.Timer? _sentryRefreshDebounceTimer;

        public TrafficMonitorViewModel TrafficMonitorViewModel { get; }
        public ObservableCollection<PendingConnectionViewModel> PendingConnections { get; } = new();
        public List<AggregatedRuleViewModel> AllAggregatedRules { get; private set; } = [];
        public List<AggregatedRuleViewModel> VirtualRulesData { get; private set; } = [];
        public List<FirewallRuleChange> SystemChanges { get; private set; } = [];
        public int UnseenSystemChangesCount => SystemChanges.Count;
        public event Action? RulesListUpdated;
        public event Action? SystemChangesUpdated;
        public event Action<PendingConnectionViewModel>? PopupRequired;
        public event Action<PendingConnectionViewModel>? DashboardActionProcessed;
        public MainViewModel(
            FirewallRuleService firewallRuleService,
            WildcardRuleService wildcardRuleService,
            BackgroundFirewallTaskService backgroundTaskService,
            FirewallDataService dataService,
            FirewallSentryService firewallSentryService,
            ForeignRuleTracker foreignRuleTracker,
            TrafficMonitorViewModel trafficMonitorViewModel,
            FirewallEventListenerService eventListenerService,
            AppSettings appSettings,
            UserActivityLogger activityLogger)
        {
            _firewallRuleService = firewallRuleService;
            _wildcardRuleService = wildcardRuleService;
            _backgroundTaskService = backgroundTaskService;
            _dataService = dataService;
            _firewallSentryService = firewallSentryService;
            _foreignRuleTracker = foreignRuleTracker;
            TrafficMonitorViewModel = trafficMonitorViewModel;
            _eventListenerService = eventListenerService;
            _appSettings = appSettings;
            _activityLogger = activityLogger;

            _sentryRefreshDebounceTimer = new System.Threading.Timer(DebouncedSentryRefresh, null, Timeout.Infinite, Timeout.Infinite);

            _firewallSentryService.RuleSetChanged += OnRuleSetChanged;
            _eventListenerService.PendingConnectionDetected += OnPendingConnectionDetected;
        }

        public bool IsLockedDown => _firewallRuleService.GetDefaultOutboundAction() == NetFwTypeLib.NET_FW_ACTION_.NET_FW_ACTION_BLOCK;
        public void ClearRulesCache()
        {
            _dataService.ClearCaches();
        }

        public void ClearRulesData()
        {
            ClearRulesCache();
            AllAggregatedRules.Clear();
            VirtualRulesData.Clear();
            RulesListUpdated?.Invoke();
        }

        public async Task RefreshRulesDataAsync(CancellationToken token, IProgress<int>? progress = null)
        {
            AllAggregatedRules = await _dataService.GetAggregatedRulesAsync(token, progress);
        }

        public void ApplyRulesFilters(string searchText, HashSet<RuleType> enabledTypes, int sortColumn, SortOrder sortOrder, bool showSystemRules)
        {
            IEnumerable<AggregatedRuleViewModel> filteredRules = AllAggregatedRules;
            if (!showSystemRules)
            {
                filteredRules = filteredRules.Where(r => r.Grouping.EndsWith(" - MFW"));
            }

            if (enabledTypes.Count > 0 && enabledTypes.Count < 5)
            {
                filteredRules = filteredRules.Where(r => enabledTypes.Contains(r.Type));
            }

            if (!string.IsNullOrWhiteSpace(searchText))
            {
                filteredRules = filteredRules.Where(r =>
                    r.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    r.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                    r.ApplicationName.Contains(searchText, StringComparison.OrdinalIgnoreCase));
            }

            if (sortOrder != SortOrder.None && sortColumn != -1)
            {
                Func<AggregatedRuleViewModel, object> keySelector = GetRuleKeySelector(sortColumn);
                if (sortOrder == SortOrder.Ascending)
                {
                    filteredRules = filteredRules.OrderBy(keySelector);
                }
                else
                {
                    filteredRules = filteredRules.OrderByDescending(keySelector);
                }
            }

            VirtualRulesData = filteredRules.ToList();
            RulesListUpdated?.Invoke();
        }

        private Func<AggregatedRuleViewModel, object> GetRuleKeySelector(int columnIndex)
        {
            return columnIndex switch
            {
                2 => rule => rule.InboundStatus,
                3 => rule => rule.OutboundStatus,
                4 => rule => rule.ProtocolName,
                5 => rule => rule.LocalPorts,
                6 => rule => rule.RemotePorts,
                7 => rule => rule.LocalAddresses,
                8 => rule => rule.RemoteAddresses,
                9 => rule => rule.ApplicationName,
                10 => rule => rule.ServiceName,
                11 => rule => rule.Profiles,
                12 => rule => rule.Grouping,
                13 => rule => rule.Description,
                _ => rule => rule.Name,
            };
        }

        public void AddPendingConnection(PendingConnectionViewModel pending)
        {
            var matchingRule = _wildcardRuleService.Match(pending.AppPath);
            if (matchingRule != null)
            {
                if (matchingRule.Action.StartsWith("Allow", StringComparison.OrdinalIgnoreCase))
                {
                    var payload = new ApplyApplicationRulePayload
                    {
                        AppPaths = [pending.AppPath],
                        Action = matchingRule.Action,
                        WildcardSourcePath = matchingRule.FolderPath
                    };
                    _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.ApplyApplicationRule, payload));
                    return;
                }
                if (matchingRule.Action.StartsWith("Block", StringComparison.OrdinalIgnoreCase))
                {
                    return;
                }
            }

            bool alreadyPending = PendingConnections.Any(p => p.AppPath.Equals(pending.AppPath, StringComparison.OrdinalIgnoreCase));
            if (!alreadyPending)
            {
                PendingConnections.Add(pending);
            }
        }

        public void ProcessDashboardAction(PendingConnectionViewModel pending, string decision, bool trustPublisher = false)
        {
            var payload = new ProcessPendingConnectionPayload { PendingConnection = pending, Decision = decision, TrustPublisher = trustPublisher };
            _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.ProcessPendingConnection, payload));
            PendingConnections.Remove(pending);

            if (decision == "Allow" || decision == "Block")
            {
                string action = $"{decision} ({pending.Direction})";
                FirewallActionsService.ParseActionString(action, out Actions parsedAction, out Directions parsedDirection);

                var newAggregatedRule = new AggregatedRuleViewModel
                {
                    Name = pending.FileName,
                    ApplicationName = pending.AppPath,
                    InboundStatus = parsedDirection == Directions.Incoming ? parsedAction.ToString() : "N/A",
                    OutboundStatus = parsedDirection == Directions.Outgoing ? parsedAction.ToString() : "N/A",
                    Type = RuleType.Program,
                    IsEnabled = true,
                    Grouping = MFWConstants.MainRuleGroup,
                    Profiles = "All",
                    ProtocolName = "Any"
                };
                AllAggregatedRules.Add(newAggregatedRule);
                ApplyRulesFilters(string.Empty, new HashSet<RuleType>(), -1, SortOrder.None, false);
            }

            DashboardActionProcessed?.Invoke(pending);
        }

        public void ProcessTemporaryDashboardAction(PendingConnectionViewModel pending, string decision, TimeSpan duration)
        {
            var payload = new ProcessPendingConnectionPayload { PendingConnection = pending, Decision = decision, Duration = duration };
            _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.ProcessPendingConnection, payload));
            PendingConnections.Remove(pending);
            DashboardActionProcessed?.Invoke(pending);
        }

        public async Task ScanForSystemChangesAsync(CancellationToken token, IProgress<int>? progress = null)
        {
            var newChanges = await Task.Run(() => _firewallSentryService.CheckForChanges(_foreignRuleTracker, progress, token), token);
            if (token.IsCancellationRequested) return;

            SystemChanges.Clear();
            SystemChanges.AddRange(newChanges);
            SystemChangesUpdated?.Invoke();
        }

        public async Task RebuildBaselineAsync()
        {
            _foreignRuleTracker.Clear();
            await ScanForSystemChangesAsync(CancellationToken.None);
        }

        public void AcceptForeignRule(FirewallRuleChange change)
        {
            if (change.Rule?.Name is not null)
            {
                var payload = new ForeignRuleChangePayload { Change = change };
                _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.AcceptForeignRule, payload));
                SystemChanges.Remove(change);
                SystemChangesUpdated?.Invoke();
            }
        }

        public void DeleteForeignRule(FirewallRuleChange change)
        {
            if (change.Rule?.Name is not null)
            {
                var payload = new ForeignRuleChangePayload { Change = change };
                _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.DeleteForeignRule, payload));
                SystemChanges.Remove(change);
                SystemChangesUpdated?.Invoke();
            }
        }

        public void AcceptAllForeignRules()
        {
            if (SystemChanges.Count == 0) return;
            var payload = new AllForeignRuleChangesPayload { Changes = new List<FirewallRuleChange>(SystemChanges) };
            _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.AcceptAllForeignRules, payload));
            SystemChanges.Clear();
            SystemChangesUpdated?.Invoke();
        }

        public void ApplyRuleChange(AggregatedRuleViewModel item, string action)
        {
            var firstRule = item.UnderlyingRules.FirstOrDefault();
            if (firstRule == null) return;

            switch (firstRule.Type)
            {
                case RuleType.Program:
                    var appPayload = new ApplyApplicationRulePayload { AppPaths = [firstRule.ApplicationName], Action = action };
                    _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.ApplyApplicationRule, appPayload));
                    break;
                case RuleType.Service:
                    var servicePayload = new ApplyServiceRulePayload { ServiceName = firstRule.ServiceName, Action = action };
                    _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.ApplyServiceRule, servicePayload));
                    break;
                case RuleType.UWP:
                    if (firstRule.Description.Contains(MFWConstants.UwpDescriptionPrefix))
                    {
                        var pfn = firstRule.Description.Replace(MFWConstants.UwpDescriptionPrefix, "");
                        var uwpApp = new UwpApp { Name = item.Name, PackageFamilyName = pfn };
                        var uwpPayload = new ApplyUwpRulePayload { UwpApps = [uwpApp], Action = action };
                        _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.ApplyUwpRule, uwpPayload));
                    }
                    break;
            }

            FirewallActionsService.ParseActionString(action, out Actions parsedAction, out Directions parsedDirection);
            var ruleToUpdate = AllAggregatedRules.FirstOrDefault(r => r == item);
            if (ruleToUpdate != null)
            {
                if (parsedDirection.HasFlag(Directions.Incoming)) ruleToUpdate.InboundStatus = parsedAction.ToString();
                if (parsedDirection.HasFlag(Directions.Outgoing)) ruleToUpdate.OutboundStatus = parsedAction.ToString();
            }
            RulesListUpdated?.Invoke();
        }

        public void DeleteRules(List<AggregatedRuleViewModel> rulesToDelete)
        {
            var wildcardRulesToDelete = rulesToDelete
                .Where(i => i.Type == RuleType.Wildcard && i.WildcardDefinition != null)
                .Select(i => i.WildcardDefinition!)
                .ToList();
            var standardRuleNamesToDelete = rulesToDelete
                .Where(i => i.Type != RuleType.Wildcard)
                .SelectMany(i => i.UnderlyingRules.Select(r => r.Name))
                .ToList();
            foreach (var wildcardRule in wildcardRulesToDelete)
            {
                var payload = new DeleteWildcardRulePayload { Wildcard = wildcardRule };
                _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.DeleteWildcardRules, payload));
                _wildcardRuleService.RemoveRule(wildcardRule);
            }

            if (standardRuleNamesToDelete.Any())
            {
                var payload = new DeleteRulesPayload { RuleIdentifiers = standardRuleNamesToDelete };
                _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.DeleteAdvancedRules, payload));
            }

            AllAggregatedRules.RemoveAll(rulesToDelete.Contains);
        }

        public AggregatedRuleViewModel CreateAggregatedRuleFromAdvancedRule(AdvancedRuleViewModel advancedRule)
        {
            return new AggregatedRuleViewModel
            {
                Name = advancedRule.Name,
                ApplicationName = advancedRule.ApplicationName,
                ServiceName = advancedRule.ServiceName,
                Description = advancedRule.Description,
                Grouping = advancedRule.Grouping,
                IsEnabled = advancedRule.IsEnabled,
                InboundStatus = advancedRule.Direction.HasFlag(Directions.Incoming) ? advancedRule.Status : "N/A",
                OutboundStatus = advancedRule.Direction.HasFlag(Directions.Outgoing) ? advancedRule.Status : "N/A",
                ProtocolName = advancedRule.ProtocolName,
                LocalPorts = advancedRule.LocalPorts,
                RemotePorts = advancedRule.RemotePorts,
                LocalAddresses = advancedRule.LocalAddresses,
                RemoteAddresses = advancedRule.RemoteAddresses,
                Profiles = advancedRule.Profiles,
                Type = advancedRule.Type,
                UnderlyingRules = new List<AdvancedRuleViewModel> { advancedRule }
            };
        }


        public void CreateAdvancedRule(AdvancedRuleViewModel vm, string interfaceTypes, string icmpTypesAndCodes)
        {
            var payload = new CreateAdvancedRulePayload { ViewModel = vm, InterfaceTypes = interfaceTypes, IcmpTypesAndCodes = icmpTypesAndCodes };
            _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.CreateAdvancedRule, payload));

            var newAggregatedRule = new AggregatedRuleViewModel
            {
                Name = vm.Name,
                ApplicationName = vm.ApplicationName,
                ServiceName = vm.ServiceName,
                Description = vm.Description,
                Grouping = vm.Grouping,
                IsEnabled = vm.IsEnabled,
                InboundStatus = vm.Direction.HasFlag(Directions.Incoming) ? vm.Status : "N/A",
                OutboundStatus = vm.Direction.HasFlag(Directions.Outgoing) ? vm.Status : "N/A",
                ProtocolName = vm.ProtocolName,
                LocalPorts = vm.LocalPorts,
                RemotePorts = vm.RemotePorts,
                LocalAddresses = vm.LocalAddresses,
                RemoteAddresses = vm.RemoteAddresses,
                Profiles = vm.Profiles,
                Type = vm.Type,
                UnderlyingRules = [vm]
            };
            AllAggregatedRules.Add(newAggregatedRule);
            ApplyRulesFilters(string.Empty, new HashSet<RuleType>(), -1, SortOrder.None, false);
        }

        public void CreateProgramRule(string appPath, string action)
        {
            FirewallActionsService.ParseActionString(action, out Actions parsedAction, out Directions parsedDirection);
            var newAggregatedRule = new AggregatedRuleViewModel
            {
                Name = Path.GetFileName(appPath),
                ApplicationName = appPath,
                InboundStatus = parsedDirection.HasFlag(Directions.Incoming) ? parsedAction.ToString() : "N/A",
                OutboundStatus = parsedDirection.HasFlag(Directions.Outgoing) ? parsedAction.ToString() : "N/A",
                Type = RuleType.Program,
                IsEnabled = true,
                Grouping = MFWConstants.MainRuleGroup,
                Profiles = "All",
                ProtocolName = "Any",
                LocalPorts = "Any",
                RemotePorts = "Any",
                LocalAddresses = "Any",
                RemoteAddresses = "Any",
                Description = "N/A",
                ServiceName = "N/A"
            };
            AllAggregatedRules.Add(newAggregatedRule);
            ApplyRulesFilters(string.Empty, new HashSet<RuleType>(), -1, SortOrder.None, false);
            var payload = new ApplyApplicationRulePayload { AppPaths = { appPath }, Action = action };
            _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.ApplyApplicationRule, payload));
        }

        private void OnRuleSetChanged()
        {
            ClearRulesCache();
            if (!_appSettings.AlertOnForeignRules)
            {
                return;
            }

            _sentryRefreshDebounceTimer?.Change(1000, Timeout.Infinite);
        }

        private async void DebouncedSentryRefresh(object? state)
        {
            _activityLogger.LogDebug("Sentry: Debounce timer elapsed. Checking for foreign rules.");
            await ScanForSystemChangesAsync(CancellationToken.None);
        }

        private void OnPendingConnectionDetected(PendingConnectionViewModel pending)
        {
            bool alreadyPending = PendingConnections.Any(p => p.AppPath.Equals(pending.AppPath, StringComparison.OrdinalIgnoreCase) && p.Direction.Equals(pending.Direction, StringComparison.OrdinalIgnoreCase));
            if (alreadyPending)
            {
                _activityLogger.LogDebug($"Ignoring duplicate pending connection for {pending.AppPath} (already in dashboard list)");
                return;
            }

            AddPendingConnection(pending);
            if (_appSettings.IsPopupsEnabled)
            {
                PopupRequired?.Invoke(pending);
            }
        }

        public void ProcessSpecificAllow(PendingConnectionViewModel pending)
        {
            var vm = new AdvancedRuleViewModel
            {
                Name = $"Allow {pending.FileName} - {pending.RemoteAddress}:{pending.RemotePort}",
                Description = "Granular rule created by Minimal Firewall popup.",
                IsEnabled = true,
                Grouping = MFWConstants.MainRuleGroup,
                Status = "Allow",
                Direction = pending.Direction.Equals("Incoming", StringComparison.OrdinalIgnoreCase) ? Directions.Incoming : Directions.Outgoing,
                Protocol = int.TryParse(pending.Protocol, out int proto) ? proto : 256,
                ApplicationName = pending.AppPath,
                RemotePorts = pending.RemotePort,
                RemoteAddresses = pending.RemoteAddress,
                LocalPorts = "*",
                LocalAddresses = "*",
                Profiles = "All",
                Type = RuleType.Advanced
            };
            var advPayload = new CreateAdvancedRulePayload { ViewModel = vm, InterfaceTypes = "All", IcmpTypesAndCodes = "" };
            _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.CreateAdvancedRule, advPayload));
            var newAggregatedRule = new AggregatedRuleViewModel
            {
                Name = vm.Name,
                ApplicationName = vm.ApplicationName,
                Description = vm.Description,
                Grouping = vm.Grouping,
                IsEnabled = vm.IsEnabled,
                InboundStatus = vm.Direction.HasFlag(Directions.Incoming) ? vm.Status : "N/A",
                OutboundStatus = vm.Direction.HasFlag(Directions.Outgoing) ? vm.Status : "N/A",
                ProtocolName = vm.ProtocolName,
                LocalPorts = vm.LocalPorts,
                RemotePorts = vm.RemotePorts,
                LocalAddresses = vm.LocalAddresses,
                RemoteAddresses = vm.RemoteAddresses,
                Profiles = vm.Profiles,
                Type = vm.Type,
                UnderlyingRules = new List<AdvancedRuleViewModel> { vm }
            };
            AllAggregatedRules.Add(newAggregatedRule);
            ApplyRulesFilters(string.Empty, new HashSet<RuleType>(), -1, SortOrder.None, false);

            DashboardActionProcessed?.Invoke(pending);
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/ManagePublishersForm.cs
--------------------------------------------------------------------------------
﻿// File: ManagePublishersForm.cs
using DarkModeForms;

namespace MinimalFirewall
{
    public partial class ManagePublishersForm : Form
    {
        private readonly PublisherWhitelistService _whitelistService;
        private readonly DarkModeCS dm;

        public ManagePublishersForm(PublisherWhitelistService whitelistService)
        {
            InitializeComponent();
            dm = new DarkModeCS(this);
            _whitelistService = whitelistService;
            LoadPublishers();
        }

        private void LoadPublishers()
        {
            publishersListBox.Items.Clear();
            var publishers = _whitelistService.GetTrustedPublishers();
            foreach (var publisher in publishers)
            {
                publishersListBox.Items.Add(publisher);
            }
        }

        private void removeButton_Click(object sender, EventArgs e)
        {
            if (publishersListBox.SelectedItem is string selectedPublisher)
            {
                var result = MessageBox.Show($"Are you sure you want to remove '{selectedPublisher}' from the trusted list?", "Confirm Removal", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (result == DialogResult.Yes)
                {
                    _whitelistService.Remove(selectedPublisher);
                    LoadPublishers();
                }
            }
        }

        private void closeButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/ManagePublishersForm.Designer.cs
--------------------------------------------------------------------------------
﻿// File: ManagePublishersForm.Designer.cs
namespace MinimalFirewall
{
    partial class ManagePublishersForm
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.ListBox publishersListBox;
        private System.Windows.Forms.Button removeButton;
        private System.Windows.Forms.Button closeButton;
        private System.Windows.Forms.Label infoLabel;
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        private void InitializeComponent()
        {
            this.publishersListBox = new System.Windows.Forms.ListBox();
            this.removeButton = new System.Windows.Forms.Button();
            this.closeButton = new System.Windows.Forms.Button();
            this.infoLabel = new System.Windows.Forms.Label();
            this.SuspendLayout();

            this.publishersListBox.FormattingEnabled = true;
            this.publishersListBox.ItemHeight = 15;
            this.publishersListBox.Location = new System.Drawing.Point(12, 35);
            this.publishersListBox.Name = "publishersListBox";
            this.publishersListBox.Size = new System.Drawing.Size(460, 199);
            this.publishersListBox.TabIndex = 0;

            this.removeButton.Location = new System.Drawing.Point(12, 240);
            this.removeButton.Name = "removeButton";
            this.removeButton.Size = new System.Drawing.Size(120, 29);
            this.removeButton.TabIndex = 1;
            this.removeButton.Text = "Remove Selected";
            this.removeButton.UseVisualStyleBackColor = true;
            this.removeButton.Click += new System.EventHandler(this.removeButton_Click);

            this.closeButton.Location = new System.Drawing.Point(397, 240);
            this.closeButton.Name = "closeButton";
            this.closeButton.Size = new System.Drawing.Size(75, 29);
            this.closeButton.TabIndex = 2;
            this.closeButton.Text = "Close";
            this.closeButton.UseVisualStyleBackColor = true;
            this.closeButton.Click += new System.EventHandler(this.closeButton_Click);

            this.infoLabel.AutoSize = true;
            this.infoLabel.Location = new System.Drawing.Point(12, 9);
            this.infoLabel.Name = "infoLabel";
            this.infoLabel.Size = new System.Drawing.Size(262, 15);
            this.infoLabel.TabIndex = 3;
            this.infoLabel.Text = "Applications from these publishers will be allowed automatically.";

            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(484, 281);
            this.Controls.Add(this.infoLabel);
            this.Controls.Add(this.closeButton);
            this.Controls.Add(this.removeButton);
            this.Controls.Add(this.publishersListBox);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "ManagePublishersForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = "Manage Trusted Publishers";
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        #endregion
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/Messenger.cs
--------------------------------------------------------------------------------
﻿// Messenger.cs
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using static DarkModeForms.KeyValue;
using Timer = System.Windows.Forms.Timer;

namespace DarkModeForms
{
    public static class Messenger
    {
        #region Events
        private static Action<object, ValidateEventArgs>?
        ValidateControlsHandler;

        public static event Action<object, ValidateEventArgs>? ValidateControls
        {
            add => ValidateControlsHandler += value;
            remove => ValidateControlsHandler -= value;
        }

        private static void ResetEvents()
        {
            ValidateControlsHandler = null;
        }

        #endregion Events

        #region MessageBox

        private static MessageBoxDefaultButton _defaultButton = MessageBoxDefaultButton.Button1;
        public static DialogResult MessageBox(string Message)
            => MessageBox(Message, string.Empty, MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
        public static DialogResult MessageBox(Exception ex, bool ShowTrace = true) =>
            MessageBox(ex.Message + (ShowTrace ? "\r\n" + ex.StackTrace : ""), "Error!", icon: MessageBoxIcon.Error);
        public static DialogResult MessageBox(
            string Message, string title, MessageBoxButtons buttons = MessageBoxButtons.OK,
            MessageBoxIcon icon = MessageBoxIcon.Information, bool pIsDarkMode = true)
        {
            MsgIcon msgIcon = MsgIcon.None;
            switch (icon)
            {
                case MessageBoxIcon.Information:
                    msgIcon = MsgIcon.Info;
                    break;
                case MessageBoxIcon.Exclamation:
                    msgIcon = MsgIcon.Warning; break;
                case MessageBoxIcon.Question:
                    msgIcon = MsgIcon.Question; break;
                case MessageBoxIcon.Error:
                    msgIcon = MsgIcon.Error; break;
                case MessageBoxIcon.None:
                default:
                    break;
            }

            return MessageBox(Message, title, msgIcon, buttons, pIsDarkMode);
        }


        public static DialogResult MessageBox(string Message, string title, MessageBoxButtons buttons,
            MessageBoxIcon icon, MessageBoxDefaultButton DefaultButton, bool pIsDarkMode = true)
        {
            _defaultButton = DefaultButton;
            return MessageBox(Message, title, buttons, icon, pIsDarkMode);
        }

        public static DialogResult MessageBox(string Message, string title, MessageBoxButtons buttons = MessageBoxButtons.OK,
                                              MsgIcon icon = MsgIcon.None, bool pIsDarkMode = true)
        {
            return MessageBox(Message, title,
            icon, buttons, pIsDarkMode, owner: null);
        }

        public static DialogResult MessageBox(Form pOwner, string Message, string title,
            MessageBoxButtons buttons, MsgIcon icon = MsgIcon.None, bool pIsDarkMode = true)
        {
            return MessageBox(Message, title, icon, buttons, pIsDarkMode, owner: pOwner);
        }

        public static DialogResult MessageBox(
            string Message, string title, MsgIcon icon,
            MessageBoxButtons buttons = MessageBoxButtons.OK, bool pIsDarkMode = true,
            MessageBoxDefaultButton defaultButton = MessageBoxDefaultButton.Button1, Form? owner = null)
        {
            Form form = new Form
            {
                FormBorderStyle = FormBorderStyle.FixedDialog,
                StartPosition = FormStartPosition.CenterParent,
                MaximizeBox = false,
                MinimizeBox = false,
                Text = title,
                Width = 340,
                Height = 170,
                KeyPreview = true,
            };
            if (owner != null)
            {
                form.Owner = owner;
            }

            DarkModeCS DMode = new DarkModeCS(form)
            {
                ColorMode = pIsDarkMode ?
            DarkModeCS.DisplayMode.DarkMode : DarkModeCS.DisplayMode.ClearMode
            };
            DMode.ApplyTheme(pIsDarkMode);

            Base64Icons _Icons = new Base64Icons();

            Font systemFont = SystemFonts.DefaultFont;
            int fontHeight = systemFont.Height;
            #region Bottom Panel & Buttons

            Panel bottomPanel = new Panel
            {
                Dock = DockStyle.Bottom,
                Height = 48,
                BackColor = DMode.OScolors.Surface,
                ForeColor = DMode.OScolors.TextActive
            };
            form.Controls.Add(bottomPanel);
            string CurrentLanguage = GetCurrentLanguage();
            var ButtonTranslations = GetButtonTranslations(CurrentLanguage);


            List<Button> CmdButtons = new List<Button>();
            switch (buttons)
            {
                case MessageBoxButtons.OK:
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.OK,
                        Text = ButtonTranslations["OK"],
                        Height = fontHeight + 10,
                        FlatStyle = FlatStyle.System
                    });
                    form.AcceptButton = CmdButtons[0];
                    form.KeyPreview = true;
                    form.KeyDown += (s, e) =>
                    { if (e.KeyCode == Keys.Escape) { form.Close(); } };
                    form.FormClosed += (s, e) =>
                    {
                        form.DialogResult = DialogResult.OK;
                    };
                    break;

                case MessageBoxButtons.OKCancel:
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.OK,
                        Text = ButtonTranslations["OK"],
                        Height = fontHeight + 10,
                        FlatStyle = FlatStyle.System
                    });
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Cancel,
                        Text
                        = ButtonTranslations["Cancel"],
                        FlatStyle = FlatStyle.System
                    });
                    form.AcceptButton = CmdButtons[0];
                    form.CancelButton = CmdButtons[1];
                    break;

                case MessageBoxButtons.AbortRetryIgnore:
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Abort,
                        Text = ButtonTranslations["Abort"]
                    });
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Retry,
                        Text
                        = ButtonTranslations["Retry"]
                    });
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Ignore,
                        Text
                        = ButtonTranslations["Ignore"]
                    });
                    form.AcceptButton = CmdButtons[0];
                    form.ControlBox = false;
                    break;

                case MessageBoxButtons.YesNoCancel:
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Yes,
                        Text = ButtonTranslations["Yes"]
                    });
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.No,
                        Text
                        = ButtonTranslations["No"]
                    });
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Cancel,
                        Text
                        = ButtonTranslations["Cancel"]
                    });
                    form.AcceptButton = CmdButtons[0];
                    form.CancelButton = CmdButtons[2];
                    break;

                case MessageBoxButtons.YesNo:
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Yes,
                        Text = ButtonTranslations["Yes"]
                    });
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.No,
                        Text
                        = ButtonTranslations["No"]
                    });
                    form.AcceptButton = CmdButtons[0];
                    form.ControlBox = false;
                    break;

                case MessageBoxButtons.RetryCancel:
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Retry,
                        Text = ButtonTranslations["Retry"],
                        FlatStyle = FlatStyle.System
                    });
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Cancel,
                        Text
                        = ButtonTranslations["Cancel"]
                    });
                    form.AcceptButton = CmdButtons[0];
                    form.CancelButton = CmdButtons[1];
                    break;
            }

            int Padding = 4;
            int LastPos = form.ClientSize.Width;

            systemFont = SystemFonts.MessageBoxFont ?? SystemFonts.DefaultFont;

            using (Graphics g = form.CreateGraphics())
            {
                for (int c = CmdButtons.Count - 1; c >= 0; c--)
                {
                    Button _button = CmdButtons[c];
                    _button.FlatAppearance.BorderColor = (form.AcceptButton == _button) ? DMode.OScolors.Accent : DMode.OScolors.Control;

                    bottomPanel.Controls.Add(_button);
                    _button.TabIndex = c;
                    _button.Font = systemFont;
                    SizeF textSize = g.MeasureString(_button.Text, systemFont);
                    _button.Size = new Size((int)textSize.Width + 20, systemFont.Height + 10);
                    _button.Location = new Point(LastPos - (_button.Width + Padding), (bottomPanel.Height - _button.Height) / 2);
                    LastPos = _button.Left;
                }
            }

            int b = (int)_defaultButton;
            if (b > 0)
            {
                b >>= 8;
                if (b < CmdButtons.Count)
                {
                    CmdButtons[b].Select();
                    CmdButtons[b].FlatStyle = FlatStyle.Flat;
                    CmdButtons[b].FlatAppearance.BorderColor = DMode.OScolors.AccentLight;
                }
            }

            #endregion Bottom Panel & Buttons

            #region Icon

            Rectangle picBox = new Rectangle(2, 10, 0, 0);
            if (icon != MsgIcon.None)
            {
                PictureBox picIcon = new PictureBox { SizeMode = PictureBoxSizeMode.Zoom, Size = new Size(64, 64) };
                picIcon.Image = _Icons.GetIcon(icon);
                form.Controls.Add(picIcon);

                picBox.Size = new Size(64, 64);
                picIcon.SetBounds(picBox.X, picBox.Y, picBox.Width, picBox.Height);
                picIcon.BringToFront();
            }

            #endregion Icon

            #region Prompt Text

            Label lblPrompt = new Label
            {
                Text = Message,
                AutoSize = true,
                ForeColor = DMode.OScolors.TextActive,
                TextAlign = ContentAlignment.MiddleLeft,
                Location = new Point(picBox.X + picBox.Width + 4, picBox.Y),
                MaximumSize = new Size(form.ClientSize.Width - (picBox.X + picBox.Width) + 8, 0),
                MinimumSize = new Size(form.ClientSize.Width - (picBox.X +
                picBox.Width) + 8, 64)
            };
            lblPrompt.BringToFront();
            form.Controls.Add(lblPrompt);
            #endregion Prompt Text

            form.ClientSize = new Size(340,
                bottomPanel.Height +
                lblPrompt.Height +
                20
            );
            #region Keyboard Shortcuts

            string localMessage = Message;
            string localTitle = title;

            form.KeyDown += (object? sender, KeyEventArgs e) =>
            {
                if (e.Control && e.KeyCode == Keys.C)
                {
                    string clipboardText = $"Title: {localTitle}\r\nMessage: {localMessage}";
                    Clipboard.SetText(clipboardText);
                    e.Handled = true;
                }
            };
            #endregion


            return form.ShowDialog();
        }

        #endregion MessageBox

        #region InputBox

        public static DialogResult InputBox(
            string title, string promptText, ref List<KeyValue> Fields,
            MsgIcon icon = MsgIcon.None, MessageBoxButtons buttons = MessageBoxButtons.OK, bool pIsDarkMode = true)
        {
            Form form = new Form
            {
                FormBorderStyle = FormBorderStyle.FixedDialog,
                StartPosition = FormStartPosition.CenterParent,
                MaximizeBox = false,
                MinimizeBox = false,
                Text = title,
                Width = 340,
                Height = 170
            };
            DarkModeCS DMode = new DarkModeCS(form) { ColorMode = pIsDarkMode ? DarkModeCS.DisplayMode.DarkMode : DarkModeCS.DisplayMode.ClearMode };
            DMode.ApplyTheme(pIsDarkMode);
            ErrorProvider Err = new ErrorProvider();
            Base64Icons _Icons = new Base64Icons();

            #region Bottom Panel

            Panel bottomPanel = new Panel
            {
                Dock = DockStyle.Bottom,
                Height = 48,
                BackColor = DMode.OScolors.Surface,
                ForeColor = DMode.OScolors.TextActive
            };
            form.Controls.Add(bottomPanel);

            #endregion Bottom Panel

            #region Icon

            if (icon != MsgIcon.None)
            {
                PictureBox picIcon = new PictureBox { SizeMode = PictureBoxSizeMode.Zoom, Size = new Size(48, 48) };
                picIcon.Image = _Icons.GetIcon(icon);
                bottomPanel.Controls.Add(picIcon);

                picIcon.SetBounds(0, 2, 48, 48);
                picIcon.BringToFront();
            }

            #endregion Icon

            #region Buttons

            string CurrentLanguage = GetCurrentLanguage();
            var ButtonTranslations = GetButtonTranslations(CurrentLanguage);

            List<Button> CmdButtons = new List<Button>();
            switch (buttons)
            {
                case MessageBoxButtons.OK:
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.OK,
                        Text = ButtonTranslations["OK"]
                    });
                    form.AcceptButton = CmdButtons[0];
                    break;

                case MessageBoxButtons.OKCancel:
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult =
                        DialogResult.OK,
                        Text = ButtonTranslations["OK"]
                    });
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Cancel,
                        Text
                        = ButtonTranslations["Cancel"]
                    });
                    form.AcceptButton = CmdButtons[0];
                    form.CancelButton = CmdButtons[1];
                    break;

                case MessageBoxButtons.AbortRetryIgnore:
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Retry,
                        Text = ButtonTranslations["Retry"]
                    });
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Abort,
                        Text
                        = ButtonTranslations["Abort"]
                    });
                    form.AcceptButton = CmdButtons[0];
                    form.CancelButton = CmdButtons[1];
                    break;

                case MessageBoxButtons.YesNoCancel:
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Yes,
                        Text = ButtonTranslations["Yes"]
                    });
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.No,
                        Text
                        = ButtonTranslations["No"]
                    });
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Cancel,
                        Text
                        = ButtonTranslations["Cancel"]
                    });
                    form.AcceptButton = CmdButtons[0];
                    form.CancelButton = CmdButtons[2];
                    break;

                case MessageBoxButtons.YesNo:
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Yes,
                        Text = ButtonTranslations["Yes"]
                    });
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.No,
                        Text
                        = ButtonTranslations["No"]
                    });
                    form.AcceptButton = CmdButtons[0];
                    form.CancelButton = CmdButtons[1];
                    break;

                case MessageBoxButtons.RetryCancel:
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Retry,
                        Text = ButtonTranslations["Retry"]
                    });
                    CmdButtons.Add(new Button
                    {
                        Anchor = AnchorStyles.Top | AnchorStyles.Right,
                        DialogResult = DialogResult.Cancel,
                        Text
                        = ButtonTranslations["Cancel"]
                    });
                    form.AcceptButton = CmdButtons[0];
                    form.CancelButton = CmdButtons[1];
                    break;
            }

            int Padding = 4;
            int LastPos = form.ClientSize.Width;

            foreach (var _button in CmdButtons)
            {
                _button.FlatAppearance.BorderColor = (form.AcceptButton == _button) ?
                DMode.OScolors.Accent : DMode.OScolors.Control;
                bottomPanel.Controls.Add(_button);

                _button.Location = new Point(LastPos - (_button.Width + Padding), (bottomPanel.Height - _button.Height) / 2);
                LastPos = _button.Left;
            }

            #endregion Buttons

            #region Prompt Text

            Label lblPrompt = new Label();
            if (!string.IsNullOrWhiteSpace(promptText))
            {
                lblPrompt.Dock = DockStyle.Top;
                lblPrompt.Text = promptText;
                lblPrompt.AutoSize = false;
                lblPrompt.Height = 24;
                lblPrompt.TextAlign = ContentAlignment.MiddleCenter;
            }
            else
            {
                lblPrompt.Location = new Point(0, 0);
                lblPrompt.Width = 0;
                lblPrompt.Height = 0;
            }
            form.Controls.Add(lblPrompt);
            #endregion Prompt Text

            #region Controls for KeyValues

            TableLayoutPanel Contenedor = new TableLayoutPanel
            {
                Size = new Size(form.ClientSize.Width - 20, 50),
                AutoSizeMode = AutoSizeMode.GrowAndShrink,
                BackColor = DMode.OScolors.Background,
                AutoSize = true,
                ColumnCount = 2,
                Location = new Point(10, lblPrompt.Location.Y + lblPrompt.Height + 4)
            };
            form.Controls.Add(Contenedor);
            Contenedor.ColumnStyles.Clear();
            Contenedor.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));
            Contenedor.ColumnStyles.Add(new ColumnStyle(SizeType.Absolute));
            Contenedor.ColumnStyles[1].Width = form.ClientSize.Width - 120;
            Contenedor.RowStyles.Clear();

            int ChangeDelayMS = 1000;
            int currentRow = 0;
            foreach (KeyValue field in Fields)
            {
                Label field_label = new Label
                {
                    Text = field.Key,
                    AutoSize = false,
                    Dock = DockStyle.Fill,
                    TextAlign = ContentAlignment.MiddleCenter
                };
                Control? field_Control = null;

                BorderStyle BStyle = (DMode.IsDarkMode ? BorderStyle.FixedSingle : BorderStyle.Fixed3D);
                if (field.ValueType == ValueTypes.String)
                {
                    field_Control = new TextBox
                    {
                        Text = field.Value,
                        Dock = DockStyle.Fill,
                        TextAlign = HorizontalAlignment.Center
                    };
                    ((TextBox)field_Control).TextChanged += (sender, args) =>
                    {
                        AddTextChangedDelay((TextBox)field_Control, ChangeDelayMS, text =>
                        {
                            field.Value = ((TextBox)sender!).Text;
                            ((TextBox)sender!).Text = Convert.ToString(field.Value);
                            Err.SetError(field_Control, field.ErrorText);
                        });
                    };
                }
                if (field.ValueType == ValueTypes.Multiline)
                {
                    field_Control = new TextBox
                    {
                        Text = field.Value,
                        Dock = DockStyle.Fill,
                        TextAlign = HorizontalAlignment.Left,
                        Multiline = true,
                        ScrollBars = ScrollBars.Vertical
                    };
                    ((TextBox)field_Control).TextChanged += (sender, args) =>
                    {
                        AddTextChangedDelay((TextBox)field_Control, ChangeDelayMS, text =>
                        {
                            field.Value = ((TextBox)sender!).Text;
                            ((TextBox)sender!).Text = Convert.ToString(field.Value);
                            Err.SetError(field_Control, field.ErrorText);
                        });
                    };
                }
                if (field.ValueType == ValueTypes.Password)
                {
                    field_Control = new TextBox
                    {
                        Text = field.Value,
                        Dock = DockStyle.Fill,
                        UseSystemPasswordChar = true,
                        TextAlign = HorizontalAlignment.Center
                    };
                    ((TextBox)field_Control).TextChanged += (sender, args) =>
                    {
                        AddTextChangedDelay((TextBox)field_Control, ChangeDelayMS, text =>
                        {
                            field.Value = ((TextBox)sender!).Text;
                            ((TextBox)sender!).Text = Convert.ToString(field.Value);
                            Err.SetError(field_Control, field.ErrorText);
                        });
                    };
                }
                if (field.ValueType == ValueTypes.Integer)
                {
                    field_Control = new NumericUpDown
                    {
                        Minimum = int.MinValue,
                        Maximum = int.MaxValue,
                        TextAlign = HorizontalAlignment.Center,
                        Value = Convert.ToInt32(field.Value, CultureInfo.InvariantCulture),
                        ThousandsSeparator = true,
                        Dock = DockStyle.Fill,
                        DecimalPlaces = 0
                    };
                    ((NumericUpDown)field_Control).ValueChanged += (sender, args) =>
                    {
                        AddTextChangedDelay((NumericUpDown)field_Control, ChangeDelayMS, text =>
                        {
                            field.Value = ((NumericUpDown)sender!).Value.ToString(CultureInfo.InvariantCulture);
                            ((NumericUpDown)sender!).Value = Convert.ToInt32(field.Value, CultureInfo.InvariantCulture);
                            Err.SetError(field_Control, field.ErrorText);
                        });
                    };
                }
                if (field.ValueType == ValueTypes.Decimal)
                {
                    field_Control = new NumericUpDown
                    {
                        Minimum = int.MinValue,
                        Maximum = int.MaxValue,
                        TextAlign = HorizontalAlignment.Center,
                        Value = Convert.ToDecimal(field.Value, CultureInfo.InvariantCulture),
                        ThousandsSeparator = false,
                        Dock = DockStyle.Fill,
                        DecimalPlaces = 2
                    };
                    ((NumericUpDown)field_Control).ValueChanged += (sender, args) =>
                    {
                        AddTextChangedDelay((NumericUpDown)field_Control, ChangeDelayMS, text =>
                        {
                            field.Value = ((NumericUpDown)sender!).Value.ToString(CultureInfo.InvariantCulture);
                            ((NumericUpDown)sender!).Value = Convert.ToDecimal(field.Value, CultureInfo.InvariantCulture);
                            Err.SetError(field_Control, field.ErrorText);
                        });
                    };
                }
                if (field.ValueType == ValueTypes.Date)
                {
                    field_Control = new DateTimePicker
                    {
                        Value = Convert.ToDateTime(field.Value, CultureInfo.InvariantCulture),
                        Dock = DockStyle.Fill,
                        Format = DateTimePickerFormat.Short,

                        CalendarForeColor = DMode.OScolors.TextActive,
                        CalendarMonthBackground = DMode.OScolors.Control,
                        CalendarTitleBackColor = DMode.OScolors.Surface,
                        CalendarTitleForeColor = DMode.OScolors.TextActive
                    };
                    ((DateTimePicker)field_Control).ValueChanged += (sender, args) =>
                    {
                        field.Value = ((DateTimePicker)sender!).Value.ToString("o");
                        ((DateTimePicker)sender!).Value = Convert.ToDateTime(field.Value, CultureInfo.InvariantCulture);
                        Err.SetError(field_Control, field.ErrorText);
                        Err.SetIconAlignment(field_Control, ErrorIconAlignment.MiddleLeft);
                    };
                }
                if (field.ValueType == ValueTypes.Time)
                {
                    field_Control = new DateTimePicker
                    {
                        Value = Convert.ToDateTime(field.Value, CultureInfo.InvariantCulture),
                        Dock = DockStyle.Fill,
                        Format = DateTimePickerFormat.Time
                    };
                    ((DateTimePicker)field_Control).ValueChanged += (sender, args) =>
                    {
                        field.Value = ((DateTimePicker)sender!).Value.ToString("o");
                        ((DateTimePicker)sender!).Value = Convert.ToDateTime(field.Value, CultureInfo.InvariantCulture);
                        Err.SetError(field_Control, field.ErrorText);
                        Err.SetIconAlignment(field_Control, ErrorIconAlignment.MiddleLeft);
                    };
                }
                if (field.ValueType == ValueTypes.Boolean)
                {
                    field_Control = new CheckBox
                    {
                        Checked = Convert.ToBoolean(field.Value),
                        Dock = DockStyle.Fill,
                        Text = field.Key
                    };
                    ((CheckBox)field_Control).CheckedChanged += (sender, args) =>
                    {
                        field.Value = ((CheckBox)sender!).Checked.ToString();
                        ((CheckBox)sender!).Checked = Convert.ToBoolean(field.Value);
                        Err.SetError(field_Control, field.ErrorText);
                    };
                }
                if (field.ValueType == ValueTypes.Dynamic)
                {
                    field_Control = new FlatComboBox
                    {
                        DataSource = field.DataSet,
                        ValueMember = "Value",
                        DisplayMember = "Key",
                        Dock = DockStyle.Fill,
                        BackColor = DMode.OScolors.Control,
                        ButtonColor = DMode.OScolors.Surface,
                        ForeColor = DMode.OScolors.TextActive,
                        SelectedValue = field.Value,
                        DropDownStyle = ComboBoxStyle.DropDownList,
                        FlatStyle = (DMode.IsDarkMode ? FlatStyle.Flat : FlatStyle.Standard)
                    };
                    ((ComboBox)field_Control).SelectedValueChanged += (sender, args) =>
                    {
                        field.Value = ((ComboBox)sender!).SelectedValue.ToString()!;
                        ((ComboBox)sender!).SelectedValue = Convert.ToString(field.Value)!;
                        Err.SetError(field_Control, field.ErrorText);
                    };
                }

                Contenedor.Controls.Add(field_label, 0, currentRow);
                if (field_Control != null)
                {
                    if (field.ValueType == ValueTypes.Multiline)
                    {
                        Contenedor.Controls.Add(field_Control, 1, currentRow);
                        const int spanRow = 6;
                        for (int i = 0; i < spanRow; i++)
                        {
                            currentRow++;
                            Contenedor.RowCount++;
                            Contenedor.RowStyles.Add(new RowStyle(SizeType.Absolute, field_Control.Height));
                        }
                        Contenedor.SetRowSpan(field_Control, spanRow);
                    }
                    else
                    {
                        Contenedor.Controls.Add(field_Control, 1, currentRow);
                    }

                    Err.SetIconAlignment(field_Control, ErrorIconAlignment.MiddleLeft);
                    if (field_Control is ComboBox box)
                    {
                        box.CreateControl();
                        box.SelectedValue = field.Value;
                    }

                    field_Control.TabIndex = currentRow;
                }
                currentRow++;
            }

            Contenedor.Width = form.ClientSize.Width - 20;
            #endregion Controls for KeyValues

            form.ClientSize = new Size(340,
                bottomPanel.Height +
                lblPrompt.Height +
                Contenedor.Height +
                20
            );
            form.FormClosing += (sender, e) =>
            {
                if (form.ActiveControl == form.AcceptButton)
                {
                    ValidateEventArgs cArgs = new ValidateEventArgs(null);
                    ValidateControlsHandler?.Invoke(form, cArgs);

                    e.Cancel = cArgs.Cancel;
                    if (!e.Cancel)
                    {
                        form.DialogResult = form.AcceptButton!.DialogResult;
                    }
                }
            };
            return form.ShowDialog();
        }

        #endregion InputBox

        #region Private Stuff

        private static readonly Dictionary<Control, (Timer timer, EventHandler disposedHandler)> timers = new();

        private static void AddTextChangedDelay<TControl>(TControl control, int milliseconds, Action<TControl> action) where TControl : Control
        {
            if (timers.TryGetValue(control, out var existingEntry))
            {
                existingEntry.timer.Stop();
                existingEntry.timer.Dispose();
                control.Disposed -= existingEntry.disposedHandler;
                timers.Remove(control);
            }

            var timer = new Timer { Interval = milliseconds };
            EventHandler? disposedHandler = null;

            timer.Tick += (sender, e) =>
            {
                timer.Stop();
                if (timers.ContainsKey(control))
                {
                    timers.Remove(control);
                }
                if (disposedHandler != null)
                {
                    control.Disposed -= disposedHandler;
                }
                action(control);
                timer.Dispose();
            };

            disposedHandler = (sender, e) =>
            {
                if (timers.TryGetValue(control, out var entryToDispose))
                {
                    entryToDispose.timer.Stop();
                    entryToDispose.timer.Dispose();
                    timers.Remove(control);
                }
            };

            control.Disposed += disposedHandler;
            timer.Start();
            timers.Add(control, (timer, disposedHandler));
        }

        public static string GetCurrentLanguage(string pDefault = "en")
        {
            string _ret = pDefault;
            string CurrentLanguage = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName;
            if (IsCurrentLanguageSupported(new List<string> { "en", "es", "fr", "de", "ru", "ko", "pt" }, CurrentLanguage))
            {
                _ret = CurrentLanguage;
            }
            if (CurrentLanguage.ToLowerInvariant().Equals("zh"))
            {
                var LangVariable = CultureInfo.CurrentCulture.Name;
                if (string.Equals(LangVariable, "zh-CN") || string.Equals(LangVariable, "zh-SG") || string.Equals(LangVariable, "zh-Hans"))
                {
                    _ret = "zh-Hans";
                }
                else if (string.Equals(LangVariable, "zh-TW") || string.Equals(LangVariable, "zh-HK") || string.Equals(LangVariable, "zh-MO") || string.Equals(LangVariable, "zh-Hant"))
                {
                    _ret = "zh-Hant";
                }
                else
                {
                    _ret = "zh-Hans";
                }
            }
            return _ret;
        }

        private static Dictionary<string, string> GetButtonTranslations(string pLanguage)
        {
            Dictionary<string, string> _ret = new Dictionary<string, string>();
            Dictionary<string, string> ButtonTranslations = new Dictionary<string, string> {
                { "en", "OK|Cancel|Yes|No|Continue|Retry|Abort|Ignore|Try Again" },
                { "es", "Aceptar|Cancelar|Sí|No|Continuar|Reintentar|Abortar|Ignorar|Intentar" },
                { "fr", "Accepter|Annuler|Oui|Non|Continuer|Réessayer|Abandonner|Ignorer|Essayer" },
                { "de", "Akzeptieren|Abbrechen|Ja|Nein|Weiter|Wiederholen|Abbrechen|Ignorieren|Versuchen" },
                { "ru", "Принять|Отменить|Да|Нет|Продолжить|Повторить|Прервать|Игнорировать|Пытаться" },
                { "ko", "확인|취소|예|아니오|계속|다시 시도|중단|무시|써 보다" },
                { "pt", "Aceitar|Cancelar|Sim|Não|Continuar|Tentar novamente|Abortar|Ignorar|Tentar" },
                { "zh-Hans", "确定|取消|是|否|继续|重试|中止|忽略|尝试" },
                { "zh-Hant", "確定|取消|是|否|繼續|重試|中止|忽略|嘗試" }
              };
            string? raw = ButtonTranslations[pLanguage];
            if (!string.IsNullOrEmpty(raw))
            {
                var Words = raw.Split('|').ToList();
                _ret = new Dictionary<string, string> {
                    { "OK", Words[0] },
                    { "Cancel", Words[1] },
                    { "Yes", Words[2] },
                    { "No", Words[3] },
                    { "Continue", Words[4] },
                    { "Retry", Words[5] },
                    { "Abort", Words[6] },
                    { "Ignore", Words[7] },
                    { "Try Again", Words[8] }
                };
            }

            return _ret;
        }

        private static bool IsCurrentLanguageSupported(List<string> languages, string currentLanguage)
        {
            if (languages == null || currentLanguage == null)
            {
                throw new ArgumentNullException(languages == null ? nameof(languages) : nameof(currentLanguage));
            }

            currentLanguage = currentLanguage.ToLowerInvariant();
            if (languages.Contains(currentLanguage))
            {
                return true;
            }

            if (currentLanguage.Length >= 2)
            {
                string baseLanguage = currentLanguage.Substring(0, 2);
                return languages.Contains(baseLanguage);
            }

            return false;
        }

        #endregion Private Stuff
    }

    public enum MsgIcon
    {
        None = 0,
        Info,
        Success,
        Warning,
        Error,
        Question,
        Lock,
        User,
        Forbidden,
        AddNew,
        Cancel,
        Edit,
        List
    }

    public class KeyValue
    {
        #region Private Members

        private string _value = string.Empty;
        #endregion Private Members

        #region Contructors

        public KeyValue()
        {
        }

        public KeyValue(string pKey, string pValue, ValueTypes pType = ValueTypes.String, List<KeyValue>? pDataSet = null)
        {
            Key = pKey;
            Value = pValue;
            ValueType = pType;
            DataSet = pDataSet;
        }

        #endregion Contructors

        #region Public Properties

        public enum ValueTypes
        {
            String = 0,
            Integer = 1,
            Decimal = 2,
            Date = 3,
            Time,
            Boolean,
            Dynamic,
            Password,
            Multiline
        }

        public string Key { get; set; } = string.Empty;

        public string Value
        {
            get => _value;
            set
            {
                var newValue = value;
                OnValidate(ref newValue);

                if (_value != newValue)
                {
                    _value = newValue;
                }
            }
        }

        public ValueTypes ValueType { get; set; } = ValueTypes.String;

        public List<KeyValue>? DataSet { get; set; }

        public string ErrorText { get; set; } = string.Empty;
        #endregion Public Properties

        #region Public Events

        public class ValidateEventArgs : EventArgs
        {
            public ValidateEventArgs(string? newValue)
            {
                NewValue = newValue;
                Cancel = false;
            }

            public string? NewValue { get; }
            public string OldValue { get; set; } = string.Empty;

            public bool Cancel { get; set; }
            public string ErrorText { get; set; } = string.Empty;
        }

        public event EventHandler<ValidateEventArgs>? Validate;
        protected virtual void OnValidate(ref string newValue)
        {
            var validateHandler = Validate;
            if (validateHandler != null)
            {
                var args = new ValidateEventArgs(newValue) { OldValue = _value };
                validateHandler(this, args);

                if (args.Cancel) { newValue = _value; }

                ErrorText = args.ErrorText;
            }
        }

        #endregion Public Events

        #region Public Methods

        public override string ToString()
        {
            return string.Format("{0} - {1}", Key, Value);
        }

        #endregion Public Methods
    }

    public class Base64Image
    {
        public Base64Image()
        {
        }

        public Base64Image(string pName, string pBase64Data)
        {
            Name = pName;
            Base64Data = pBase64Data;
        }

        public string Name { get; set; } = string.Empty;
        public string Base64Data { get; set; } = string.Empty;

        public Image?
        Image
        {
            get
            {
                if (string.IsNullOrEmpty(Base64Data)) return null;
                return System.Drawing.Image.FromStream(new MemoryStream(Convert.FromBase64String(Base64Data)));
            }
        }
    }

    public class Base64Icons
    {
        private List<Base64Image> _Icons = new List<Base64Image> {
        new Base64Image("Info", "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAA4OSURBVHhexZt5jF1VHcfP22amM7S1FVSKSN1F3HejiUtINZgQFJdgxH9cYrBYip3pDG0YGyt0YTpUDQmNGjXGhcSoBBWr4FINRkCt4L6h4t7WltJ2Zt7Me34/99zz7j13ee++O1P9Jt959727nPNbzu/8zu+eqZj/JTb+yJiBIR1UjUm23BYXWsbUdO7knDEfeZ79/TTj9CpgVAJXl6mVks2glOaCMXv+rYMLg5+WGkuoAPX2moPGtOrh99MAFLJyUO38SQdLo5DFK2Djz42py3Ubct2WPrMfuUp8tLgm/FwtniHWRCAzmxPiUfGf4t/Ev4ffeWgac7PyjF/r4K32e0ksQgEPyBLH1b3cRzxOfK74TPHxIkqQ+TptYk8I3G988puCQCA8pr5P/In4B9Gircsq4a3BU6S/Xc+23/tEbu+7YlRWr8gw1dTtw+LzxVeLTxOxMhdhYSzphM5rN34O73Ae8rD4O/HbogKLkeZj4Mk1/bmeyy8IfiqK/hUwen/UrQj88krxdeKTRZ47Lzqh+a4x0mE3BcC4wty9Lrj8Ubxd/KaIp0Tgjl3PsMcFUVwB43hi5uWonIH4rOCb4rYY73gj/I4VD4uHws+HRA3kAAyN5SKx4UzxkeF37ud5cWXwPD5/KX5O/LHo4+7zjLmD23ujoAI03ifkdYy9CHTkjeIl4ogYt4br5H/EX4j3ir8X/yWiCITJALe0edajxCeIxBBMikIAynAYEFHg10QUcVKMQE6x29kkHwUU8C1Z/zH20NnAWum94otFBMdlOYObMhwQ9jvi90WE7o6KDN3GyJnAK14iEleeyg+C8zLaQhG454fFv4oWnD2kyz6ODvPRQwEx4SM8SbxKJLJjAZpyrv6g+BXxgIil88FdHYXqoHeypIzKvFTE4/AOYoxTPEpg2twrKkjFMKvT0/mBsXur4/6zhKeIm0W04oRHcDryDfHzItOXwKM5HX609Gc3M2IBrFe7zCeoNQ2GyKXixSKxw3kDx7S9R/Tjwo78wJivgHS0x/ITIuMTt+dehCdP/YSIu0eg86dkpLXy2g0YrySuvkeiSTY//gAWC+8SzxXpjzMGwXWX+DPRgr5c9w/9SWeP2QrYLOH9M4z5D4i4/YzIWTTOWJ8SSVgsSI62a/rnip0FLd4Lo5KlJUPX1aTfL7LKq0VM7DySfpFNbhP/LEbI8IRsBfhTHlq9RnyRGJ+2GB83iHiARVvtN8U9XaLvhbeagbUNU5s7Zporzg6aqcwoXDQGte6RIW++KLwwA+vVr2W6wffMFeJG0fXPKYFpEqORYltkxIO0AjarET8gXSZeLmJ5Hk7AIRn5oBgJz6mm2p96Qfi9ByYnz9Hfi0yzNWxqlRlllbeZbduiKJ6HdP8Akz5GwuXcdMy6m4B8c/ANYKCEV/pPSrs+6rpWRKPMU0xzJDK4V+T2oEug8TA5eZ6EvkQcM8N1FkcWswsPmfn2lBmpf0qK8J+dhXSAPkvE4qxBUIILoTvFH9pDIaEEP87633A0Mjyirptu+CTgRR3EJ/IXRD4Qfm5hk1aON3rCg8HaCgm/zZycnwqu64UjajOeFllv3CeeEum7MxgezJxikVi/xESWJAgTgdyewewiPq5PDu5H+52y/K7CC5B1ZqC2PjzOxnD9Uk2Zrw2/5WOf2pxKed1B8UsigtNnVMTsFT0PGcdZXFpEChjzXAqNsbBx4IF/Eb8QfAM8yLdAbxxv9rYsODr38vCoN1pyStw6Agr4jUjw5gReu05kOW7R4pRFpADfNVjSsqpzIuJSBBSb5JC2sgZPW6A75hZcKtsdrTYJVzFQBzhEUtgBwfqLIsIjHyeJCy8TLWJ+Hzv0QN6NRngI6mK+PyBakLuXK0Bgjd5oF7zOgXzf9wJqBri0MzXPY0jjyR6yFIC2KGagOZQAKUTY3J525r3GiqNRZa3QG9VguPWHOS0GIyXguVrIBIEQIMta8fzgGwjjgFUAFZ4IpJhUcriZ8yxpfyBaoI4bSmZ4Q7Xe8zxoVHtPg0lMa2HqD2O8gPyX4YtmyAtitXbrHFYBtVBz7WA+Qzo++ZGr0E60pDVrfTBQ675CdFhWL6aoJPxhQFssipCBE5DpitmsA38IVKqP0F/yfcaMU4K/siprfYv9SoBcOp2PRtUvbhTFjlTffioyHJATmR4rsq4J0eYEQ6UDlrlMF879KT5SjLSgyrIYkOEdm2OuzkezRRTfb7+UwBHyoA4eEBnCyELnSZlRgsXG+3XCL3iQneEiTgHU7iL3L1Bi6olKYoWWBAoqkgrnYd8Lw4MA9J+VIbLgzcQDls8Wg5XgRBxow0USzpH3Z4/by74cHvSJRpWFVD4qJWaAfOD+GDAuJ0voDpIKcNkSSoBHgm8ZGBxJ3loQQzVKV/nopaCiWO3qqIEXABfTiHMdJKVg4cNFDlRXBOcUEWoz4al+0Wsm6KWgojji5DbHwk+AbNHCSEgqgDESRxix4zqxWBiJBdP+0H0mKDpVFocrlzlUTTsSu6Qfyyf8Obc4us0EVjHlZ4CiiDl0UgHJec4mDRnC1o/3LvfnIm8mWOwMkA23NHaQjJGYSQVE9TML+34po2a/MFTs1VMmBqq/DY98VIJS21KDmmEcXqKQVABJg4uWcHWW9cEpdm6UxfKBbEFXDkRrjqWDmw4QBNm86K2AEB5ZkDS4X/g8U9ZnZkjjM28KD0phv5lbeL+Zmbehem7hpDkxP2nq1VuD70sH3J9538mEApDRQr/qB611xjtaYLHwIdFlguTkVFtJKTUnKK+Y7v6urS/Y2h/Vmv1LNvbfLnnWdOShUEpRFC/AZYlpyHeXqF/agUbiFVYupNbPC0luYCU1Ld4pWhSt/v6/4Fe2qWxttYcBmGVGRZtt7rggMwZgCbeG5ry/X23Cqx2UB9Yf27LZXDWx12zacm2hSnAvjPHOIDy2eI4YL+mzzLbTV+Akbi0QzQocOXfgUVRSGBZRQbEznBYBhD0xf0Dr/h0KfO8LyuGzC/eZ0S289S2Pmie9K4C4yhay8rbIS8KsAvyyNut/sjHOMQxI+XgtbYGK2BlWFoHwzdsldLQqA4O15aZauae8J6hP/sSE+7P0dQpAcDZqWMzYi60CfL9hNxZF0HgB8VUiGrWX1v2W+sQ6M9Kg5pjGUG2VOvbm8Ft/IJCH0shLOeJVsEvtkYXkK7LcXlvU7dySALs7nFZYUtJhdmlYsJ21rBfMt7ySVArN1srwqA94RR2hwtiH9B2gCF7ouPeGHUQK8BMe3qWRrLiyMni9GK2kGrq+jBLq1VQnPAz3WQ+8UiP2CiatDrA2e5foOwMW4VlhfldMIVLAnOcMlMK+Lsa94IkiOzMsuHywVEDcrwB4W3js40TzoAIZm56KY0QOtdxzKt6vUxx0r/RQyB1i9CabV/ghvMFvJjQBROd46nUi7k8AQZMogt+il2tUiU+KN/VRLiPQnZyflrXxKouHmwfMGY3LCydEeN+A2vUl4G0Wb4jdC128AI8aF21dgOuvj3IZz+yJnVpokD0/TngeSCB8t8g2GYu6nrjCxZqCQMjhOpsaeJZlP8KDmrrjC8/q7D0iMYS+IhvmvEWMiiKeiMlHgPR793eKbxCp1gI8g4tIKRNbVtXerkWVzXtjk5Id5nu/5/RpTCRQuxiDsYiObJqywFsTZX3fA8AOPRm9RfisiMA0whka4ClYkDdIEXjaWPeq9+Igtz+a6jL9ulIkV6Fv9BHXZzr/pBihmjC/kPYAkPYCkpZJ0W2P4z5STKRFw1SPIzCUGjLA9uIvebtDhty6hik0/N4Bbr9BRHj6hfAohLfY20X201sMqsvbvIQvQLYCaHDibD3OcwWiHHsEaZRgyL00xkqRnRnRtrSGhuC84gIjsanLumxU7Iqtd+t+6Zm8g6543QkCHmOeV+7O8kR8jjHKXaaqPrB/gKHZ1DMy+pGjgBBpT2AHFK5PoHGegBJYNvNOnpcF/O6Df6SYUwi5kY1cBcAeRTw9u3cIyVT3FpF+OOHpB3Hqo6I/55faKAlYW5+jZ/uaJ4fE7dyGSc4yDdCxX4koQqYLcvBscMesLPNgaFkyDMpuyd5wLvoNlZDdkeQQg/AvyBWMedz+JtGu9QH3s8GyyxaeZJNpvENT/lnxhDAACxYCz9NFLM7gdB3hWKE6iMAoIlln7BdEcxY25PYogDac4lEKsYiAh+UxQIRZ2WCaW/LRWwGApGNIcvnbVZkB3ia+RsT6xAXXKacIUlBWl7ylJVZQAsv3DAu8idyWjRr0niUtqzp+pw2nbNoErFuI9kfsKbxK3aAnBabkYgoA50sJF+up6TuIwGxFw5FxybiAbmjQcYot1OMoSDBrUJzEkoDxS3ClIsXQcv9Yxe/xZyIWz4NUdW6RsHcGw8eBKw6ruY8VK90VV4ADu8mwsQ8WSWxFo76H5Vyn6Q7kjjgdOAfi/eA37secztrQKZNdHwyvr4rx116Cbk3vEeiK/hXAcGhJtiH1J303lSO2uL1CZE8O4zcuEMe92nTXQARGYcQZ9hd9TzwgRpVdwB3MNEy9fU65/SvAYYNyoBE1iFhp0HE2JBG8CJQkUsQMrEh3IXCfrh9OcJ5K8ERoylhUcvjXm/QUi2rB7nLF2vIKcPi0hva9WsMMS2Ynjg/GMeVpAhmKYHzzipp/IkBR9IHhwhzOVEaMYHxDjtNCA1Yh50r68XL/L+iweAU4sO2MYNRGpsKgfZjtR1kINmlK0yX/UTKJpVNAEm5vPyO4bCurJexhPYBV3FR/wa0oTp8CkrhC8WuVZjY3ZvMwoymsJk4VTJsXBWP+C8Jv42GReAgfAAAAAElFTkSuQmCC")
        };
        public List<Base64Image> Icons
        {
            get
            {
                return this._Icons;
            }
            set
            {
                this._Icons = value;
            }
        }

        public Image?
        GetIcon(string pName)
        {
            Image?
            _ret = null;
            if (_Icons != null && _Icons.Count > 0)
            {
                var Found = _Icons.Find(x => x.Name == pName);
                if (Found != null)
                {
                    _ret = Found.Image;
                }
            }
            return _ret;
        }

        public Image? GetIcon(MsgIcon pIcon) => GetIcon(pIcon.ToString());
        public bool AddIcon(string pName, string pFilePath)
        {
            bool _ret = false;
            if (!string.IsNullOrEmpty(pFilePath) && File.Exists(pFilePath))
            {
                var _icon = File.ReadAllBytes(pFilePath);
                if (_icon != null)
                {
                    if (_Icons is null) _Icons = new List<Base64Image>();
                    _Icons.Add(new Base64Image(pName, Convert.ToBase64String(_icon)));
                    _ret = true;
                }
            }
            return _ret;
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/MFWConstants.cs
--------------------------------------------------------------------------------
﻿// MFWConstants.cs
namespace MinimalFirewall
{
    public static class MFWConstants
    {
        public const string MainRuleGroup = "Minimal Firewall - MFW";
        public const string WildcardRuleGroup = "Minimal Firewall (Wildcard) - MFW";
        public const string WildcardDescriptionPrefix = "MFW_Wildcard_Path:[";
        public const string UwpDescriptionPrefix = "UWP App; PFN=";
        public const string MfwRuleSuffix = " - MFW";
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/MinimalFirewall-NET8.csproj
--------------------------------------------------------------------------------
﻿<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<OutputType>WinExe</OutputType>
		<TargetFramework>net8.0-windows8.0</TargetFramework>
		<TargetPlatformVersion>8.0</TargetPlatformVersion>
		<SupportedOSPlatformVersion>8.0</SupportedOSPlatformVersion>
		<RootNamespace>MinimalFirewall</RootNamespace>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
		<UseWindowsForms>true</UseWindowsForms>
		<ApplicationIcon>logo.ico</ApplicationIcon>
		<ApplicationManifest>app.manifest</ApplicationManifest>
		<PlatformTarget>AnyCPU</PlatformTarget>
		<RuntimeIdentifiers>win-x64</RuntimeIdentifiers>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<AssemblyVersion>2.4.2.0</AssemblyVersion>
		<FileVersion>2.4.2.0</FileVersion>
		<Company>Deminimis</Company>
		<Product>Minimal Firewall</Product>
		<PackageProjectUrl>https://github.com/deminimis/minimalfirewall</PackageProjectUrl>
		<PackageTags>firewall, security, privacy</PackageTags>
		<StartupObject>MinimalFirewall.Program</StartupObject>
		<Configurations>Debug;Release</Configurations>
		<Platforms>AnyCPU;x64</Platforms>
		<ServerGarbageCollection>false</ServerGarbageCollection>
		<TieredCompilation>false</TieredCompilation>
		<GenerateResourceWarnOnBinaryFormatterUse>false</GenerateResourceWarnOnBinaryFormatterUse>

		<PublishSingleFile>true</PublishSingleFile>
		<IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
	</PropertyGroup>

	<ItemGroup>
		<None Remove="1-adminnhelper-allfiles.txt" />
		<None Remove="1-oldfiles4.8.txt" />
		<None Remove="1allfiles.txt" />
		<None Remove="1file_combiner.py" />
	</ItemGroup>

	<ItemGroup>
		<EmbeddedResource Include="logo.ico" />
		<EmbeddedResource Include="logo.png" />
	</ItemGroup>

	<ItemGroup>
		<COMReference Include="NetFwTypeLib">
			<WrapperTool>tlbimp</WrapperTool>
			<VersionMinor>0</VersionMinor>
			<VersionMajor>1</VersionMajor>
			<Guid>58fbcf7c-e7a9-467c-80b3-fc65e8fcca08</Guid>
			<Lcid>0</Lcid>
			<Isolated>false</Isolated>
			<EmbedInteropTypes>true</EmbedInteropTypes>
		</COMReference>
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Extensions.Caching.Memory" Version="9.0.9" />
		<PackageReference Include="System.Management" Version="9.0.9" />
	</ItemGroup>

	<ItemGroup>
		<Compile Update="Properties\Resources.Designer.cs">
			<DesignTime>True</DesignTime>
			<AutoGen>True</AutoGen>
			<DependentUpon>Resources.resx</DependentUpon>
		</Compile>
		<Compile Update="Properties\Settings.Designer.cs">
		  <DesignTimeSharedInput>True</DesignTimeSharedInput>
		  <AutoGen>True</AutoGen>
		  <DependentUpon>Settings.settings</DependentUpon>
		</Compile>
	</ItemGroup>

	<ItemGroup>
		<EmbeddedResource Update="Properties\Resources.resx">
			<Generator>ResXFileCodeGenerator</Generator>
			<LastGenOutput>Resources.Designer.cs</LastGenOutput>
		</EmbeddedResource>
	</ItemGroup>

	<ItemGroup>
	  <None Update="Properties\Settings.settings">
	    <Generator>SettingsSingleFileGenerator</Generator>
	    <LastGenOutput>Settings.Designer.cs</LastGenOutput>
	  </None>
	</ItemGroup>

</Project>

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/MinimalFirewall-NET8.csproj.user
--------------------------------------------------------------------------------
﻿<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="Current" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <_LastSelectedProfileId>C:\Users\anon\PROGRAMMING\C#\SimpleFirewall\VS Minimal Firewall\MinimalFirewall-NET8\MinimalFirewall-WindowsStore\Properties\PublishProfiles\FolderProfile.pubxml</_LastSelectedProfileId>
  </PropertyGroup>
  <ItemGroup>
    <Compile Update="AuditControl.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Update="BrowseServicesForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Update="CreateAdvancedRuleForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Update="CreateProgramRuleForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Update="CreateProgramRuleForm.Designer.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Update="DashboardControl.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Update="FlatComboBox.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Update="FlatProgressBar.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Update="FlatTabControl.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Update="GroupsControl.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Update="IconService.cs">
      <SubType>Component</SubType>
    </Compile>
    <Compile Update="LiveConnectionsControl.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Update="MainForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Update="ManagePublishersForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Update="NotifierForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Update="RulesControl.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Update="RuleWizardForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Update="SettingsControl.cs">
      <SubType>UserControl</SubType>
    </Compile>
    <Compile Update="SignatureValidationService.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Update="StatusForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Update="WildcardCreatorForm.cs">
      <SubType>Form</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Update="IconService.resx">
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <EmbeddedResource Update="ManagePublishersForm.resx">
      <SubType>Designer</SubType>
    </EmbeddedResource>
  </ItemGroup>
</Project>

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/MinimalFirewall-WindowsStore.sln
--------------------------------------------------------------------------------
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.14.36511.14 d17.14
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "MinimalFirewall-NET8", "MinimalFirewall-NET8.csproj", "{6326C497-403B-F991-2F6A-A5FBA67C364C}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Debug|x64 = Debug|x64
		Release|Any CPU = Release|Any CPU
		Release|x64 = Release|x64
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{6326C497-403B-F991-2F6A-A5FBA67C364C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{6326C497-403B-F991-2F6A-A5FBA67C364C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{6326C497-403B-F991-2F6A-A5FBA67C364C}.Debug|x64.ActiveCfg = Debug|x64
		{6326C497-403B-F991-2F6A-A5FBA67C364C}.Debug|x64.Build.0 = Debug|x64
		{6326C497-403B-F991-2F6A-A5FBA67C364C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{6326C497-403B-F991-2F6A-A5FBA67C364C}.Release|Any CPU.Build.0 = Release|Any CPU
		{6326C497-403B-F991-2F6A-A5FBA67C364C}.Release|x64.ActiveCfg = Release|x64
		{6326C497-403B-F991-2F6A-A5FBA67C364C}.Release|x64.Build.0 = Release|x64
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {7039C681-60B0-48A9-A48C-EB2893D752A3}
	EndGlobalSection
EndGlobal


--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/NotifierForm.cs
--------------------------------------------------------------------------------
﻿// File: NotifierForm.cs
using DarkModeForms;
using System.Drawing;
namespace MinimalFirewall
{
    public partial class NotifierForm : Form
    {
        public enum NotifierResult { Ignore, Allow, Block, TemporaryAllow, CreateWildcard }
        public NotifierResult Result { get; set; } = NotifierResult.Ignore;
        public PendingConnectionViewModel PendingConnection { get; private set; }
        public TimeSpan TemporaryDuration { get; private set; }
        public bool TrustPublisher { get; private set; } = false;
        private readonly DarkModeCS dm;

        public NotifierForm(PendingConnectionViewModel pending, bool isDarkMode)
        {
            InitializeComponent();
            PendingConnection = pending;
            dm = new DarkModeCS(this)
            {
                ColorMode = isDarkMode ? DarkModeCS.DisplayMode.DarkMode : DarkModeCS.DisplayMode.ClearMode
            };
            dm.ApplyTheme(isDarkMode);
            string appName = string.IsNullOrEmpty(pending.ServiceName) ? pending.FileName : $"{pending.FileName} ({pending.ServiceName})";
            this.Text = "Connection Blocked";
            infoLabel.Text = $"Blocked a {pending.Direction} connection for:";
            appNameLabel.Text = appName;
            pathLabel.Text = pending.AppPath;

            allowButton.Text = $"Allow {pending.Direction}";
            blockButton.Text = $"Block {pending.Direction}";

            this.AcceptButton = this.ignoreButton;

            allowButton.FlatStyle = FlatStyle.Flat;
            blockButton.FlatStyle = FlatStyle.Flat;

            Color allowColor = Color.FromArgb(204, 255, 204);
            Color blockColor = Color.FromArgb(255, 204, 204);

            allowButton.BackColor = allowColor;
            blockButton.BackColor = blockColor;

            allowButton.ForeColor = Color.Black;
            blockButton.ForeColor = Color.Black;

            allowButton.FlatAppearance.MouseOverBackColor = ControlPaint.Dark(allowColor, 0.1f);
            blockButton.FlatAppearance.MouseOverBackColor = ControlPaint.Dark(blockColor, 0.1f);
            allowButton.FlatAppearance.MouseDownBackColor = ControlPaint.Dark(allowColor, 0.2f);
            blockButton.FlatAppearance.MouseDownBackColor = ControlPaint.Dark(blockColor, 0.2f);

            allowButton.FlatAppearance.BorderSize = 0;
            blockButton.FlatAppearance.BorderSize = 0;


            SetupTempAllowMenu();
            SetupTrustPublisherCheckBox();
        }

        private void SetupTempAllowMenu()
        {
            tempAllowContextMenu.Items.Add("For 2 minutes").Click += (s, e) => SetTemporaryAllow(TimeSpan.FromMinutes(2));
            tempAllowContextMenu.Items.Add("For 5 minutes").Click += (s, e) => SetTemporaryAllow(TimeSpan.FromMinutes(5));
            tempAllowContextMenu.Items.Add("For 15 minutes").Click += (s, e) => SetTemporaryAllow(TimeSpan.FromMinutes(15));
            tempAllowContextMenu.Items.Add("For 1 hour").Click += (s, e) => SetTemporaryAllow(TimeSpan.FromHours(1));
            tempAllowContextMenu.Items.Add("For 3 hours").Click += (s, e) => SetTemporaryAllow(TimeSpan.FromHours(3));
            tempAllowContextMenu.Items.Add("For 8 hours").Click += (s, e) => SetTemporaryAllow(TimeSpan.FromHours(8));
        }

        private void SetupTrustPublisherCheckBox()
        {
            if (SignatureValidationService.GetPublisherInfo(PendingConnection.AppPath, out var publisherName) && publisherName != null)
            {
                trustPublisherCheckBox.Text = $"Always trust publisher: {publisherName}";
                trustPublisherCheckBox.Visible = true;
            }
            else
            {
                trustPublisherCheckBox.Visible = false;
            }
        }

        private void SetTemporaryAllow(TimeSpan duration)
        {
            Result = NotifierResult.TemporaryAllow;
            TemporaryDuration = duration;
            this.DialogResult = DialogResult.OK;
            this.Close();
        }

        private void allowButton_Click(object sender, EventArgs e)
        {
            Result = NotifierResult.Allow;
            TrustPublisher = trustPublisherCheckBox.Visible && trustPublisherCheckBox.Checked;
            this.DialogResult = DialogResult.OK;
            this.Close();
        }

        private void blockButton_Click(object sender, EventArgs e)
        {
            Result = NotifierResult.Block;
            this.DialogResult = DialogResult.OK;
            this.Close();
        }

        private void ignoreButton_Click(object sender, EventArgs e)
        {
            Result = NotifierResult.Ignore;
            this.DialogResult = DialogResult.Cancel;
            this.Close();
        }

        private void tempAllowButton_Click(object sender, EventArgs e)
        {
            tempAllowContextMenu.Show(tempAllowButton, new Point(0, tempAllowButton.Height));
        }

        private void createWildcardButton_Click(object sender, EventArgs e)
        {
            Result = NotifierResult.CreateWildcard;
            this.DialogResult = DialogResult.OK;
            this.Close();
        }
    }
}


--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/NotifierForm.Designer.cs
--------------------------------------------------------------------------------
﻿// File: NotifierForm.Designer.cs
namespace MinimalFirewall
{
    partial class NotifierForm
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.Label infoLabel;
        private System.Windows.Forms.Label appNameLabel;
        private System.Windows.Forms.Label pathLabel;
        private System.Windows.Forms.Button allowButton;
        private System.Windows.Forms.Button blockButton;
        private System.Windows.Forms.Button ignoreButton;
        private System.Windows.Forms.Button tempAllowButton;
        private System.Windows.Forms.ContextMenuStrip tempAllowContextMenu;
        private System.Windows.Forms.Button createWildcardButton;
        private System.Windows.Forms.CheckBox trustPublisherCheckBox;
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.infoLabel = new System.Windows.Forms.Label();
            this.appNameLabel = new System.Windows.Forms.Label();
            this.pathLabel = new System.Windows.Forms.Label();
            this.allowButton = new System.Windows.Forms.Button();
            this.blockButton = new System.Windows.Forms.Button();
            this.ignoreButton = new System.Windows.Forms.Button();
            this.tempAllowButton = new System.Windows.Forms.Button();
            this.tempAllowContextMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.createWildcardButton = new System.Windows.Forms.Button();
            this.trustPublisherCheckBox = new System.Windows.Forms.CheckBox();
            this.SuspendLayout();
            // 
            // infoLabel
            // 
            this.infoLabel.Location = new System.Drawing.Point(12, 9);
            this.infoLabel.Name = "infoLabel";
            this.infoLabel.Size = new System.Drawing.Size(532, 20);
            this.infoLabel.TabIndex = 0;
            this.infoLabel.Text = "Blocked a connection for:";
            // 
            // appNameLabel
            // 
            this.appNameLabel.Font = new System.Drawing.Font("Segoe UI", 12F, System.Drawing.FontStyle.Bold);
            this.appNameLabel.Location = new System.Drawing.Point(12, 38);
            this.appNameLabel.Name = "appNameLabel";
            this.appNameLabel.Size = new System.Drawing.Size(532, 21);
            this.appNameLabel.TabIndex = 1;
            this.appNameLabel.Text = "Application Name";
            // 
            // pathLabel
            // 
            this.pathLabel.AutoEllipsis = true;
            this.pathLabel.Font = new System.Drawing.Font("Segoe UI", 8F);
            this.pathLabel.Location = new System.Drawing.Point(12, 65);
            this.pathLabel.Name = "pathLabel";
            this.pathLabel.Size = new System.Drawing.Size(532, 20);
            this.pathLabel.TabIndex = 2;
            this.pathLabel.Text = "C:\\Path\\To\\Application.exe";
            // 
            // allowButton
            // 
            this.allowButton.Location = new System.Drawing.Point(16, 104);
            this.allowButton.Name = "allowButton";
            this.allowButton.Size = new System.Drawing.Size(120, 31);
            this.allowButton.TabIndex = 3;
            this.allowButton.Text = "Allow";
            this.allowButton.UseVisualStyleBackColor = true;
            this.allowButton.Click += new System.EventHandler(this.allowButton_Click);
            // 
            // blockButton
            // 
            this.blockButton.Location = new System.Drawing.Point(296, 104);
            this.blockButton.Name = "blockButton";
            this.blockButton.Size = new System.Drawing.Size(120, 31);
            this.blockButton.TabIndex = 4;
            this.blockButton.Text = "Block";
            this.blockButton.UseVisualStyleBackColor = true;
            this.blockButton.Click += new System.EventHandler(this.blockButton_Click);
            // 
            // ignoreButton
            // 
            this.ignoreButton.Location = new System.Drawing.Point(424, 104);
            this.ignoreButton.Name = "ignoreButton";
            this.ignoreButton.Size = new System.Drawing.Size(120, 31);
            this.ignoreButton.TabIndex = 5;
            this.ignoreButton.Text = "Ignore";
            this.ignoreButton.UseVisualStyleBackColor = true;
            this.ignoreButton.Click += new System.EventHandler(this.ignoreButton_Click);
            // 
            // tempAllowButton
            // 
            this.tempAllowButton.Location = new System.Drawing.Point(144, 104);
            this.tempAllowButton.Name = "tempAllowButton";
            this.tempAllowButton.Size = new System.Drawing.Size(144, 31);
            this.tempAllowButton.TabIndex = 6;
            this.tempAllowButton.Text = "Allow Temporarily ▼";
            this.tempAllowButton.UseVisualStyleBackColor = true;
            this.tempAllowButton.Click += new System.EventHandler(this.tempAllowButton_Click);
            // 
            // tempAllowContextMenu
            // 
            this.tempAllowContextMenu.Name = "tempAllowContextMenu";
            this.tempAllowContextMenu.Size = new System.Drawing.Size(61, 4);
            // 
            // createWildcardButton
            // 
            this.createWildcardButton.Location = new System.Drawing.Point(16, 148);
            this.createWildcardButton.Name = "createWildcardButton";
            this.createWildcardButton.Size = new System.Drawing.Size(170, 31);
            this.createWildcardButton.TabIndex = 7;
            this.createWildcardButton.Text = "Create Wildcard Rule...";
            this.createWildcardButton.UseVisualStyleBackColor = true;
            this.createWildcardButton.Click += new System.EventHandler(this.createWildcardButton_Click);
            // 
            // trustPublisherCheckBox
            // 
            this.trustPublisherCheckBox.AutoSize = true;
            this.trustPublisherCheckBox.Location = new System.Drawing.Point(16, 185);
            this.trustPublisherCheckBox.Name = "trustPublisherCheckBox";
            this.trustPublisherCheckBox.Size = new System.Drawing.Size(138, 17);
            this.trustPublisherCheckBox.TabIndex = 8;
            this.trustPublisherCheckBox.Text = "Always trust publisher";
            this.trustPublisherCheckBox.UseVisualStyleBackColor = true;
            this.trustPublisherCheckBox.Visible = false;
            // 
            // NotifierForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(556, 225);
            this.Controls.Add(this.trustPublisherCheckBox);
            this.Controls.Add(this.createWildcardButton);
            this.Controls.Add(this.tempAllowButton);
            this.Controls.Add(this.ignoreButton);
            this.Controls.Add(this.blockButton);
            this.Controls.Add(this.allowButton);
            this.Controls.Add(this.pathLabel);
            this.Controls.Add(this.appNameLabel);
            this.Controls.Add(this.infoLabel);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "NotifierForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Connection Blocked";
            this.ResumeLayout(false);
            this.PerformLayout();
        }

        #endregion
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/ObservableViewModel.cs
--------------------------------------------------------------------------------
﻿// File: ObservableViewModel.cs
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Collections.Generic;

namespace MinimalFirewall
{
    public class ObservableViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler? PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        protected bool SetField<T>(ref T field, T value, [CallerMemberName] string? propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(field, value)) return false;
            field = value;
            OnPropertyChanged(propertyName);
            return true;
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/Program.cs
--------------------------------------------------------------------------------
﻿// File: Program.cs
using System.Globalization;
using System.Threading;
namespace MinimalFirewall
{
    internal static class Program
    {
        private const string AppGuid = "6326C497-403B-F991-2F6A-A5FBA67C364C";
        [STAThread]
        static void Main()
        {
            using (Mutex mutex = new Mutex(true, AppGuid, out bool createdNew))
            {
                if (createdNew)
                {
                    CultureInfo.DefaultThreadCurrentCulture = CultureInfo.InvariantCulture;
                    CultureInfo.DefaultThreadCurrentUICulture = CultureInfo.InvariantCulture;

                    ApplicationConfiguration.Initialize();

                    var args = Environment.GetCommandLineArgs();
                    bool startMinimized = args.Contains("-tray", StringComparer.OrdinalIgnoreCase);

                    var mainForm = new MainForm(startMinimized);
                    Application.Run(mainForm);
                }
                else
                {
                    MessageBox.Show("Minimal Firewall is already running.", "Application Already Running", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/PublisherWhitelistService.cs
--------------------------------------------------------------------------------
﻿// PublisherWhitelistService.cs
using System.Diagnostics;
using System.IO;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace MinimalFirewall
{
    public class PublisherWhitelistService
    {
        private readonly string _configPath;
        private HashSet<string> _trustedPublishers;

        public PublisherWhitelistService()
        {
            _configPath = Path.Combine(AppContext.BaseDirectory, "trusted_publishers.json");
            _trustedPublishers = Load();
        }

        private HashSet<string> Load()
        {
            try
            {
                if (File.Exists(_configPath))
                {
                    string json = File.ReadAllText(_configPath);
                    return JsonSerializer.Deserialize(json, WhitelistJsonContext.Default.HashSetString) ?? new HashSet<string>(StringComparer.OrdinalIgnoreCase);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ERROR] Failed to load publisher whitelist: {ex.Message}");
            }
            return new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        }

        private void Save()
        {
            try
            {
                string json = JsonSerializer.Serialize(_trustedPublishers, WhitelistJsonContext.Default.HashSetString);
                File.WriteAllText(_configPath, json);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ERROR] Failed to save publisher whitelist: {ex.Message}");
            }
        }

        public List<string> GetTrustedPublishers()
        {
            return _trustedPublishers.OrderBy(p => p).ToList();
        }

        public bool IsTrusted(string publisherName)
        {
            return !string.IsNullOrEmpty(publisherName) && _trustedPublishers.Contains(publisherName);
        }

        public void Add(string publisherName)
        {
            if (!string.IsNullOrEmpty(publisherName) && _trustedPublishers.Add(publisherName))
            {
                Save();
            }
        }

        public void Remove(string publisherName)
        {
            if (_trustedPublishers.Remove(publisherName))
            {
                Save();
            }
        }
    }

    [JsonSourceGenerationOptions(WriteIndented = true)]
    [JsonSerializable(typeof(HashSet<string>))]
    internal partial class WhitelistJsonContext : JsonSerializerContext { }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/RulesControl.cs
--------------------------------------------------------------------------------
﻿using NetFwTypeLib;
using MinimalFirewall.TypedObjects;
using System.Data;
using System.ComponentModel;
using DarkModeForms;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Linq;
using System.Diagnostics;
using System.IO;
using System;
using System.Drawing;

namespace MinimalFirewall
{
    public partial class RulesControl : UserControl
    {
        private MainViewModel _mainViewModel = null!;
        private FirewallActionsService _actionsService = null!;
        private INetFwPolicy2 _firewallPolicy = null!;
        private WildcardRuleService _wildcardRuleService = null!;
        private BackgroundFirewallTaskService _backgroundTaskService = null!;
        private IconService _iconService = null!;
        private AppSettings _appSettings = null!;
        private DarkModeCS _dm = null!;

        private int _rulesSortColumn = -1;
        private SortOrder _rulesSortOrder = SortOrder.None;
        private BindingSource _bindingSource;
        public event Func<Task> DataRefreshRequested;
        public RulesControl()
        {
            InitializeComponent();
            this.DoubleBuffered = true;
        }

        public void Initialize(
            MainViewModel mainViewModel,
            FirewallActionsService actionsService,
            INetFwPolicy2 firewallPolicy,
            WildcardRuleService wildcardRuleService,
            BackgroundFirewallTaskService backgroundTaskService,
            IconService iconService,
            AppSettings appSettings,
            ImageList appIconList,
            DarkModeCS dm)
        {
            _mainViewModel = mainViewModel;
            _actionsService = actionsService;
            _firewallPolicy = firewallPolicy;
            _wildcardRuleService = wildcardRuleService;
            _backgroundTaskService = backgroundTaskService;
            _iconService = iconService;
            _appSettings = appSettings;
            _dm = dm;

            programFilterCheckBox.Checked = _appSettings.FilterPrograms;
            serviceFilterCheckBox.Checked = _appSettings.FilterServices;
            uwpFilterCheckBox.Checked = _appSettings.FilterUwp;
            wildcardFilterCheckBox.Checked = _appSettings.FilterWildcards;
            systemFilterCheckBox.Checked = _appSettings.FilterSystem;
            rulesSearchTextBox.Text = _appSettings.RulesSearchText;
            _rulesSortColumn = _appSettings.RulesSortColumn;
            _rulesSortOrder = (SortOrder)_appSettings.RulesSortOrder;

            rulesDataGridView.AutoGenerateColumns = false;
            _bindingSource = new BindingSource();
            rulesDataGridView.DataSource = _bindingSource;
            _mainViewModel.RulesListUpdated += OnRulesListUpdated;

            programFilterCheckBox.CheckedChanged += filterCheckBox_CheckedChanged;
            serviceFilterCheckBox.CheckedChanged += filterCheckBox_CheckedChanged;
            uwpFilterCheckBox.CheckedChanged += filterCheckBox_CheckedChanged;
            wildcardFilterCheckBox.CheckedChanged += filterCheckBox_CheckedChanged;
        }

        private void OnRulesListUpdated()
        {
            if (this.InvokeRequired)
            {
                this.Invoke(OnRulesListUpdated);
                return;
            }
            _bindingSource.DataSource = _mainViewModel.VirtualRulesData;
            _bindingSource.ResetBindings(false);
            rulesDataGridView.Refresh();
        }

        public void ApplyThemeFixes()
        {
            if (_dm == null) return;
            createRuleButton.FlatAppearance.BorderSize = 1;
            createRuleButton.FlatAppearance.BorderColor = _dm.OScolors.ControlDark;
            if (_dm.IsDarkMode)
            {
                createRuleButton.ForeColor = Color.White;
            }
            else
            {
                createRuleButton.ForeColor = SystemColors.ControlText;
            }
        }

        public async Task RefreshDataAsync(bool forceUwpScan = false, IProgress<int>? progress = null, CancellationToken token = default)
        {
            await _mainViewModel.RefreshRulesDataAsync(token, progress);
            await DisplayRulesAsync();
        }

        public async Task OnTabSelectedAsync()
        {
            await DisplayRulesAsync();
        }

        public void UpdateIconColumnVisibility()
        {
            if (advIconColumn != null)
            {
                advIconColumn.Visible = _appSettings.ShowAppIcons;
            }
        }

        private async Task DisplayRulesAsync()
        {
            ApplyRulesFilters();
            await Task.CompletedTask;
        }

        private void filterCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            _appSettings.FilterPrograms = programFilterCheckBox.Checked;
            _appSettings.FilterServices = serviceFilterCheckBox.Checked;
            _appSettings.FilterUwp = uwpFilterCheckBox.Checked;
            _appSettings.FilterWildcards = wildcardFilterCheckBox.Checked;
            _appSettings.FilterSystem = systemFilterCheckBox.Checked;
            ApplyRulesFilters();
        }

        private void ApplyRulesFilters()
        {
            var enabledTypes = new HashSet<RuleType>();
            if (programFilterCheckBox.Checked) enabledTypes.Add(RuleType.Program);
            if (serviceFilterCheckBox.Checked) enabledTypes.Add(RuleType.Service);
            if (uwpFilterCheckBox.Checked) enabledTypes.Add(RuleType.UWP);
            if (wildcardFilterCheckBox.Checked) enabledTypes.Add(RuleType.Wildcard);
            enabledTypes.Add(RuleType.Advanced);

            bool showSystemRules = systemFilterCheckBox.Checked;
            _mainViewModel.ApplyRulesFilters(rulesSearchTextBox.Text, enabledTypes, _rulesSortColumn, _rulesSortOrder, showSystemRules);
        }

        private void rulesDataGridView_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right && e.RowIndex >= 0)
            {
                var grid = (DataGridView)sender;
                var clickedRow = grid.Rows[e.RowIndex];

                if (!clickedRow.Selected)
                {
                    grid.ClearSelection();
                    clickedRow.Selected = true;
                }
            }
        }

        private void ApplyRuleMenuItem_Click(object sender, EventArgs e)
        {
            if (sender is not ToolStripMenuItem menuItem || menuItem.Tag?.ToString() is not string action || rulesDataGridView.SelectedRows.Count == 0) return;
            var items = new List<AggregatedRuleViewModel>();
            foreach (DataGridViewRow row in rulesDataGridView.SelectedRows)
            {
                if (row.DataBoundItem is AggregatedRuleViewModel vm)
                {
                    items.Add(vm);
                }
            }

            if (items.Count > 0)
            {
                foreach (var item in items)
                {
                    _mainViewModel.ApplyRuleChange(item, action);
                }
            }
        }

        private async void editRuleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (rulesDataGridView.SelectedRows.Count == 1 && rulesDataGridView.SelectedRows[0].DataBoundItem is AggregatedRuleViewModel aggRule)
            {
                var originalRule = aggRule.UnderlyingRules.FirstOrDefault();
                if (originalRule == null)
                {
                    DarkModeForms.Messenger.MessageBox("Cannot edit this rule as it has no underlying rule definition.", "Edit Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }

                using var dialog = new CreateAdvancedRuleForm(_firewallPolicy, _actionsService, originalRule);
                if (dialog.ShowDialog(this.FindForm()) == DialogResult.OK)
                {
                    if (dialog.RuleVm != null)
                    {
                        if (originalRule.HasSameSettings(dialog.RuleVm))
                        {
                            return;
                        }

                        var deletePayload = new DeleteRulesPayload { RuleIdentifiers = aggRule.UnderlyingRules.Select(r => r.Name).ToList() };
                        _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.DeleteAdvancedRules, deletePayload));

                        var createPayload = new CreateAdvancedRulePayload { ViewModel = dialog.RuleVm, InterfaceTypes = dialog.RuleVm.InterfaceTypes, IcmpTypesAndCodes = dialog.RuleVm.IcmpTypesAndCodes };
                        _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.CreateAdvancedRule, createPayload));

                        await Task.Delay(500);
                        DataRefreshRequested?.Invoke();
                    }
                }
            }
        }

        private void DeleteRuleMenuItem_Click(object sender, EventArgs e)
        {
            if (rulesDataGridView.SelectedRows.Count == 0) return;
            var items = new List<AggregatedRuleViewModel>();
            foreach (DataGridViewRow row in rulesDataGridView.SelectedRows)
            {
                if (row.DataBoundItem is AggregatedRuleViewModel vm)
                {
                    items.Add(vm);
                }
            }

            if (items.Count > 0)
            {
                var result = DarkModeForms.Messenger.MessageBox($"Are you sure you want to delete the {items.Count} selected rule(s)?", "Confirm Deletion", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (result == DialogResult.No) return;

                _mainViewModel.DeleteRules(items);
                ApplyRulesFilters();
            }
        }

        private void CreateRuleButton_Click(object sender, EventArgs e)
        {
            using var dialog = new RuleWizardForm(_actionsService, _wildcardRuleService, _backgroundTaskService, _firewallPolicy);
            if (dialog.ShowDialog(this.FindForm()) == DialogResult.OK)
            {
            }
        }

        private async void SearchTextBox_TextChanged(object sender, EventArgs e)
        {
            _appSettings.RulesSearchText = rulesSearchTextBox.Text;
            await DisplayRulesAsync();
        }

        private void rulesContextMenu_Opening(object sender, CancelEventArgs e)
        {
            if (rulesDataGridView.SelectedRows.Count == 0)
            {
                e.Cancel = true;
                return;
            }

            if (rulesDataGridView.SelectedRows[0].DataBoundItem is not AggregatedRuleViewModel rule)
            {
                e.Cancel = true;
                return;
            }

            string? appPath = rule.ApplicationName;
            openFileLocationToolStripMenuItem.Enabled = !string.IsNullOrEmpty(appPath) && File.Exists(appPath);

            var firstUnderlyingRule = rule.UnderlyingRules.FirstOrDefault();
            bool isEditableType = rule.Type == RuleType.Program || rule.Type == RuleType.Service ||
                                  rule.Type == RuleType.Advanced;
            bool hasTarget = firstUnderlyingRule != null &&
                             ((!string.IsNullOrEmpty(firstUnderlyingRule.ApplicationName) && firstUnderlyingRule.ApplicationName != "*") ||
                              !string.IsNullOrEmpty(firstUnderlyingRule.ServiceName));
            editRuleToolStripMenuItem.Enabled = rulesDataGridView.SelectedRows.Count == 1 && isEditableType && hasTarget;
        }


        private void openFileLocationToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (rulesDataGridView.SelectedRows.Count > 0 && rulesDataGridView.SelectedRows[0].DataBoundItem is AggregatedRuleViewModel rule)
            {
                string? appPath = rule.ApplicationName;

                if (!string.IsNullOrEmpty(appPath) && File.Exists(appPath))
                {
                    try
                    {
                        Process.Start("explorer.exe", $"/select, \"{appPath}\"");
                    }
                    catch (Exception ex) when (ex is Win32Exception or FileNotFoundException)
                    {
                        DarkModeForms.Messenger.MessageBox($"Could not open file location.\n\nError: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                {
                    DarkModeForms.Messenger.MessageBox("The path for this item is not available or does not exist.", "Path Not Found", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void copyDetailsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (rulesDataGridView.SelectedRows.Count > 0)
            {
                var details = new System.Text.StringBuilder();

                foreach (DataGridViewRow row in rulesDataGridView.SelectedRows)
                {
                    if (row.DataBoundItem is AggregatedRuleViewModel rule)
                    {
                        if (details.Length > 0)
                        {
                            details.AppendLine();
                            details.AppendLine();
                        }

                        details.AppendLine($"Rule Name: {rule.Name}");
                        details.AppendLine($"Type: {rule.Type}");
                        details.AppendLine($"Inbound: {rule.InboundStatus}");
                        details.AppendLine($"Outbound: {rule.OutboundStatus}");
                        details.AppendLine($"Application: {rule.ApplicationName}");
                        details.AppendLine($"Service: {rule.ServiceName}");
                        details.AppendLine($"Protocol: {rule.ProtocolName}");
                        details.AppendLine($"Local Ports: {rule.LocalPorts}");
                        details.AppendLine($"Remote Ports: {rule.RemotePorts}");
                        details.AppendLine($"Local Addresses: {rule.LocalAddresses}");
                        details.AppendLine($"Remote Addresses: {rule.RemoteAddresses}");
                        details.AppendLine($"Profiles: {rule.Profiles}");
                        details.AppendLine($"Group: {rule.Grouping}");
                        details.AppendLine($"Description: {rule.Description}");
                    }
                }

                if (details.Length > 0)
                {
                    Clipboard.SetText(details.ToString());
                }
            }
        }

        private void rulesDataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            if (e.RowIndex < 0) return;
            var grid = (DataGridView)sender;

            if (grid.Rows[e.RowIndex].DataBoundItem is not AggregatedRuleViewModel rule) return;
            if (grid.Columns[e.ColumnIndex].Name == "advIconColumn")
            {
                if (_appSettings.ShowAppIcons && !string.IsNullOrEmpty(rule.ApplicationName))
                {
                    int iconIndex = _iconService.GetIconIndex(rule.ApplicationName);
                    if (iconIndex != -1 && _iconService.ImageList != null)
                    {
                        e.Value = _iconService.ImageList.Images[iconIndex];
                    }
                }
                return;
            }

            bool hasAllow = rule.InboundStatus.Contains("Allow") || rule.OutboundStatus.Contains("Allow");
            bool hasBlock = rule.InboundStatus.Contains("Block") || rule.OutboundStatus.Contains("Block");

            if (hasAllow && hasBlock)
            {
                e.CellStyle.BackColor = Color.FromArgb(255, 255, 204);
            }
            else if (hasAllow)
            {
                e.CellStyle.BackColor = Color.FromArgb(204, 255, 204);
            }
            else if (hasBlock)
            {
                e.CellStyle.BackColor = Color.FromArgb(255, 204, 204);
            }

            if (hasAllow || hasBlock)
            {
                e.CellStyle.ForeColor = Color.Black;
            }

            if (grid.Rows[e.RowIndex].Selected)
            {
                e.CellStyle.SelectionBackColor = SystemColors.Highlight;
                e.CellStyle.SelectionForeColor = SystemColors.HighlightText;
            }
            else
            {
                e.CellStyle.SelectionBackColor = e.CellStyle.BackColor;
                e.CellStyle.SelectionForeColor = e.CellStyle.ForeColor;
            }
        }

        private void rulesDataGridView_ColumnHeaderMouseClick(object sender, DataGridViewCellMouseEventArgs e)
        {
            if (e.ColumnIndex == _rulesSortColumn)
            {
                _rulesSortOrder = (_rulesSortOrder == SortOrder.Ascending) ?
                                  SortOrder.Descending : SortOrder.Ascending;
            }
            else
            {
                _rulesSortOrder = SortOrder.Ascending;
            }

            _rulesSortColumn = e.ColumnIndex;
            _appSettings.RulesSortColumn = _rulesSortColumn;
            _appSettings.RulesSortOrder = (int)_rulesSortOrder;

            ApplyRulesFilters();
        }

        private void rulesDataGridView_RowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)
        {
            var grid = (DataGridView)sender;
            var row = grid.Rows[e.RowIndex];

            if (row.Selected) return;
            var mouseOverRow = grid.HitTest(grid.PointToClient(MousePosition).X, grid.PointToClient(MousePosition).Y).RowIndex;
            if (e.RowIndex == mouseOverRow)
            {
                using var overlayBrush = new SolidBrush(Color.FromArgb(25, Color.Black));
                e.Graphics.FillRectangle(overlayBrush, e.RowBounds);
            }
        }

        private void rulesDataGridView_CellMouseEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                var grid = (DataGridView)sender;
                grid.InvalidateRow(e.RowIndex);
            }
        }

        private void rulesDataGridView_CellMouseLeave(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                var grid = (DataGridView)sender;
                grid.InvalidateRow(e.RowIndex);
            }
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/RulesControl.Designer.cs
--------------------------------------------------------------------------------
﻿// File: RulesControl.Designer.cs
namespace MinimalFirewall
{
    partial class RulesControl
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.Button createRuleButton;
        private System.Windows.Forms.TextBox rulesSearchTextBox;
        private System.Windows.Forms.ContextMenuStrip rulesContextMenu;
        private System.Windows.Forms.ToolStripMenuItem allowToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem allowOutboundToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem allowInboundToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem allowAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem blockToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem blockOutboundToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem blockInboundToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem blockAllToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
        private System.Windows.Forms.ToolStripMenuItem deleteRuleToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator2;
        private System.Windows.Forms.ToolStripMenuItem openFileLocationToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator3;
        private System.Windows.Forms.ToolStripMenuItem copyDetailsToolStripMenuItem;
        private System.Windows.Forms.DataGridView rulesDataGridView;
        private System.Windows.Forms.DataGridViewImageColumn advIconColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advNameColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn inboundStatusColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn outboundStatusColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advProtocolColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advLocalPortsColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advRemotePortsColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advLocalAddressColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advRemoteAddressColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advProgramColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advServiceColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advProfilesColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advGroupingColumn;
        private System.Windows.Forms.DataGridViewTextBoxColumn advDescColumn;
        private System.Windows.Forms.FlowLayoutPanel filterPanel;
        private System.Windows.Forms.CheckBox programFilterCheckBox;
        private System.Windows.Forms.CheckBox serviceFilterCheckBox;
        private System.Windows.Forms.CheckBox uwpFilterCheckBox;
        private System.Windows.Forms.CheckBox wildcardFilterCheckBox;
        private System.Windows.Forms.TableLayoutPanel topPanel;
        private System.Windows.Forms.ToolStripMenuItem editRuleToolStripMenuItem;
        private System.Windows.Forms.CheckBox systemFilterCheckBox;
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle1 = new System.Windows.Forms.DataGridViewCellStyle();
            this.rulesSearchTextBox = new System.Windows.Forms.TextBox();
            this.createRuleButton = new System.Windows.Forms.Button();
            this.rulesContextMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
            this.allowToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.allowOutboundToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.allowInboundToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.allowAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.blockToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.blockOutboundToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.blockInboundToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.blockAllToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.editRuleToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.deleteRuleToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator2 = new System.Windows.Forms.ToolStripSeparator();
            this.openFileLocationToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator();
            this.copyDetailsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.rulesDataGridView = new System.Windows.Forms.DataGridView();
            this.advIconColumn = new System.Windows.Forms.DataGridViewImageColumn();
            this.advNameColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.inboundStatusColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.outboundStatusColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advProtocolColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advLocalPortsColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advRemotePortsColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advLocalAddressColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advRemoteAddressColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advProgramColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advServiceColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advProfilesColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advGroupingColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.advDescColumn = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.filterPanel = new System.Windows.Forms.FlowLayoutPanel();
            this.programFilterCheckBox = new System.Windows.Forms.CheckBox();
            this.serviceFilterCheckBox = new System.Windows.Forms.CheckBox();
            this.uwpFilterCheckBox = new System.Windows.Forms.CheckBox();
            this.wildcardFilterCheckBox = new System.Windows.Forms.CheckBox();
            this.systemFilterCheckBox = new System.Windows.Forms.CheckBox();
            this.topPanel = new System.Windows.Forms.TableLayoutPanel();
            this.rulesContextMenu.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.rulesDataGridView)).BeginInit();
            this.filterPanel.SuspendLayout();
            this.topPanel.SuspendLayout();
            this.SuspendLayout();
            // 
            // rulesSearchTextBox
            // 
            this.rulesSearchTextBox.Anchor = System.Windows.Forms.AnchorStyles.Right;
            this.rulesSearchTextBox.Location = new System.Drawing.Point(714, 18);
            this.rulesSearchTextBox.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.rulesSearchTextBox.Name = "rulesSearchTextBox";
            this.rulesSearchTextBox.PlaceholderText = "Search rules...";
            this.rulesSearchTextBox.Size = new System.Drawing.Size(285, 27);
            this.rulesSearchTextBox.TabIndex = 16;
            this.rulesSearchTextBox.TextChanged += new System.EventHandler(this.SearchTextBox_TextChanged);
            // 
            // createRuleButton
            // 
            this.createRuleButton.Anchor = System.Windows.Forms.AnchorStyles.Left;
            this.createRuleButton.Location = new System.Drawing.Point(3, 7);
            this.createRuleButton.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.createRuleButton.Name = "createRuleButton";
            this.createRuleButton.Size = new System.Drawing.Size(180, 48);
            this.createRuleButton.TabIndex = 9;
            this.createRuleButton.Text = "Create New Rule...";
            this.createRuleButton.UseVisualStyleBackColor = true;
            this.createRuleButton.Click += new System.EventHandler(this.CreateRuleButton_Click);
            // 
            // rulesContextMenu
            // 
            this.rulesContextMenu.ImageScalingSize = new System.Drawing.Size(20, 20);
            this.rulesContextMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.allowToolStripMenuItem,
            this.blockToolStripMenuItem,
            this.toolStripSeparator1,
            this.editRuleToolStripMenuItem,
            this.deleteRuleToolStripMenuItem,
            this.toolStripSeparator2,
            this.openFileLocationToolStripMenuItem,
            this.toolStripSeparator3,
            this.copyDetailsToolStripMenuItem});
            this.rulesContextMenu.Name = "rulesContextMenu";
            this.rulesContextMenu.Size = new System.Drawing.Size(207, 194);
            this.rulesContextMenu.Opening += new System.ComponentModel.CancelEventHandler(this.rulesContextMenu_Opening);
            // 
            // allowToolStripMenuItem
            // 
            this.allowToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.allowOutboundToolStripMenuItem,
            this.allowInboundToolStripMenuItem,
            this.allowAllToolStripMenuItem});
            this.allowToolStripMenuItem.Name = "allowToolStripMenuItem";
            this.allowToolStripMenuItem.Size = new System.Drawing.Size(206, 24);
            this.allowToolStripMenuItem.Text = "Allow";
            // 
            // allowOutboundToolStripMenuItem
            // 
            this.allowOutboundToolStripMenuItem.Name = "allowOutboundToolStripMenuItem";
            this.allowOutboundToolStripMenuItem.Size = new System.Drawing.Size(159, 26);
            this.allowOutboundToolStripMenuItem.Tag = "Allow (Outbound)";
            this.allowOutboundToolStripMenuItem.Text = "Outbound";
            this.allowOutboundToolStripMenuItem.Click += new System.EventHandler(this.ApplyRuleMenuItem_Click);
            // 
            // allowInboundToolStripMenuItem
            // 
            this.allowInboundToolStripMenuItem.Name = "allowInboundToolStripMenuItem";
            this.allowInboundToolStripMenuItem.Size = new System.Drawing.Size(159, 26);
            this.allowInboundToolStripMenuItem.Tag = "Allow (Inbound)";
            this.allowInboundToolStripMenuItem.Text = "Inbound";
            this.allowInboundToolStripMenuItem.Click += new System.EventHandler(this.ApplyRuleMenuItem_Click);
            // 
            // allowAllToolStripMenuItem
            // 
            this.allowAllToolStripMenuItem.Name = "allowAllToolStripMenuItem";
            this.allowAllToolStripMenuItem.Size = new System.Drawing.Size(159, 26);
            this.allowAllToolStripMenuItem.Tag = "Allow (All)";
            this.allowAllToolStripMenuItem.Text = "All";
            this.allowAllToolStripMenuItem.Click += new System.EventHandler(this.ApplyRuleMenuItem_Click);
            // 
            // blockToolStripMenuItem
            // 
            this.blockToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.blockOutboundToolStripMenuItem,
            this.blockInboundToolStripMenuItem,
            this.blockAllToolStripMenuItem});
            this.blockToolStripMenuItem.Name = "blockToolStripMenuItem";
            this.blockToolStripMenuItem.Size = new System.Drawing.Size(206, 24);
            this.blockToolStripMenuItem.Text = "Block";
            // 
            // blockOutboundToolStripMenuItem
            // 
            this.blockOutboundToolStripMenuItem.Name = "blockOutboundToolStripMenuItem";
            this.blockOutboundToolStripMenuItem.Size = new System.Drawing.Size(159, 26);
            this.blockOutboundToolStripMenuItem.Tag = "Block (Outbound)";
            this.blockOutboundToolStripMenuItem.Text = "Outbound";
            this.blockOutboundToolStripMenuItem.Click += new System.EventHandler(this.ApplyRuleMenuItem_Click);
            // 
            // blockInboundToolStripMenuItem
            // 
            this.blockInboundToolStripMenuItem.Name = "blockInboundToolStripMenuItem";
            this.blockInboundToolStripMenuItem.Size = new System.Drawing.Size(159, 26);
            this.blockInboundToolStripMenuItem.Tag = "Block (Inbound)";
            this.blockInboundToolStripMenuItem.Text = "Inbound";
            this.blockInboundToolStripMenuItem.Click += new System.EventHandler(this.ApplyRuleMenuItem_Click);
            // 
            // blockAllToolStripMenuItem
            // 
            this.blockAllToolStripMenuItem.Name = "blockAllToolStripMenuItem";
            this.blockAllToolStripMenuItem.Size = new System.Drawing.Size(159, 26);
            this.blockAllToolStripMenuItem.Tag = "Block (All)";
            this.blockAllToolStripMenuItem.Text = "All";
            this.blockAllToolStripMenuItem.Click += new System.EventHandler(this.ApplyRuleMenuItem_Click);
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            this.toolStripSeparator1.Size = new System.Drawing.Size(203, 6);
            // 
            // editRuleToolStripMenuItem
            // 
            this.editRuleToolStripMenuItem.Name = "editRuleToolStripMenuItem";
            this.editRuleToolStripMenuItem.Size = new System.Drawing.Size(206, 24);
            this.editRuleToolStripMenuItem.Text = "Edit Rule...";
            this.editRuleToolStripMenuItem.Click += new System.EventHandler(this.editRuleToolStripMenuItem_Click);
            // 
            // deleteRuleToolStripMenuItem
            // 
            this.deleteRuleToolStripMenuItem.Name = "deleteRuleToolStripMenuItem";
            this.deleteRuleToolStripMenuItem.Size = new System.Drawing.Size(206, 24);
            this.deleteRuleToolStripMenuItem.Text = "Delete Rule(s)";
            this.deleteRuleToolStripMenuItem.Click += new System.EventHandler(this.DeleteRuleMenuItem_Click);
            // 
            // toolStripSeparator2
            // 
            this.toolStripSeparator2.Name = "toolStripSeparator2";
            this.toolStripSeparator2.Size = new System.Drawing.Size(203, 6);
            // 
            // openFileLocationToolStripMenuItem
            // 
            this.openFileLocationToolStripMenuItem.Name = "openFileLocationToolStripMenuItem";
            this.openFileLocationToolStripMenuItem.Size = new System.Drawing.Size(206, 24);
            this.openFileLocationToolStripMenuItem.Text = "Open File Location";
            this.openFileLocationToolStripMenuItem.Click += new System.EventHandler(this.openFileLocationToolStripMenuItem_Click);
            // 
            // toolStripSeparator3
            // 
            this.toolStripSeparator3.Name = "toolStripSeparator3";
            this.toolStripSeparator3.Size = new System.Drawing.Size(203, 6);
            // 
            // copyDetailsToolStripMenuItem
            // 
            this.copyDetailsToolStripMenuItem.Name = "copyDetailsToolStripMenuItem";
            this.copyDetailsToolStripMenuItem.Size = new System.Drawing.Size(206, 24);
            this.copyDetailsToolStripMenuItem.Text = "Copy Details";
            this.copyDetailsToolStripMenuItem.Click += new System.EventHandler(this.copyDetailsToolStripMenuItem_Click);
            // 
            // rulesDataGridView
            // 
            this.rulesDataGridView.AllowUserToAddRows = false;
            this.rulesDataGridView.AllowUserToDeleteRows = false;
            this.rulesDataGridView.AllowUserToResizeRows = false;
            this.rulesDataGridView.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
            | System.Windows.Forms.AnchorStyles.Left)
            | System.Windows.Forms.AnchorStyles.Right)));
            this.rulesDataGridView.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            this.rulesDataGridView.BackgroundColor = System.Drawing.SystemColors.Control;
            this.rulesDataGridView.BorderStyle = System.Windows.Forms.BorderStyle.None;
            this.rulesDataGridView.CellBorderStyle = System.Windows.Forms.DataGridViewCellBorderStyle.None;
            this.rulesDataGridView.ColumnHeadersBorderStyle = System.Windows.Forms.DataGridViewHeaderBorderStyle.None;
            dataGridViewCellStyle1.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle1.BackColor = System.Drawing.SystemColors.Control;
            dataGridViewCellStyle1.Font = new System.Drawing.Font("Segoe UI", 9F);
            dataGridViewCellStyle1.ForeColor = System.Drawing.SystemColors.WindowText;
            dataGridViewCellStyle1.SelectionBackColor = System.Drawing.SystemColors.Highlight;
            dataGridViewCellStyle1.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
            dataGridViewCellStyle1.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
            this.rulesDataGridView.ColumnHeadersDefaultCellStyle = dataGridViewCellStyle1;
            this.rulesDataGridView.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.rulesDataGridView.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
            this.advIconColumn,
            this.advNameColumn,
            this.inboundStatusColumn,
            this.outboundStatusColumn,
            this.advProtocolColumn,
            this.advLocalPortsColumn,
            this.advRemotePortsColumn,
            this.advLocalAddressColumn,
            this.advRemoteAddressColumn,
            this.advProgramColumn,
            this.advServiceColumn,
            this.advProfilesColumn,
            this.advGroupingColumn,
            this.advDescColumn});
            this.rulesDataGridView.ContextMenuStrip = this.rulesContextMenu;
            this.rulesDataGridView.EnableHeadersVisualStyles = false;
            this.rulesDataGridView.GridColor = System.Drawing.SystemColors.Control;
            this.rulesDataGridView.Location = new System.Drawing.Point(3, 69);
            this.rulesDataGridView.Name = "rulesDataGridView";
            this.rulesDataGridView.ReadOnly = true;
            this.rulesDataGridView.RowHeadersVisible = false;
            this.rulesDataGridView.RowTemplate.Height = 28;
            this.rulesDataGridView.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
            this.rulesDataGridView.ShowCellToolTips = true;
            this.rulesDataGridView.Size = new System.Drawing.Size(996, 839);
            this.rulesDataGridView.TabIndex = 18;
            this.rulesDataGridView.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(this.rulesDataGridView_CellFormatting);
            this.rulesDataGridView.CellMouseDown += new System.Windows.Forms.DataGridViewCellMouseEventHandler(this.rulesDataGridView_CellMouseDown);
            this.rulesDataGridView.CellMouseEnter += new System.Windows.Forms.DataGridViewCellEventHandler(this.rulesDataGridView_CellMouseEnter);
            this.rulesDataGridView.CellMouseLeave += new System.Windows.Forms.DataGridViewCellEventHandler(this.rulesDataGridView_CellMouseLeave);
            this.rulesDataGridView.ColumnHeaderMouseClick += new System.Windows.Forms.DataGridViewCellMouseEventHandler(this.rulesDataGridView_ColumnHeaderMouseClick);
            this.rulesDataGridView.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler(this.rulesDataGridView_RowPostPaint);
            // 
            // advIconColumn
            // 
            this.advIconColumn.AutoSizeMode = System.Windows.Forms.DataGridViewAutoSizeColumnMode.None;
            this.advIconColumn.FillWeight = 3F;
            this.advIconColumn.HeaderText = "";
            this.advIconColumn.ImageLayout = System.Windows.Forms.DataGridViewImageCellLayout.Zoom;
            this.advIconColumn.MinimumWidth = 32;
            this.advIconColumn.Name = "advIconColumn";
            this.advIconColumn.ReadOnly = true;
            this.advIconColumn.Resizable = System.Windows.Forms.DataGridViewTriState.False;
            this.advIconColumn.Width = 32;
            // 
            // advNameColumn
            // 
            this.advNameColumn.DataPropertyName = "Name";
            this.advNameColumn.FillWeight = 20F;
            this.advNameColumn.HeaderText = "Name";
            this.advNameColumn.Name = "advNameColumn";
            this.advNameColumn.ReadOnly = true;
            // 
            // inboundStatusColumn
            // 
            this.inboundStatusColumn.DataPropertyName = "InboundStatus";
            this.inboundStatusColumn.FillWeight = 10F;
            this.inboundStatusColumn.HeaderText = "Inbound";
            this.inboundStatusColumn.Name = "inboundStatusColumn";
            this.inboundStatusColumn.ReadOnly = true;
            // 
            // outboundStatusColumn
            // 
            this.outboundStatusColumn.DataPropertyName = "OutboundStatus";
            this.outboundStatusColumn.FillWeight = 10F;
            this.outboundStatusColumn.HeaderText = "Outbound";
            this.outboundStatusColumn.Name = "outboundStatusColumn";
            this.outboundStatusColumn.ReadOnly = true;
            // 
            // advProtocolColumn
            // 
            this.advProtocolColumn.DataPropertyName = "ProtocolName";
            this.advProtocolColumn.FillWeight = 8F;
            this.advProtocolColumn.HeaderText = "Protocol";
            this.advProtocolColumn.Name = "advProtocolColumn";
            this.advProtocolColumn.ReadOnly = true;
            // 
            // advLocalPortsColumn
            // 
            this.advLocalPortsColumn.DataPropertyName = "LocalPorts";
            this.advLocalPortsColumn.FillWeight = 12F;
            this.advLocalPortsColumn.HeaderText = "Local Ports";
            this.advLocalPortsColumn.Name = "advLocalPortsColumn";
            this.advLocalPortsColumn.ReadOnly = true;
            // 
            // advRemotePortsColumn
            // 
            this.advRemotePortsColumn.DataPropertyName = "RemotePorts";
            this.advRemotePortsColumn.FillWeight = 12F;
            this.advRemotePortsColumn.HeaderText = "Remote Ports";
            this.advRemotePortsColumn.Name = "advRemotePortsColumn";
            this.advRemotePortsColumn.ReadOnly = true;
            // 
            // advLocalAddressColumn
            // 
            this.advLocalAddressColumn.DataPropertyName = "LocalAddresses";
            this.advLocalAddressColumn.FillWeight = 15F;
            this.advLocalAddressColumn.HeaderText = "Local Address";
            this.advLocalAddressColumn.Name = "advLocalAddressColumn";
            this.advLocalAddressColumn.ReadOnly = true;
            // 
            // advRemoteAddressColumn
            // 
            this.advRemoteAddressColumn.DataPropertyName = "RemoteAddresses";
            this.advRemoteAddressColumn.FillWeight = 15F;
            this.advRemoteAddressColumn.HeaderText = "Remote Address";
            this.advRemoteAddressColumn.Name = "advRemoteAddressColumn";
            this.advRemoteAddressColumn.ReadOnly = true;
            // 
            // advProgramColumn
            // 
            this.advProgramColumn.DataPropertyName = "ApplicationName";
            this.advProgramColumn.FillWeight = 25F;
            this.advProgramColumn.HeaderText = "Program";
            this.advProgramColumn.Name = "advProgramColumn";
            this.advProgramColumn.ReadOnly = true;
            // 
            // advServiceColumn
            // 
            this.advServiceColumn.DataPropertyName = "ServiceName";
            this.advServiceColumn.FillWeight = 15F;
            this.advServiceColumn.HeaderText = "Service";
            this.advServiceColumn.Name = "advServiceColumn";
            this.advServiceColumn.ReadOnly = true;
            // 
            // advProfilesColumn
            // 
            this.advProfilesColumn.DataPropertyName = "Profiles";
            this.advProfilesColumn.FillWeight = 10F;
            this.advProfilesColumn.HeaderText = "Profiles";
            this.advProfilesColumn.Name = "advProfilesColumn";
            this.advProfilesColumn.ReadOnly = true;
            // 
            // advGroupingColumn
            // 
            this.advGroupingColumn.DataPropertyName = "Grouping";
            this.advGroupingColumn.FillWeight = 15F;
            this.advGroupingColumn.HeaderText = "Group";
            this.advGroupingColumn.Name = "advGroupingColumn";
            this.advGroupingColumn.ReadOnly = true;
            // 
            // advDescColumn
            // 
            this.advDescColumn.DataPropertyName = "Description";
            this.advDescColumn.FillWeight = 30F;
            this.advDescColumn.HeaderText = "Description";
            this.advDescColumn.Name = "advDescColumn";
            this.advDescColumn.ReadOnly = true;
            // 
            // filterPanel
            // 
            this.filterPanel.Anchor = System.Windows.Forms.AnchorStyles.Left;
            this.filterPanel.AutoSize = true;
            this.filterPanel.Controls.Add(this.programFilterCheckBox);
            this.filterPanel.Controls.Add(this.serviceFilterCheckBox);
            this.filterPanel.Controls.Add(this.uwpFilterCheckBox);
            this.filterPanel.Controls.Add(this.wildcardFilterCheckBox);
            this.filterPanel.Controls.Add(this.systemFilterCheckBox);
            this.filterPanel.Location = new System.Drawing.Point(189, 15);
            this.filterPanel.Name = "filterPanel";
            this.filterPanel.Size = new System.Drawing.Size(421, 32);
            this.filterPanel.TabIndex = 19;
            this.filterPanel.WrapContents = false;
            // 
            // programFilterCheckBox
            // 
            this.programFilterCheckBox.AutoSize = true;
            this.programFilterCheckBox.Checked = true;
            this.programFilterCheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
            this.programFilterCheckBox.Location = new System.Drawing.Point(3, 3);
            this.programFilterCheckBox.Name = "programFilterCheckBox";
            this.programFilterCheckBox.Size = new System.Drawing.Size(91, 24);
            this.programFilterCheckBox.TabIndex = 0;
            this.programFilterCheckBox.Text = "Program";
            this.programFilterCheckBox.UseVisualStyleBackColor = true;
            // 
            // serviceFilterCheckBox
            // 
            this.serviceFilterCheckBox.AutoSize = true;
            this.serviceFilterCheckBox.Checked = true;
            this.serviceFilterCheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
            this.serviceFilterCheckBox.Location = new System.Drawing.Point(100, 3);
            this.serviceFilterCheckBox.Name = "serviceFilterCheckBox";
            this.serviceFilterCheckBox.Size = new System.Drawing.Size(78, 24);
            this.serviceFilterCheckBox.TabIndex = 1;
            this.serviceFilterCheckBox.Text = "Service";
            this.serviceFilterCheckBox.UseVisualStyleBackColor = true;
            // 
            // uwpFilterCheckBox
            // 
            this.uwpFilterCheckBox.AutoSize = true;
            this.uwpFilterCheckBox.Checked = true;
            this.uwpFilterCheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
            this.uwpFilterCheckBox.Location = new System.Drawing.Point(184, 3);
            this.uwpFilterCheckBox.Name = "uwpFilterCheckBox";
            this.uwpFilterCheckBox.Size = new System.Drawing.Size(64, 24);
            this.uwpFilterCheckBox.TabIndex = 2;
            this.uwpFilterCheckBox.Text = "UWP";
            this.uwpFilterCheckBox.UseVisualStyleBackColor = true;
            // 
            // wildcardFilterCheckBox
            // 
            this.wildcardFilterCheckBox.AutoSize = true;
            this.wildcardFilterCheckBox.Checked = true;
            this.wildcardFilterCheckBox.CheckState = System.Windows.Forms.CheckState.Checked;
            this.wildcardFilterCheckBox.Location = new System.Drawing.Point(254, 3);
            this.wildcardFilterCheckBox.Name = "wildcardFilterCheckBox";
            this.wildcardFilterCheckBox.Size = new System.Drawing.Size(88, 24);
            this.wildcardFilterCheckBox.TabIndex = 3;
            this.wildcardFilterCheckBox.Text = "Wildcard";
            this.wildcardFilterCheckBox.UseVisualStyleBackColor = true;
            // 
            // systemFilterCheckBox
            // 
            this.systemFilterCheckBox.AutoSize = true;
            this.systemFilterCheckBox.Location = new System.Drawing.Point(348, 3);
            this.systemFilterCheckBox.Name = "systemFilterCheckBox";
            this.systemFilterCheckBox.Size = new System.Drawing.Size(79, 24);
            this.systemFilterCheckBox.TabIndex = 5;
            this.systemFilterCheckBox.Text = "System";
            this.systemFilterCheckBox.UseVisualStyleBackColor = true;
            this.systemFilterCheckBox.CheckedChanged += new System.EventHandler(this.filterCheckBox_CheckedChanged);
            // 
            // topPanel
            // 
            this.topPanel.ColumnCount = 3;
            this.topPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
            this.topPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.topPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle());
            this.topPanel.Controls.Add(this.createRuleButton, 0, 0);
            this.topPanel.Controls.Add(this.rulesSearchTextBox, 2, 0);
            this.topPanel.Controls.Add(this.filterPanel, 1, 0);
            this.topPanel.Dock = System.Windows.Forms.DockStyle.Top;
            this.topPanel.Location = new System.Drawing.Point(0, 0);
            this.topPanel.Name = "topPanel";
            this.topPanel.RowCount = 1;
            this.topPanel.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 100F));
            this.topPanel.Size = new System.Drawing.Size(1002, 63);
            this.topPanel.TabIndex = 20;
            // 
            // RulesControl
            // 
            this.Controls.Add(this.topPanel);
            this.Controls.Add(this.rulesDataGridView);
            this.Name = "RulesControl";
            this.Size = new System.Drawing.Size(1002, 911);
            this.rulesContextMenu.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.rulesDataGridView)).EndInit();
            this.filterPanel.ResumeLayout(false);
            this.filterPanel.PerformLayout();
            this.topPanel.ResumeLayout(false);
            this.topPanel.PerformLayout();
            this.ResumeLayout(false);
        }
    }
}


--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/RuleWizardForm.cs
--------------------------------------------------------------------------------
﻿// File: RuleWizardForm.cs
using DarkModeForms;
using MinimalFirewall.TypedObjects;
using System.IO;
using NetFwTypeLib;
using System.Net;

namespace MinimalFirewall
{
    public partial class RuleWizardForm : Form
    {
        private enum WizardStep { Selection, GetAction, GetProgram, GetDirection, GetPorts, GetProtocol, GetName, Summary, GetService, GetFileShareIP, GetBlockDeviceIP, GetRestrictApp }
        private enum RuleTemplate { None, ProgramRule, PortRule, BlockService, AllowFileShare, BlockDevice, RestrictApp }

        private WizardStep _currentStep = WizardStep.Selection;
        private RuleTemplate _selectedTemplate = RuleTemplate.None;
        private readonly Stack<WizardStep> _history = new Stack<WizardStep>();

        private readonly FirewallActionsService _actionsService;
        private readonly WildcardRuleService _wildcardRuleService;
        private readonly BackgroundFirewallTaskService _backgroundTaskService;
        private readonly INetFwPolicy2 _firewallPolicy;
        private readonly DarkModeCS dm;

        private string _wizardAppPath = "";
        private string _wizardPorts = "";
        private int _wizardProtocol = 0;
        private string _wizardRuleName = "";
        private Actions _wizardAction = Actions.Allow;
        private Directions _wizardDirection = Directions.Outgoing;
        private string _wizardServiceName = "";
        private string _wizardRemoteIP = "";
        public RuleWizardForm(FirewallActionsService actionsService, WildcardRuleService wildcardRuleService, BackgroundFirewallTaskService backgroundTaskService, INetFwPolicy2 firewallPolicy)
        {
            InitializeComponent();
            dm = new DarkModeCS(this);
            _actionsService = actionsService;
            _wildcardRuleService = wildcardRuleService;
            _backgroundTaskService = backgroundTaskService;
            _firewallPolicy = firewallPolicy;

            GoToStep(WizardStep.Selection);
        }

        private void GoForwardTo(WizardStep newStep)
        {
            _history.Push(_currentStep);
            GoToStep(newStep);
        }

        private void GoBack()
        {
            if (_history.Count > 0)
            {
                var previousStep = _history.Pop();
                GoToStep(previousStep);
            }
        }

        private void GoToStep(WizardStep newStep)
        {
            _currentStep = newStep;
            pnlSelection.Visible = _currentStep == WizardStep.Selection;
            pnlGetAction.Visible = _currentStep == WizardStep.GetAction;
            pnlGetProgram.Visible = _currentStep == WizardStep.GetProgram;
            pnlGetDirection.Visible = _currentStep == WizardStep.GetDirection;
            pnlGetPorts.Visible = _currentStep == WizardStep.GetPorts;
            pnlGetProtocol.Visible = _currentStep == WizardStep.GetProtocol;
            pnlGetName.Visible = _currentStep == WizardStep.GetName;
            pnlSummary.Visible = _currentStep == WizardStep.Summary;
            pnlGetService.Visible = _currentStep == WizardStep.GetService;
            pnlGetFileShareIP.Visible = _currentStep == WizardStep.GetFileShareIP;
            pnlGetBlockDeviceIP.Visible = _currentStep == WizardStep.GetBlockDeviceIP;
            pnlGetRestrictApp.Visible = _currentStep == WizardStep.GetRestrictApp;
            backButton.Enabled = _history.Count > 0;
            nextButton.Text = "Next";

            switch (_currentStep)
            {
                case WizardStep.Selection:
                    this.Text = "Create New Rule";
                    mainHeaderLabel.Text = "What would you like to do?";
                    backButton.Enabled = false;
                    nextButton.Visible = false;
                    break;
                case WizardStep.GetAction:
                    this.Text = "Step 1: Choose Action";
                    mainHeaderLabel.Text = "Do you want to allow or block the program?";
                    nextButton.Visible = true;
                    break;
                case WizardStep.GetProgram:
                    this.Text = "Step 2: Select a Program";
                    mainHeaderLabel.Text = "Select the program's main executable file (.exe)";
                    nextButton.Visible = true;
                    break;
                case WizardStep.GetDirection:
                    this.Text = "Step 3: Choose Direction";
                    mainHeaderLabel.Text = "Apply this rule to which connection direction?";
                    nextButton.Text = "Finish";
                    break;
                case WizardStep.GetPorts:
                    this.Text = "Step 1: Enter Ports";
                    mainHeaderLabel.Text = "What port or port range is needed?";
                    nextButton.Visible = true;
                    break;
                case WizardStep.GetProtocol:
                    this.Text = "Step 2: Select Protocol";
                    mainHeaderLabel.Text = "What protocol does it use?";
                    break;
                case WizardStep.GetName:
                    this.Text = "Step 3: Name Your Rule";
                    mainHeaderLabel.Text = "Give your new rule a descriptive name.";
                    nextButton.Text = "Finish";
                    break;
                case WizardStep.GetService:
                    this.Text = "Step 1: Select a Service";
                    mainHeaderLabel.Text = "Select a Windows Service to block";
                    nextButton.Visible = true;
                    if (serviceListBox.Items.Count == 0)
                    {
                        var services = SystemDiscoveryService.GetServicesWithExePaths();
                        foreach (var service in services.OrderBy(s => s.DisplayName))
                        {
                            serviceListBox.Items.Add($"{service.DisplayName} ({service.ServiceName})");
                        }
                    }
                    break;
                case WizardStep.GetFileShareIP:
                    this.Text = "Step 1: Enter IP Address";
                    mainHeaderLabel.Text = "Enter the local IP of the trusted computer";
                    nextButton.Visible = true;
                    nextButton.Text = "Finish";
                    break;
                case WizardStep.GetBlockDeviceIP:
                    this.Text = "Step 1: Enter IP Address";
                    mainHeaderLabel.Text = "Enter the local IP of the device to block";
                    nextButton.Visible = true;
                    nextButton.Text = "Finish";
                    break;
                case WizardStep.GetRestrictApp:
                    this.Text = "Step 1: Select a Program";
                    mainHeaderLabel.Text = "Select the program to restrict to your local network";
                    nextButton.Visible = true;
                    nextButton.Text = "Finish";
                    break;
                case WizardStep.Summary:
                    this.Text = "Summary";
                    mainHeaderLabel.Text = "The following rule will be created:";
                    BuildSummary();
                    nextButton.Text = "Finish";
                    break;
            }
        }

        private void nextButton_Click(object sender, EventArgs e)
        {
            if (!ValidateStep()) return;
            ProcessStepLogic();
        }

        private void backButton_Click(object sender, EventArgs e)
        {
            GoBack();
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel;
            this.Close();
        }

        private void programRuleButton_Click(object sender, EventArgs e)
        {
            _selectedTemplate = RuleTemplate.ProgramRule;
            GoForwardTo(WizardStep.GetAction);
        }

        private void portRuleButton_Click(object sender, EventArgs e)
        {
            _selectedTemplate = RuleTemplate.PortRule;
            GoForwardTo(WizardStep.GetPorts);
        }

        private void browseButton_Click(object sender, EventArgs e)
        {
            using var openFileDialog = new OpenFileDialog
            {
                Filter = "Executables (*.exe)|*.exe|All files (*.*)|*.*",
                Title = "Select a program"
            };
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                programPathTextBox.Text = openFileDialog.FileName;
            }
        }

        private void portsBrowseButton_Click(object sender, EventArgs e)
        {
            using var openFileDialog = new OpenFileDialog
            {
                Filter = "Executables (*.exe)|*.exe|All files (*.*)|*.*",
                Title = "Select a program"
            };
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                portsProgramPathTextBox.Text = openFileDialog.FileName;
            }
        }

        private void restrictAppBrowseButton_Click(object sender, EventArgs e)
        {
            using var openFileDialog = new OpenFileDialog
            {
                Filter = "Executables (*.exe)|*.exe|All files (*.*)|*.*",
                Title = "Select a program"
            };
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                restrictAppPathTextBox.Text = openFileDialog.FileName;
            }
        }


        private void wildcardRuleButton_Click(object sender, EventArgs e)
        {
            using var wildcardDialog = new WildcardCreatorForm(_wildcardRuleService);
            if (wildcardDialog.ShowDialog(this) == DialogResult.OK)
            {
                var newRule = new WildcardRule
                {
                    FolderPath = wildcardDialog.FolderPath,
                    ExeName = wildcardDialog.ExeName,
                    Action = wildcardDialog.FinalAction
                };
                _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.AddWildcardRule, newRule));
                this.DialogResult = DialogResult.OK;
                this.Close();
            }
        }

        private void advancedRuleButton_Click(object sender, EventArgs e)
        {
            using var dialog = new CreateAdvancedRuleForm(_firewallPolicy, _actionsService);
            if (dialog.ShowDialog(this) == DialogResult.OK)
            {
                if (dialog.RuleVm != null)
                {
                    var payload = new CreateAdvancedRulePayload { ViewModel = dialog.RuleVm, InterfaceTypes = dialog.RuleVm.InterfaceTypes, IcmpTypesAndCodes = dialog.RuleVm.IcmpTypesAndCodes };
                    _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.CreateAdvancedRule, payload));
                }
                this.DialogResult = DialogResult.OK;
                this.Close();
            }
        }

        private void blockServiceButton_Click(object sender, EventArgs e)
        {
            _selectedTemplate = RuleTemplate.BlockService;
            GoForwardTo(WizardStep.GetService);
        }

        private void allowFileShareButton_Click(object sender, EventArgs e)
        {
            _selectedTemplate = RuleTemplate.AllowFileShare;
            GoForwardTo(WizardStep.GetFileShareIP);
        }

        private void blockDeviceButton_Click(object sender, EventArgs e)
        {
            _selectedTemplate = RuleTemplate.BlockDevice;
            GoForwardTo(WizardStep.GetBlockDeviceIP);
        }

        private void restrictAppButton_Click(object sender, EventArgs e)
        {
            _selectedTemplate = RuleTemplate.RestrictApp;
            GoForwardTo(WizardStep.GetRestrictApp);
        }

        private void restrictToProgramCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            bool isChecked = restrictToProgramCheckBox.Checked;
            portsProgramPathTextBox.Visible = isChecked;
            portsBrowseButton.Visible = isChecked;
            if (!isChecked)
            {
                portsProgramPathTextBox.Text = string.Empty;
            }
        }

        private bool ValidateStep()
        {
            switch (_currentStep)
            {
                case WizardStep.GetProgram:
                    if (string.IsNullOrWhiteSpace(programPathTextBox.Text) || !File.Exists(Environment.ExpandEnvironmentVariables(programPathTextBox.Text)))
                    {
                        Messenger.MessageBox("Please select a valid program file.", "Invalid File", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                    break;
                case WizardStep.GetPorts:
                    if (string.IsNullOrWhiteSpace(portsTextBox.Text))
                    {
                        Messenger.MessageBox("Please enter a port or port range.", "Invalid Port", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                    if (restrictToProgramCheckBox.Checked && (string.IsNullOrWhiteSpace(portsProgramPathTextBox.Text) || !File.Exists(Environment.ExpandEnvironmentVariables(portsProgramPathTextBox.Text))))
                    {
                        Messenger.MessageBox("Please select a valid program file.", "Invalid File", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                    break;
                case WizardStep.GetName:
                    if (string.IsNullOrWhiteSpace(ruleNameTextBox.Text))
                    {
                        Messenger.MessageBox("Please enter a name for the rule.", "Invalid Name", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                    break;
                case WizardStep.GetService:
                    if (serviceListBox.SelectedItem == null && string.IsNullOrWhiteSpace(serviceNameTextBox.Text))
                    {
                        Messenger.MessageBox("Please select a service from the list or enter a service name.", "No Service Selected", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                    break;
                case WizardStep.GetFileShareIP:
                    if (string.IsNullOrWhiteSpace(fileShareIpTextBox.Text) || !IPAddress.TryParse(fileShareIpTextBox.Text, out _))
                    {
                        Messenger.MessageBox("Please enter a valid IP address.", "Invalid IP Address", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                    break;
                case WizardStep.GetBlockDeviceIP:
                    if (string.IsNullOrWhiteSpace(blockDeviceIpTextBox.Text) || !IPAddress.TryParse(blockDeviceIpTextBox.Text, out _))
                    {
                        Messenger.MessageBox("Please enter a valid IP address.", "Invalid IP Address", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                    break;
                case WizardStep.GetRestrictApp:
                    if (string.IsNullOrWhiteSpace(restrictAppPathTextBox.Text) || !File.Exists(Environment.ExpandEnvironmentVariables(restrictAppPathTextBox.Text)))
                    {
                        Messenger.MessageBox("Please select a valid program file.", "Invalid File", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return false;
                    }
                    break;
            }
            return true;
        }

        private void ProcessStepLogic()
        {
            switch (_currentStep)
            {
                case WizardStep.GetAction:
                    _wizardAction = allowActionRadioButton.Checked ? Actions.Allow : Actions.Block;
                    GoForwardTo(WizardStep.GetProgram);
                    break;

                case WizardStep.GetProgram:
                    _wizardAppPath = programPathTextBox.Text;
                    GoForwardTo(WizardStep.GetDirection);
                    break;

                case WizardStep.GetDirection:
                    if (inboundRadioButton.Checked) _wizardDirection = Directions.Incoming;
                    else if (outboundRadioButton.Checked) _wizardDirection = Directions.Outgoing;
                    else _wizardDirection = Directions.Incoming | Directions.Outgoing;
                    GoForwardTo(WizardStep.Summary);
                    break;
                case WizardStep.GetPorts:
                    _wizardPorts = portsTextBox.Text;
                    _wizardAppPath = restrictToProgramCheckBox.Checked ? portsProgramPathTextBox.Text : string.Empty;
                    GoForwardTo(WizardStep.GetProtocol);
                    break;

                case WizardStep.GetProtocol:
                    if (tcpRadioButton.Checked) _wizardProtocol = 6;
                    else if (udpRadioButton.Checked) _wizardProtocol = 17;
                    else _wizardProtocol = 256;
                    ruleNameTextBox.Text = string.IsNullOrEmpty(_wizardAppPath)
                        ? $"Allow Port {_wizardPorts}"
                        : $"Allow {Path.GetFileNameWithoutExtension(_wizardAppPath)} Port {_wizardPorts}";
                    GoForwardTo(WizardStep.GetName);
                    break;

                case WizardStep.GetName:
                    _wizardRuleName = ruleNameTextBox.Text;
                    GoForwardTo(WizardStep.Summary);
                    break;

                case WizardStep.GetService:
                    if (serviceListBox.SelectedItem != null)
                    {
                        string selected = serviceListBox.SelectedItem.ToString();
                        _wizardServiceName = selected.Substring(selected.LastIndexOf('(') + 1).TrimEnd(')');
                    }
                    else
                    {
                        _wizardServiceName = serviceNameTextBox.Text;
                    }
                    GoForwardTo(WizardStep.Summary);
                    break;

                case WizardStep.GetFileShareIP:
                    _wizardRemoteIP = fileShareIpTextBox.Text;
                    GoForwardTo(WizardStep.Summary);
                    break;

                case WizardStep.GetBlockDeviceIP:
                    _wizardRemoteIP = blockDeviceIpTextBox.Text;
                    GoForwardTo(WizardStep.Summary);
                    break;

                case WizardStep.GetRestrictApp:
                    _wizardAppPath = restrictAppPathTextBox.Text;
                    GoForwardTo(WizardStep.Summary);
                    break;

                case WizardStep.Summary:
                    CreateRule();
                    this.DialogResult = DialogResult.OK;
                    this.Close();
                    break;
            }
        }

        private void BuildSummary()
        {
            var sb = new System.Text.StringBuilder();
            switch (_selectedTemplate)
            {
                case RuleTemplate.ProgramRule:
                    sb.AppendLine($"Action: {_wizardAction}");
                    sb.AppendLine($"Direction: {_wizardDirection}");
                    sb.AppendLine($"Program: {_wizardAppPath}");
                    sb.AppendLine($"Details: All protocols, all ports");
                    break;
                case RuleTemplate.PortRule:
                    sb.AppendLine($"Rule Name: {_wizardRuleName}");
                    sb.AppendLine($"Action: Allow");
                    sb.AppendLine($"Direction: Incoming & Outgoing");
                    if (!string.IsNullOrEmpty(_wizardAppPath))
                    {
                        sb.AppendLine($"Program: {_wizardAppPath}");
                    }
                    sb.AppendLine($"Ports: {_wizardPorts}");
                    sb.AppendLine($"Protocol: {(_wizardProtocol == 6 ? "TCP" : _wizardProtocol == 17 ? "UDP" : "TCP & UDP")}");
                    break;
                case RuleTemplate.BlockService:
                    sb.AppendLine("Action: Block");
                    sb.AppendLine("Direction: Incoming & Outgoing");
                    sb.AppendLine($"Service: {_wizardServiceName}");
                    break;
                case RuleTemplate.AllowFileShare:
                    sb.AppendLine("Action: Allow");
                    sb.AppendLine("Direction: Inbound");
                    sb.AppendLine("Protocol: TCP");
                    sb.AppendLine("Local Port: 445 (File Sharing)");
                    sb.AppendLine($"From IP Address: {_wizardRemoteIP}");
                    break;
                case RuleTemplate.BlockDevice:
                    sb.AppendLine("Action: Block");
                    sb.AppendLine("Direction: Inbound");
                    sb.AppendLine("Protocol: Any");
                    sb.AppendLine($"From IP Address: {_wizardRemoteIP}");
                    break;
                case RuleTemplate.RestrictApp:
                    sb.AppendLine("Action: Allow on Local Network Only");
                    sb.AppendLine("(Note: This requires 'Lockdown Mode' to be active to block internet access.)");
                    sb.AppendLine("Direction: Inbound & Outbound");
                    sb.AppendLine($"Program: {_wizardAppPath}");
                    break;
            }
            summaryLabel.Text = sb.ToString();
        }

        private void CreateRule()
        {
            switch (_selectedTemplate)
            {
                case RuleTemplate.ProgramRule:
                    string action = $"{_wizardAction} ({_wizardDirection})";
                    var payload = new ApplyApplicationRulePayload { AppPaths = { _wizardAppPath }, Action = action };
                    _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.ApplyApplicationRule, payload));
                    break;
                case RuleTemplate.PortRule:
                    var vm = new AdvancedRuleViewModel
                    {
                        Name = _wizardRuleName,
                        IsEnabled = true,
                        Status = "Allow",
                        Direction = Directions.Incoming | Directions.Outgoing,
                        Protocol = (short)_wizardProtocol,
                        LocalPorts = _wizardPorts,
                        ApplicationName = string.IsNullOrEmpty(_wizardAppPath) ? "*" : _wizardAppPath,
                        Grouping = MFWConstants.MainRuleGroup,
                        RemotePorts = "*",
                        LocalAddresses = "*",
                        RemoteAddresses = "*",
                        Profiles = "All",
                        Type = RuleType.Advanced
                    };
                    var advPayload = new CreateAdvancedRulePayload { ViewModel = vm, InterfaceTypes = "All", IcmpTypesAndCodes = "" };
                    _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.CreateAdvancedRule, advPayload));
                    break;
                case RuleTemplate.BlockService:
                    var servicePayload = new ApplyServiceRulePayload { ServiceName = _wizardServiceName, Action = "Block (All)" };
                    _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.ApplyServiceRule, servicePayload));
                    break;
                case RuleTemplate.AllowFileShare:
                    var fileShareVm = new AdvancedRuleViewModel
                    {
                        Name = $"Allow File Sharing from {_wizardRemoteIP}",
                        Description = "Allows inbound file sharing (SMB)",
                        IsEnabled = true,
                        Status = "Allow",
                        Direction = Directions.Incoming,
                        Protocol = 6, // TCP
                        LocalPorts = "445",
                        RemoteAddresses = _wizardRemoteIP,
                        Grouping = MFWConstants.MainRuleGroup,
                        Type = RuleType.Advanced,
                        RemotePorts = "*",
                        LocalAddresses = "*",
                        Profiles = "All"
                    };
                    var fileSharePayload = new CreateAdvancedRulePayload { ViewModel = fileShareVm, InterfaceTypes = "All", IcmpTypesAndCodes = "" };
                    _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.CreateAdvancedRule, fileSharePayload));
                    break;
                case RuleTemplate.BlockDevice:
                    var blockDeviceVm = new AdvancedRuleViewModel
                    {
                        Name = $"Block Inbound from {_wizardRemoteIP}",
                        Description = "Blocks all inbound traffic from a specific local IP",
                        IsEnabled = true,
                        Status = "Block",
                        Direction = Directions.Incoming,
                        Protocol = 256, // Any
                        RemoteAddresses = _wizardRemoteIP,
                        Grouping = MFWConstants.MainRuleGroup,
                        Type = RuleType.Advanced,
                        LocalPorts = "*",
                        RemotePorts = "*",
                        LocalAddresses = "*",
                        Profiles = "All"
                    };
                    var blockDevicePayload = new CreateAdvancedRulePayload { ViewModel = blockDeviceVm, InterfaceTypes = "All", IcmpTypesAndCodes = "" };
                    _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.CreateAdvancedRule, blockDevicePayload));
                    break;
                case RuleTemplate.RestrictApp:
                    string appName = Path.GetFileNameWithoutExtension(_wizardAppPath);
                    var allowLocalVm = new AdvancedRuleViewModel
                    {
                        Name = $"{appName} - Allow Local Network",
                        Description = "Allows communication only within the local network. This rule only works as intended if Lockdown Mode is active.",
                        IsEnabled = true,
                        Status = "Allow",
                        Direction = Directions.Incoming | Directions.Outgoing,
                        ApplicationName = _wizardAppPath,
                        Protocol = 256,
                        RemoteAddresses = "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,LocalSubnet",
                        Grouping = MFWConstants.MainRuleGroup,
                        Type = RuleType.Advanced,
                        LocalPorts = "*",
                        RemotePorts = "*",
                        LocalAddresses = "*",
                        Profiles = "All"
                    };
                    var allowPayload = new CreateAdvancedRulePayload { ViewModel = allowLocalVm, InterfaceTypes = "All", IcmpTypesAndCodes = "" };
                    _backgroundTaskService.EnqueueTask(new FirewallTask(FirewallTaskType.CreateAdvancedRule, allowPayload));
                    break;
            }
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/RuleWizardForm.Designer.cs
--------------------------------------------------------------------------------
﻿// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/RuleWizardForm.Designer.cs
namespace MinimalFirewall
{
    partial class RuleWizardForm
    {
        private System.ComponentModel.IContainer components = null;
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        private void InitializeComponent()
        {
            this.pnlSelection = new System.Windows.Forms.Panel();
            this.restrictAppButton = new System.Windows.Forms.Button();
            this.blockDeviceButton = new System.Windows.Forms.Button();
            this.allowFileShareButton = new System.Windows.Forms.Button();
            this.blockServiceButton = new System.Windows.Forms.Button();
            this.advancedRuleButton = new System.Windows.Forms.Button();
            this.wildcardRuleButton = new System.Windows.Forms.Button();
            this.portRuleButton = new System.Windows.Forms.Button();
            this.programRuleButton = new System.Windows.Forms.Button();
            this.pnlGetProgram = new System.Windows.Forms.Panel();
            this.browseButton = new System.Windows.Forms.Button();
            this.programPathTextBox = new System.Windows.Forms.TextBox();
            this.pnlGetPorts = new System.Windows.Forms.Panel();
            this.portsProgramPathTextBox = new System.Windows.Forms.TextBox();
            this.portsBrowseButton = new System.Windows.Forms.Button();
            this.restrictToProgramCheckBox = new System.Windows.Forms.CheckBox();
            this.portsTextBox = new System.Windows.Forms.TextBox();
            this.portsLabel = new System.Windows.Forms.Label();
            this.pnlGetProtocol = new System.Windows.Forms.Panel();
            this.bothProtocolRadioButton = new System.Windows.Forms.RadioButton();
            this.udpRadioButton = new System.Windows.Forms.RadioButton();
            this.tcpRadioButton = new System.Windows.Forms.RadioButton();
            this.pnlSummary = new System.Windows.Forms.Panel();
            this.summaryLabel = new System.Windows.Forms.Label();
            this.pnlGetName = new System.Windows.Forms.Panel();
            this.ruleNameTextBox = new System.Windows.Forms.TextBox();
            this.bottomPanel = new System.Windows.Forms.Panel();
            this.cancelButton = new System.Windows.Forms.Button();
            this.nextButton = new System.Windows.Forms.Button();
            this.backButton = new System.Windows.Forms.Button();
            this.topPanel = new System.Windows.Forms.Panel();
            this.mainHeaderLabel = new System.Windows.Forms.Label();
            this.pnlGetAction = new System.Windows.Forms.Panel();
            this.blockActionRadioButton = new System.Windows.Forms.RadioButton();
            this.allowActionRadioButton = new System.Windows.Forms.RadioButton();
            this.pnlGetDirection = new System.Windows.Forms.Panel();
            this.bothDirRadioButton = new System.Windows.Forms.RadioButton();
            this.inboundRadioButton = new System.Windows.Forms.RadioButton();
            this.outboundRadioButton = new System.Windows.Forms.RadioButton();
            this.pnlGetService = new System.Windows.Forms.Panel();
            this.serviceNameTextBox = new System.Windows.Forms.TextBox();
            this.serviceListBox = new System.Windows.Forms.ListBox();
            this.serviceInstructionLabel = new System.Windows.Forms.Label();
            this.pnlGetFileShareIP = new System.Windows.Forms.Panel();
            this.fileShareIpTextBox = new System.Windows.Forms.TextBox();
            this.fileShareWarningLabel = new System.Windows.Forms.Label();
            this.pnlGetBlockDeviceIP = new System.Windows.Forms.Panel();
            this.blockDeviceIpTextBox = new System.Windows.Forms.TextBox();
            this.pnlGetRestrictApp = new System.Windows.Forms.Panel();
            this.restrictAppPathTextBox = new System.Windows.Forms.TextBox();
            this.restrictAppBrowseButton = new System.Windows.Forms.Button();
            this.pnlSelection.SuspendLayout();
            this.pnlGetProgram.SuspendLayout();
            this.pnlGetPorts.SuspendLayout();
            this.pnlGetProtocol.SuspendLayout();
            this.pnlSummary.SuspendLayout();
            this.pnlGetName.SuspendLayout();
            this.bottomPanel.SuspendLayout();
            this.topPanel.SuspendLayout();
            this.pnlGetAction.SuspendLayout();
            this.pnlGetDirection.SuspendLayout();
            this.pnlGetService.SuspendLayout();
            this.pnlGetFileShareIP.SuspendLayout();
            this.pnlGetBlockDeviceIP.SuspendLayout();
            this.pnlGetRestrictApp.SuspendLayout();
            this.SuspendLayout();
            // 
            // pnlSelection
            // 
            this.pnlSelection.Controls.Add(this.restrictAppButton);
            this.pnlSelection.Controls.Add(this.blockDeviceButton);
            this.pnlSelection.Controls.Add(this.allowFileShareButton);
            this.pnlSelection.Controls.Add(this.blockServiceButton);
            this.pnlSelection.Controls.Add(this.advancedRuleButton);
            this.pnlSelection.Controls.Add(this.wildcardRuleButton);
            this.pnlSelection.Controls.Add(this.portRuleButton);
            this.pnlSelection.Controls.Add(this.programRuleButton);
            this.pnlSelection.Location = new System.Drawing.Point(0, 58);
            this.pnlSelection.Name = "pnlSelection";
            this.pnlSelection.Size = new System.Drawing.Size(534, 340);
            this.pnlSelection.TabIndex = 0;
            // 
            // restrictAppButton
            // 
            this.restrictAppButton.Location = new System.Drawing.Point(50, 246);
            this.restrictAppButton.Name = "restrictAppButton";
            this.restrictAppButton.Size = new System.Drawing.Size(434, 28);
            this.restrictAppButton.TabIndex = 7;
            this.restrictAppButton.Text = "Restrict an App to My Local Network Only";
            this.restrictAppButton.UseVisualStyleBackColor = true;
            this.restrictAppButton.Click += new System.EventHandler(this.restrictAppButton_Click);
            // 
            // blockDeviceButton
            // 
            this.blockDeviceButton.Location = new System.Drawing.Point(50, 208);
            this.blockDeviceButton.Name = "blockDeviceButton";
            this.blockDeviceButton.Size = new System.Drawing.Size(434, 28);
            this.blockDeviceButton.TabIndex = 6;
            this.blockDeviceButton.Text = "Block a Specific Device on My Network";
            this.blockDeviceButton.UseVisualStyleBackColor = true;
            this.blockDeviceButton.Click += new System.EventHandler(this.blockDeviceButton_Click);
            // 
            // allowFileShareButton
            // 
            this.allowFileShareButton.Location = new System.Drawing.Point(50, 170);
            this.allowFileShareButton.Name = "allowFileShareButton";
            this.allowFileShareButton.Size = new System.Drawing.Size(434, 28);
            this.allowFileShareButton.TabIndex = 5;
            this.allowFileShareButton.Text = "Allow Another PC to Access My Files";
            this.allowFileShareButton.UseVisualStyleBackColor = true;
            this.allowFileShareButton.Click += new System.EventHandler(this.allowFileShareButton_Click);
            // 
            // blockServiceButton
            // 
            this.blockServiceButton.Location = new System.Drawing.Point(50, 132);
            this.blockServiceButton.Name = "blockServiceButton";
            this.blockServiceButton.Size = new System.Drawing.Size(434, 28);
            this.blockServiceButton.TabIndex = 4;
            this.blockServiceButton.Text = "Block a Windows Service";
            this.blockServiceButton.UseVisualStyleBackColor = true;
            this.blockServiceButton.Click += new System.EventHandler(this.blockServiceButton_Click);
            // 
            // advancedRuleButton
            // 
            this.advancedRuleButton.Location = new System.Drawing.Point(50, 284);
            this.advancedRuleButton.Name = "advancedRuleButton";
            this.advancedRuleButton.Size = new System.Drawing.Size(434, 28);
            this.advancedRuleButton.TabIndex = 3;
            this.advancedRuleButton.Text = "Create a Custom Advanced Rule...";
            this.advancedRuleButton.UseVisualStyleBackColor = true;
            this.advancedRuleButton.Click += new System.EventHandler(this.advancedRuleButton_Click);
            // 
            // wildcardRuleButton
            // 
            this.wildcardRuleButton.Location = new System.Drawing.Point(50, 94);
            this.wildcardRuleButton.Name = "wildcardRuleButton";
            this.wildcardRuleButton.Size = new System.Drawing.Size(434, 28);
            this.wildcardRuleButton.TabIndex = 2;
            this.wildcardRuleButton.Text = "Create a Wildcard Rule for a Folder...";
            this.wildcardRuleButton.UseVisualStyleBackColor = true;
            this.wildcardRuleButton.Click += new System.EventHandler(this.wildcardRuleButton_Click);
            // 
            // portRuleButton
            // 
            this.portRuleButton.Location = new System.Drawing.Point(50, 56);
            this.portRuleButton.Name = "portRuleButton";
            this.portRuleButton.Size = new System.Drawing.Size(434, 28);
            this.portRuleButton.TabIndex = 1;
            this.portRuleButton.Text = "Open a Port";
            this.portRuleButton.UseVisualStyleBackColor = true;
            this.portRuleButton.Click += new System.EventHandler(this.portRuleButton_Click);
            // 
            // programRuleButton
            // 
            this.programRuleButton.Location = new System.Drawing.Point(50, 18);
            this.programRuleButton.Name = "programRuleButton";
            this.programRuleButton.Size = new System.Drawing.Size(434, 28);
            this.programRuleButton.TabIndex = 0;
            this.programRuleButton.Text = "Allow or Block a Program";
            this.programRuleButton.UseVisualStyleBackColor = true;
            this.programRuleButton.Click += new System.EventHandler(this.programRuleButton_Click);
            // 
            // pnlGetProgram
            // 
            this.pnlGetProgram.Controls.Add(this.browseButton);
            this.pnlGetProgram.Controls.Add(this.programPathTextBox);
            this.pnlGetProgram.Location = new System.Drawing.Point(0, 58);
            this.pnlGetProgram.Name = "pnlGetProgram";
            this.pnlGetProgram.Size = new System.Drawing.Size(534, 340);
            this.pnlGetProgram.TabIndex = 1;
            // 
            // browseButton
            // 
            this.browseButton.Location = new System.Drawing.Point(422, 149);
            this.browseButton.Name = "browseButton";
            this.browseButton.Size = new System.Drawing.Size(90, 23);
            this.browseButton.TabIndex = 1;
            this.browseButton.Text = "Browse...";
            this.browseButton.UseVisualStyleBackColor = true;
            this.browseButton.Click += new System.EventHandler(this.browseButton_Click);
            // 
            // programPathTextBox
            // 
            this.programPathTextBox.Location = new System.Drawing.Point(23, 149);
            this.programPathTextBox.Name = "programPathTextBox";
            this.programPathTextBox.Size = new System.Drawing.Size(393, 23);
            this.programPathTextBox.TabIndex = 0;
            this.programPathTextBox.PlaceholderText = "Path to application executable";
            // 
            // pnlGetPorts
            // 
            this.pnlGetPorts.Controls.Add(this.portsProgramPathTextBox);
            this.pnlGetPorts.Controls.Add(this.portsBrowseButton);
            this.pnlGetPorts.Controls.Add(this.restrictToProgramCheckBox);
            this.pnlGetPorts.Controls.Add(this.portsTextBox);
            this.pnlGetPorts.Controls.Add(this.portsLabel);
            this.pnlGetPorts.Location = new System.Drawing.Point(0, 58);
            this.pnlGetPorts.Name = "pnlGetPorts";
            this.pnlGetPorts.Size = new System.Drawing.Size(534, 340);
            this.pnlGetPorts.TabIndex = 2;
            // 
            // portsProgramPathTextBox
            // 
            this.portsProgramPathTextBox.Location = new System.Drawing.Point(62, 234);
            this.portsProgramPathTextBox.Name = "portsProgramPathTextBox";
            this.portsProgramPathTextBox.Size = new System.Drawing.Size(354, 23);
            this.portsProgramPathTextBox.TabIndex = 3;
            this.portsProgramPathTextBox.Visible = false;
            // 
            // portsBrowseButton
            // 
            this.portsBrowseButton.Location = new System.Drawing.Point(422, 234);
            this.portsBrowseButton.Name = "portsBrowseButton";
            this.portsBrowseButton.Size = new System.Drawing.Size(90, 23);
            this.portsBrowseButton.TabIndex = 4;
            this.portsBrowseButton.Text = "Browse...";
            this.portsBrowseButton.UseVisualStyleBackColor = true;
            this.portsBrowseButton.Visible = false;
            this.portsBrowseButton.Click += new System.EventHandler(this.portsBrowseButton_Click);
            // 
            // restrictToProgramCheckBox
            // 
            this.restrictToProgramCheckBox.AutoSize = true;
            this.restrictToProgramCheckBox.Location = new System.Drawing.Point(117, 209);
            this.restrictToProgramCheckBox.Name = "restrictToProgramCheckBox";
            this.restrictToProgramCheckBox.Size = new System.Drawing.Size(217, 19);
            this.restrictToProgramCheckBox.TabIndex = 2;
            this.restrictToProgramCheckBox.Text = "Also restrict this rule to a program?";
            this.restrictToProgramCheckBox.UseVisualStyleBackColor = true;
            this.restrictToProgramCheckBox.CheckedChanged += new System.EventHandler(this.restrictToProgramCheckBox_CheckedChanged);
            // 
            // portsTextBox
            // 
            this.portsTextBox.Location = new System.Drawing.Point(117, 122);
            this.portsTextBox.Name = "portsTextBox";
            this.portsTextBox.Size = new System.Drawing.Size(300, 23);
            this.portsTextBox.TabIndex = 0;
            // 
            // portsLabel
            // 
            this.portsLabel.AutoSize = true;
            this.portsLabel.Location = new System.Drawing.Point(117, 148);
            this.portsLabel.Name = "portsLabel";
            this.portsLabel.Size = new System.Drawing.Size(161, 15);
            this.portsLabel.TabIndex = 1;
            this.portsLabel.Text = "e.g., 80, 443 or 27015-27030";
            // 
            // pnlGetProtocol
            // 
            this.pnlGetProtocol.Controls.Add(this.bothProtocolRadioButton);
            this.pnlGetProtocol.Controls.Add(this.udpRadioButton);
            this.pnlGetProtocol.Controls.Add(this.tcpRadioButton);
            this.pnlGetProtocol.Location = new System.Drawing.Point(0, 58);
            this.pnlGetProtocol.Name = "pnlGetProtocol";
            this.pnlGetProtocol.Size = new System.Drawing.Size(534, 340);
            this.pnlGetProtocol.TabIndex = 3;
            // 
            // bothProtocolRadioButton
            // 
            this.bothProtocolRadioButton.AutoSize = true;
            this.bothProtocolRadioButton.Location = new System.Drawing.Point(230, 200);
            this.bothProtocolRadioButton.Name = "bothProtocolRadioButton";
            this.bothProtocolRadioButton.Size = new System.Drawing.Size(76, 19);
            this.bothProtocolRadioButton.TabIndex = 2;
            this.bothProtocolRadioButton.Text = "TCP & UDP";
            this.bothProtocolRadioButton.UseVisualStyleBackColor = true;
            // 
            // udpRadioButton
            // 
            this.udpRadioButton.AutoSize = true;
            this.udpRadioButton.Location = new System.Drawing.Point(230, 165);
            this.udpRadioButton.Name = "udpRadioButton";
            this.udpRadioButton.Size = new System.Drawing.Size(48, 19);
            this.udpRadioButton.TabIndex = 1;
            this.udpRadioButton.Text = "UDP";
            this.udpRadioButton.UseVisualStyleBackColor = true;
            // 
            // tcpRadioButton
            // 
            this.tcpRadioButton.AutoSize = true;
            this.tcpRadioButton.Checked = true;
            this.tcpRadioButton.Location = new System.Drawing.Point(230, 130);
            this.tcpRadioButton.Name = "tcpRadioButton";
            this.tcpRadioButton.Size = new System.Drawing.Size(44, 19);
            this.tcpRadioButton.TabIndex = 0;
            this.tcpRadioButton.TabStop = true;
            this.tcpRadioButton.Text = "TCP";
            this.tcpRadioButton.UseVisualStyleBackColor = true;
            // 
            // pnlSummary
            // 
            this.pnlSummary.Controls.Add(this.summaryLabel);
            this.pnlSummary.Location = new System.Drawing.Point(0, 58);
            this.pnlSummary.Name = "pnlSummary";
            this.pnlSummary.Size = new System.Drawing.Size(534, 340);
            this.pnlSummary.TabIndex = 4;
            // 
            // summaryLabel
            // 
            this.summaryLabel.Font = new System.Drawing.Font("Segoe UI", 10F);
            this.summaryLabel.Location = new System.Drawing.Point(23, 80);
            this.summaryLabel.Name = "summaryLabel";
            this.summaryLabel.Size = new System.Drawing.Size(489, 200);
            this.summaryLabel.TabIndex = 0;
            this.summaryLabel.Text = "Summary Text";
            // 
            // pnlGetName
            // 
            this.pnlGetName.Controls.Add(this.ruleNameTextBox);
            this.pnlGetName.Location = new System.Drawing.Point(0, 58);
            this.pnlGetName.Name = "pnlGetName";
            this.pnlGetName.Size = new System.Drawing.Size(534, 340);
            this.pnlGetName.TabIndex = 5;
            // 
            // ruleNameTextBox
            // 
            this.ruleNameTextBox.Location = new System.Drawing.Point(117, 149);
            this.ruleNameTextBox.Name = "ruleNameTextBox";
            this.ruleNameTextBox.Size = new System.Drawing.Size(300, 23);
            this.ruleNameTextBox.TabIndex = 0;
            // 
            // bottomPanel
            // 
            this.bottomPanel.Controls.Add(this.cancelButton);
            this.bottomPanel.Controls.Add(this.nextButton);
            this.bottomPanel.Controls.Add(this.backButton);
            this.bottomPanel.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.bottomPanel.Location = new System.Drawing.Point(0, 401);
            this.bottomPanel.Name = "bottomPanel";
            this.bottomPanel.Size = new System.Drawing.Size(534, 60);
            this.bottomPanel.TabIndex = 6;
            // 
            // cancelButton
            // 
            this.cancelButton.Location = new System.Drawing.Point(422, 12);
            this.cancelButton.Name = "cancelButton";
            this.cancelButton.Size = new System.Drawing.Size(100, 36);
            this.cancelButton.TabIndex = 2;
            this.cancelButton.Text = "Cancel";
            this.cancelButton.UseVisualStyleBackColor = true;
            this.cancelButton.Click += new System.EventHandler(this.cancelButton_Click);
            // 
            // nextButton
            // 
            this.nextButton.Location = new System.Drawing.Point(316, 12);
            this.nextButton.Name = "nextButton";
            this.nextButton.Size = new System.Drawing.Size(100, 36);
            this.nextButton.TabIndex = 1;
            this.nextButton.Text = "Next";
            this.nextButton.UseVisualStyleBackColor = true;
            this.nextButton.Click += new System.EventHandler(this.nextButton_Click);
            // 
            // backButton
            // 
            this.backButton.Location = new System.Drawing.Point(210, 12);
            this.backButton.Name = "backButton";
            this.backButton.Size = new System.Drawing.Size(100, 36);
            this.backButton.TabIndex = 0;
            this.backButton.Text = "< Back";
            this.backButton.UseVisualStyleBackColor = true;
            this.backButton.Click += new System.EventHandler(this.backButton_Click);
            // 
            // topPanel
            // 
            this.topPanel.Controls.Add(this.mainHeaderLabel);
            this.topPanel.Dock = System.Windows.Forms.DockStyle.Top;
            this.topPanel.Location = new System.Drawing.Point(0, 0);
            this.topPanel.Name = "topPanel";
            this.topPanel.Size = new System.Drawing.Size(534, 55);
            this.topPanel.TabIndex = 7;
            // 
            // mainHeaderLabel
            // 
            this.mainHeaderLabel.Dock = System.Windows.Forms.DockStyle.Fill;
            this.mainHeaderLabel.Font = new System.Drawing.Font("Segoe UI", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point);
            this.mainHeaderLabel.Location = new System.Drawing.Point(0, 0);
            this.mainHeaderLabel.Name = "mainHeaderLabel";
            this.mainHeaderLabel.Size = new System.Drawing.Size(534, 55);
            this.mainHeaderLabel.TabIndex = 0;
            this.mainHeaderLabel.Text = "Header Label";
            this.mainHeaderLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // pnlGetAction
            // 
            this.pnlGetAction.Controls.Add(this.blockActionRadioButton);
            this.pnlGetAction.Controls.Add(this.allowActionRadioButton);
            this.pnlGetAction.Location = new System.Drawing.Point(0, 58);
            this.pnlGetAction.Name = "pnlGetAction";
            this.pnlGetAction.Size = new System.Drawing.Size(534, 340);
            this.pnlGetAction.TabIndex = 8;
            // 
            // blockActionRadioButton
            // 
            this.blockActionRadioButton.AutoSize = true;
            this.blockActionRadioButton.Location = new System.Drawing.Point(230, 182);
            this.blockActionRadioButton.Name = "blockActionRadioButton";
            this.blockActionRadioButton.Size = new System.Drawing.Size(53, 19);
            this.blockActionRadioButton.TabIndex = 1;
            this.blockActionRadioButton.Text = "Block";
            this.blockActionRadioButton.UseVisualStyleBackColor = true;
            // 
            // allowActionRadioButton
            // 
            this.allowActionRadioButton.AutoSize = true;
            this.allowActionRadioButton.Checked = true;
            this.allowActionRadioButton.Location = new System.Drawing.Point(230, 147);
            this.allowActionRadioButton.Name = "allowActionRadioButton";
            this.allowActionRadioButton.Size = new System.Drawing.Size(54, 19);
            this.allowActionRadioButton.TabIndex = 0;
            this.allowActionRadioButton.TabStop = true;
            this.allowActionRadioButton.Text = "Allow";
            this.allowActionRadioButton.UseVisualStyleBackColor = true;
            // 
            // pnlGetDirection
            // 
            this.pnlGetDirection.Controls.Add(this.bothDirRadioButton);
            this.pnlGetDirection.Controls.Add(this.inboundRadioButton);
            this.pnlGetDirection.Controls.Add(this.outboundRadioButton);
            this.pnlGetDirection.Location = new System.Drawing.Point(0, 58);
            this.pnlGetDirection.Name = "pnlGetDirection";
            this.pnlGetDirection.Size = new System.Drawing.Size(534, 340);
            this.pnlGetDirection.TabIndex = 9;
            // 
            // bothDirRadioButton
            // 
            this.bothDirRadioButton.AutoSize = true;
            this.bothDirRadioButton.Location = new System.Drawing.Point(230, 200);
            this.bothDirRadioButton.Name = "bothDirRadioButton";
            this.bothDirRadioButton.Size = new System.Drawing.Size(50, 19);
            this.bothDirRadioButton.TabIndex = 2;
            this.bothDirRadioButton.Text = "Both";
            this.bothDirRadioButton.UseVisualStyleBackColor = true;
            // 
            // inboundRadioButton
            // 
            this.inboundRadioButton.AutoSize = true;
            this.inboundRadioButton.Location = new System.Drawing.Point(230, 165);
            this.inboundRadioButton.Name = "inboundRadioButton";
            this.inboundRadioButton.Size = new System.Drawing.Size(70, 19);
            this.inboundRadioButton.TabIndex = 1;
            this.inboundRadioButton.Text = "Inbound";
            this.inboundRadioButton.UseVisualStyleBackColor = true;
            // 
            // outboundRadioButton
            // 
            this.outboundRadioButton.AutoSize = true;
            this.outboundRadioButton.Checked = true;
            this.outboundRadioButton.Location = new System.Drawing.Point(230, 130);
            this.outboundRadioButton.Name = "outboundRadioButton";
            this.outboundRadioButton.Size = new System.Drawing.Size(78, 19);
            this.outboundRadioButton.TabIndex = 0;
            this.outboundRadioButton.TabStop = true;
            this.outboundRadioButton.Text = "Outbound";
            this.outboundRadioButton.UseVisualStyleBackColor = true;
            // 
            // pnlGetService
            // 
            this.pnlGetService.Controls.Add(this.serviceNameTextBox);
            this.pnlGetService.Controls.Add(this.serviceListBox);
            this.pnlGetService.Controls.Add(this.serviceInstructionLabel);
            this.pnlGetService.Location = new System.Drawing.Point(0, 58);
            this.pnlGetService.Name = "pnlGetService";
            this.pnlGetService.Size = new System.Drawing.Size(534, 340);
            this.pnlGetService.TabIndex = 10;
            // 
            // serviceNameTextBox
            // 
            this.serviceNameTextBox.Location = new System.Drawing.Point(23, 290);
            this.serviceNameTextBox.Name = "serviceNameTextBox";
            this.serviceNameTextBox.Size = new System.Drawing.Size(489, 23);
            this.serviceNameTextBox.TabIndex = 2;
            this.serviceNameTextBox.PlaceholderText = "Or enter service name (e.g. DiagTrack)";
            // 
            // serviceListBox
            // 
            this.serviceListBox.FormattingEnabled = true;
            this.serviceListBox.ItemHeight = 15;
            this.serviceListBox.Location = new System.Drawing.Point(23, 40);
            this.serviceListBox.Name = "serviceListBox";
            this.serviceListBox.Size = new System.Drawing.Size(489, 244);
            this.serviceListBox.TabIndex = 1;
            // 
            // serviceInstructionLabel
            // 
            this.serviceInstructionLabel.AutoSize = true;
            this.serviceInstructionLabel.Location = new System.Drawing.Point(23, 12);
            this.serviceInstructionLabel.Name = "serviceInstructionLabel";
            this.serviceInstructionLabel.Size = new System.Drawing.Size(306, 15);
            this.serviceInstructionLabel.TabIndex = 0;
            this.serviceInstructionLabel.Text = "Select a service from the list below, or enter its name.";
            // 
            // pnlGetFileShareIP
            // 
            this.pnlGetFileShareIP.Controls.Add(this.fileShareIpTextBox);
            this.pnlGetFileShareIP.Controls.Add(this.fileShareWarningLabel);
            this.pnlGetFileShareIP.Location = new System.Drawing.Point(0, 58);
            this.pnlGetFileShareIP.Name = "pnlGetFileShareIP";
            this.pnlGetFileShareIP.Size = new System.Drawing.Size(534, 340);
            this.pnlGetFileShareIP.TabIndex = 11;
            // 
            // fileShareIpTextBox
            // 
            this.fileShareIpTextBox.Location = new System.Drawing.Point(117, 180);
            this.fileShareIpTextBox.Name = "fileShareIpTextBox";
            this.fileShareIpTextBox.PlaceholderText = "e.g., 192.168.1.50";
            this.fileShareIpTextBox.Size = new System.Drawing.Size(300, 23);
            this.fileShareIpTextBox.TabIndex = 1;
            // 
            // fileShareWarningLabel
            // 
            this.fileShareWarningLabel.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Bold);
            this.fileShareWarningLabel.ForeColor = System.Drawing.Color.Red;
            this.fileShareWarningLabel.Location = new System.Drawing.Point(23, 60);
            this.fileShareWarningLabel.Name = "fileShareWarningLabel";
            this.fileShareWarningLabel.Size = new System.Drawing.Size(489, 84);
            this.fileShareWarningLabel.TabIndex = 0;
            this.fileShareWarningLabel.Text = "Warning: Opening port 445 for file sharing can be a security risk. Ensure you tr" +
    "ust the computer at the IP address you are about to enter and that your network" +
    " is secure.";
            this.fileShareWarningLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // pnlGetBlockDeviceIP
            // 
            this.pnlGetBlockDeviceIP.Controls.Add(this.blockDeviceIpTextBox);
            this.pnlGetBlockDeviceIP.Location = new System.Drawing.Point(0, 58);
            this.pnlGetBlockDeviceIP.Name = "pnlGetBlockDeviceIP";
            this.pnlGetBlockDeviceIP.Size = new System.Drawing.Size(534, 340);
            this.pnlGetBlockDeviceIP.TabIndex = 12;
            // 
            // blockDeviceIpTextBox
            // 
            this.blockDeviceIpTextBox.Location = new System.Drawing.Point(117, 149);
            this.blockDeviceIpTextBox.Name = "blockDeviceIpTextBox";
            this.blockDeviceIpTextBox.PlaceholderText = "e.g., 192.168.1.101";
            this.blockDeviceIpTextBox.Size = new System.Drawing.Size(300, 23);
            this.blockDeviceIpTextBox.TabIndex = 0;
            // 
            // pnlGetRestrictApp
            // 
            this.pnlGetRestrictApp.Controls.Add(this.restrictAppPathTextBox);
            this.pnlGetRestrictApp.Controls.Add(this.restrictAppBrowseButton);
            this.pnlGetRestrictApp.Location = new System.Drawing.Point(0, 58);
            this.pnlGetRestrictApp.Name = "pnlGetRestrictApp";
            this.pnlGetRestrictApp.Size = new System.Drawing.Size(534, 340);
            this.pnlGetRestrictApp.TabIndex = 13;
            // 
            // restrictAppPathTextBox
            // 
            this.restrictAppPathTextBox.Location = new System.Drawing.Point(23, 149);
            this.restrictAppPathTextBox.Name = "restrictAppPathTextBox";
            this.restrictAppPathTextBox.PlaceholderText = "Path to application executable";
            this.restrictAppPathTextBox.Size = new System.Drawing.Size(393, 23);
            this.restrictAppPathTextBox.TabIndex = 1;
            // 
            // restrictAppBrowseButton
            // 
            this.restrictAppBrowseButton.Location = new System.Drawing.Point(422, 149);
            this.restrictAppBrowseButton.Name = "restrictAppBrowseButton";
            this.restrictAppBrowseButton.Size = new System.Drawing.Size(90, 23);
            this.restrictAppBrowseButton.TabIndex = 2;
            this.restrictAppBrowseButton.Text = "Browse...";
            this.restrictAppBrowseButton.UseVisualStyleBackColor = true;
            this.restrictAppBrowseButton.Click += new System.EventHandler(this.restrictAppBrowseButton_Click);
            // 
            // RuleWizardForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.CancelButton = this.cancelButton;
            this.ClientSize = new System.Drawing.Size(534, 461);
            this.Controls.Add(this.topPanel);
            this.Controls.Add(this.bottomPanel);
            this.Controls.Add(this.pnlSelection);
            this.Controls.Add(this.pnlGetRestrictApp);
            this.Controls.Add(this.pnlGetBlockDeviceIP);
            this.Controls.Add(this.pnlGetFileShareIP);
            this.Controls.Add(this.pnlGetService);
            this.Controls.Add(this.pnlGetName);
            this.Controls.Add(this.pnlSummary);
            this.Controls.Add(this.pnlGetProtocol);
            this.Controls.Add(this.pnlGetPorts);
            this.Controls.Add(this.pnlGetProgram);
            this.Controls.Add(this.pnlGetAction);
            this.Controls.Add(this.pnlGetDirection);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "RuleWizardForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = "Create New Rule";
            this.pnlSelection.ResumeLayout(false);
            this.pnlGetProgram.ResumeLayout(false);
            this.pnlGetProgram.PerformLayout();
            this.pnlGetPorts.ResumeLayout(false);
            this.pnlGetPorts.PerformLayout();
            this.pnlGetProtocol.ResumeLayout(false);
            this.pnlGetProtocol.PerformLayout();
            this.pnlSummary.ResumeLayout(false);
            this.pnlGetName.ResumeLayout(false);
            this.pnlGetName.PerformLayout();
            this.bottomPanel.ResumeLayout(false);
            this.topPanel.ResumeLayout(false);
            this.pnlGetAction.ResumeLayout(false);
            this.pnlGetAction.PerformLayout();
            this.pnlGetDirection.ResumeLayout(false);
            this.pnlGetDirection.PerformLayout();
            this.pnlGetService.ResumeLayout(false);
            this.pnlGetService.PerformLayout();
            this.pnlGetFileShareIP.ResumeLayout(false);
            this.pnlGetFileShareIP.PerformLayout();
            this.pnlGetBlockDeviceIP.ResumeLayout(false);
            this.pnlGetBlockDeviceIP.PerformLayout();
            this.pnlGetRestrictApp.ResumeLayout(false);
            this.pnlGetRestrictApp.PerformLayout();
            this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.Panel pnlSelection;
        private System.Windows.Forms.Button advancedRuleButton;
        private System.Windows.Forms.Button wildcardRuleButton;
        private System.Windows.Forms.Button portRuleButton;
        private System.Windows.Forms.Button programRuleButton;
        private System.Windows.Forms.Panel pnlGetProgram;
        private System.Windows.Forms.Panel pnlGetPorts;
        private System.Windows.Forms.Panel pnlGetProtocol;
        private System.Windows.Forms.Panel pnlSummary;
        private System.Windows.Forms.Panel pnlGetName;
        private System.Windows.Forms.Panel bottomPanel;
        private System.Windows.Forms.Button cancelButton;
        private System.Windows.Forms.Button nextButton;
        private System.Windows.Forms.Button backButton;
        private System.Windows.Forms.Panel topPanel;
        private System.Windows.Forms.Label mainHeaderLabel;
        private System.Windows.Forms.Button browseButton;
        private System.Windows.Forms.TextBox programPathTextBox;
        private System.Windows.Forms.TextBox portsTextBox;
        private System.Windows.Forms.Label portsLabel;
        private System.Windows.Forms.RadioButton bothProtocolRadioButton;
        private System.Windows.Forms.RadioButton udpRadioButton;
        private System.Windows.Forms.RadioButton tcpRadioButton;
        private System.Windows.Forms.TextBox ruleNameTextBox;
        private System.Windows.Forms.Label summaryLabel;
        private System.Windows.Forms.Panel pnlGetAction;
        private System.Windows.Forms.RadioButton blockActionRadioButton;
        private System.Windows.Forms.RadioButton allowActionRadioButton;
        private System.Windows.Forms.Panel pnlGetDirection;
        private System.Windows.Forms.RadioButton bothDirRadioButton;
        private System.Windows.Forms.RadioButton inboundRadioButton;
        private System.Windows.Forms.RadioButton outboundRadioButton;
        private System.Windows.Forms.CheckBox restrictToProgramCheckBox;
        private System.Windows.Forms.Button portsBrowseButton;
        private System.Windows.Forms.TextBox portsProgramPathTextBox;
        private Button blockServiceButton;
        private Button allowFileShareButton;
        private Button blockDeviceButton;
        private Button restrictAppButton;
        private Panel pnlGetService;
        private Panel pnlGetFileShareIP;
        private Panel pnlGetBlockDeviceIP;
        private Panel pnlGetRestrictApp;
        private TextBox serviceNameTextBox;
        private ListBox serviceListBox;
        private Label serviceInstructionLabel;
        private TextBox fileShareIpTextBox;
        private Label fileShareWarningLabel;
        private TextBox blockDeviceIpTextBox;
        private TextBox restrictAppPathTextBox;
        private Button restrictAppBrowseButton;
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/SettingsControl.cs
--------------------------------------------------------------------------------
﻿// File: SettingsControl.cs
using DarkModeForms;
using Firewall.Traffic.ViewModels;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;

namespace MinimalFirewall
{
    public partial class SettingsControl : UserControl
    {
        private AppSettings _appSettings;
        private StartupService _startupService;
        private PublisherWhitelistService _whitelistService;
        private FirewallActionsService _actionsService;
        private UserActivityLogger _activityLogger;
        private MainViewModel _mainViewModel;
        private ImageList _appImageList;
        private DarkModeCS _dm;

        public event Action ThemeChanged;
        public event Action IconVisibilityChanged;
        public event Func<Task> DataRefreshRequested;
        public event Action AutoRefreshTimerChanged;
        public SettingsControl()
        {
            InitializeComponent();
        }

        public void Initialize(
            AppSettings appSettings,
            StartupService startupService,
            PublisherWhitelistService whitelistService,
            FirewallActionsService actionsService,
            UserActivityLogger activityLogger,
            MainViewModel mainViewModel,
            ImageList appImageList,
            string version,
            DarkModeCS dm)
        {
            _appSettings = appSettings;
            _startupService = startupService;
            _whitelistService = whitelistService;
            _actionsService = actionsService;
            _activityLogger = activityLogger;
            _mainViewModel = mainViewModel;
            _appImageList = appImageList;
            _dm = dm;

            versionLabel.Text = version;
            coffeePictureBox.Image = _appImageList.Images["coffee.png"];
        }

        public void ApplyThemeFixes()
        {
            if (_dm == null) return;
            deleteAllRulesButton.FlatAppearance.BorderSize = 1;
            deleteAllRulesButton.FlatAppearance.BorderColor = _dm.OScolors.ControlDark;
            revertFirewallButton.FlatAppearance.BorderSize = 1;
            revertFirewallButton.FlatAppearance.BorderColor = _dm.OScolors.ControlDark;
            managePublishersButton.FlatAppearance.BorderSize = 1;
            managePublishersButton.FlatAppearance.BorderColor = _dm.OScolors.ControlDark;
            openFirewallButton.FlatAppearance.BorderSize = 1;
            openFirewallButton.FlatAppearance.BorderColor = _dm.OScolors.ControlDark;
            checkForUpdatesButton.FlatAppearance.BorderSize = 1;
            checkForUpdatesButton.FlatAppearance.BorderColor = _dm.OScolors.ControlDark;
            if (_dm.IsDarkMode)
            {
                deleteAllRulesButton.ForeColor = Color.White;
                revertFirewallButton.ForeColor = Color.White;
                managePublishersButton.ForeColor = Color.White;
                openFirewallButton.ForeColor = Color.White;
                checkForUpdatesButton.ForeColor = Color.White;
            }
            else
            {
                deleteAllRulesButton.ForeColor = SystemColors.ControlText;
                revertFirewallButton.ForeColor = SystemColors.ControlText;
                managePublishersButton.ForeColor = SystemColors.ControlText;
                openFirewallButton.ForeColor = SystemColors.ControlText;
                checkForUpdatesButton.ForeColor = SystemColors.ControlText;
            }
        }

        public void LoadSettingsToUI()
        {
            closeToTraySwitch.Checked = _appSettings.CloseToTray;
            startOnStartupSwitch.Checked = _appSettings.StartOnSystemStartup;
            darkModeSwitch.Checked = _appSettings.Theme == "Dark";
            popupsSwitch.Checked = _appSettings.IsPopupsEnabled;
            loggingSwitch.Checked = _appSettings.IsLoggingEnabled;
            autoRefreshTextBox.Text = _appSettings.AutoRefreshIntervalMinutes.ToString();
            trafficMonitorSwitch.Checked = _appSettings.IsTrafficMonitorEnabled;
            showAppIconsSwitch.Checked = _appSettings.ShowAppIcons;
            autoAllowSystemTrustedCheck.Checked = _appSettings.AutoAllowSystemTrusted;
            auditAlertsSwitch.Checked = _appSettings.AlertOnForeignRules;
            managePublishersButton.Enabled = true;
        }

        public void SaveSettingsFromUI()
        {
            _appSettings.CloseToTray = closeToTraySwitch.Checked;
            _appSettings.StartOnSystemStartup = startOnStartupSwitch.Checked;
            _appSettings.Theme = darkModeSwitch.Checked ? "Dark" : "Light";
            _appSettings.IsPopupsEnabled = popupsSwitch.Checked;
            _appSettings.IsLoggingEnabled = loggingSwitch.Checked;
            if (int.TryParse(autoRefreshTextBox.Text, out int val) && val >= 1)
            {
                _appSettings.AutoRefreshIntervalMinutes = val;
            }
            _appSettings.IsTrafficMonitorEnabled = trafficMonitorSwitch.Checked;
            _appSettings.ShowAppIcons = showAppIconsSwitch.Checked;
            _appSettings.AutoAllowSystemTrusted = autoAllowSystemTrustedCheck.Checked;
            _appSettings.AlertOnForeignRules = auditAlertsSwitch.Checked;

            _activityLogger.IsEnabled = _appSettings.IsLoggingEnabled;
            if (_appSettings.IsTrafficMonitorEnabled)
            {
                _mainViewModel.TrafficMonitorViewModel.StartMonitoring();
            }
            else
            {
                _mainViewModel.TrafficMonitorViewModel.StopMonitoring();
            }

            IconVisibilityChanged?.Invoke();
            _appSettings.Save();
        }

        public void ApplyTheme(bool isDark, DarkModeCS dm)
        {
            var linkColor = isDark ?
                Color.SkyBlue : SystemColors.HotTrack;
            helpLink.LinkColor = linkColor;
            reportProblemLink.LinkColor = linkColor;
            forumLink.LinkColor = linkColor;
            coffeeLinkLabel.LinkColor = linkColor;
            helpLink.VisitedLinkColor = linkColor;
            reportProblemLink.VisitedLinkColor = linkColor;
            forumLink.VisitedLinkColor = linkColor;
            coffeeLinkLabel.VisitedLinkColor = linkColor;

            Image? coffeeImage = _appImageList.Images["coffee.png"];
            if (coffeeImage != null)
            {
                Color coffeeColor = isDark ?
                    Color.LightGray : Color.Black;
                Image? oldImage = coffeePictureBox.Image;
                coffeePictureBox.Image = DarkModeCS.RecolorImage(coffeeImage, coffeeColor);
                oldImage?.Dispose();
            }
        }

        private void DarkModeSwitch_CheckedChanged(object sender, EventArgs e)
        {
            _appSettings.Theme = darkModeSwitch.Checked ?
                "Dark" : "Light";
            ThemeChanged?.Invoke();
        }

        private void startOnStartupSwitch_CheckedChanged(object sender, EventArgs e)
        {
            if (_appSettings != null && _startupService != null)
            {
                _appSettings.StartOnSystemStartup = startOnStartupSwitch.Checked;
                _startupService.SetStartup(_appSettings.StartOnSystemStartup);
            }
        }

        private void PopupsSwitch_CheckedChanged(object sender, EventArgs e)
        {
            if (_appSettings != null)
            {
                _appSettings.IsPopupsEnabled = popupsSwitch.Checked;
            }
        }

        private void TrafficMonitorSwitch_CheckedChanged(object sender, EventArgs e)
        {
            _appSettings.IsTrafficMonitorEnabled = trafficMonitorSwitch.Checked;
        }

        private void ShowAppIconsSwitch_CheckedChanged(object sender, EventArgs e)
        {
            _appSettings.ShowAppIcons = showAppIconsSwitch.Checked;
            IconVisibilityChanged?.Invoke();
        }

        private void managePublishersButton_Click(object sender, EventArgs e)
        {
            using var form = new ManagePublishersForm(_whitelistService);
            form.ShowDialog(this.FindForm());
        }

        private void OpenFirewallButton_Click(object sender, EventArgs e)
        {
            try
            {
                string wfPath = Path.Combine(Environment.SystemDirectory, "wf.msc");
                var startInfo = new ProcessStartInfo(wfPath)
                {
                    UseShellExecute = true
                };
                Process.Start(startInfo);
            }
            catch (Exception ex) when (ex is Win32Exception or FileNotFoundException)
            {
                Messenger.MessageBox($"Could not open Windows Firewall console.\n\nError: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void CheckForUpdatesButton_Click(object sender, EventArgs e)
        {
            try
            {
                Process.Start(new ProcessStartInfo("https://github.com/deminimis/minimalfirewall/releases") { UseShellExecute = true });
            }
            catch (Exception ex) when (ex is Win32Exception or InvalidOperationException)
            {
                Messenger.MessageBox($"Could not open the link.\n\nError: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void LinkLabel_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            if (sender is not LinkLabel { Tag: string url }) return;
            try
            {
                Process.Start(new ProcessStartInfo(url) { UseShellExecute = true });
            }
            catch (Exception ex) when (ex is Win32Exception or InvalidOperationException)
            {
                Messenger.MessageBox($"Could not open the link.\n\nError: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void CoffeeLink_Click(object sender, EventArgs e)
        {
            try
            {
                Process.Start(new ProcessStartInfo("https://www.buymeacoffee.com/deminimis") { UseShellExecute = true });
            }
            catch (Exception ex) when (ex is Win32Exception or InvalidOperationException)
            {
                Messenger.MessageBox($"Could not open the link.\n\nError: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void CoffeePictureBox_MouseEnter(object? sender, EventArgs e)
        {
        }

        private void CoffeePictureBox_MouseLeave(object? sender, EventArgs e)
        {
        }

        private async void deleteAllRulesButton_Click(object sender, EventArgs e)
        {
            var result = Messenger.MessageBox("This will permanently delete all firewall rules created by this application. This action cannot be undone. Are you sure you want to continue?",
                "Delete All Rules", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (result == DialogResult.Yes)
            {
                _actionsService.DeleteAllMfwRules();
                await (DataRefreshRequested?.Invoke() ?? Task.CompletedTask);
                Messenger.MessageBox("All Minimal Firewall rules have been deleted.", "Operation Complete", MessageBoxButtons.OK, MessageBoxIcon.None);
            }
        }

        private async void revertFirewallButton_Click(object sender, EventArgs e)
        {
            var result = Messenger.MessageBox("WARNING: This will reset your ENTIRE Windows Firewall configuration to its default state. " +
                "All custom rules, including those not created by this application, will be deleted. This action is irreversible.\n\n" +
                "Are you absolutely sure you want to continue?",
                "Revert Windows Firewall Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (result == DialogResult.Yes)
            {
                AdminTaskService.ResetFirewall();
                await (DataRefreshRequested?.Invoke() ?? Task.CompletedTask);
                Messenger.MessageBox("Windows Firewall has been reset to its default settings. It is recommended to restart the application.",
                    "Operation Complete", MessageBoxButtons.OK, MessageBoxIcon.None);
            }
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/SettingsControl.Designer.cs
--------------------------------------------------------------------------------
﻿// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/SettingsControl.Designer.cs
namespace MinimalFirewall
{
    partial class SettingsControl
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.deleteAllRulesButton = new System.Windows.Forms.Button();
            this.revertFirewallButton = new System.Windows.Forms.Button();
            this.auditAlertsSwitch = new System.Windows.Forms.CheckBox();
            this.managePublishersButton = new System.Windows.Forms.Button();
            this.autoAllowSystemTrustedCheck = new System.Windows.Forms.CheckBox();
            this.showAppIconsSwitch = new System.Windows.Forms.CheckBox();
            this.trafficMonitorSwitch = new System.Windows.Forms.CheckBox();
            this.autoRefreshLabel1 = new System.Windows.Forms.Label();
            this.autoRefreshLabel2 = new System.Windows.Forms.Label();
            this.coffeePanel = new System.Windows.Forms.Panel();
            this.coffeeLinkLabel = new System.Windows.Forms.LinkLabel();
            this.coffeePictureBox = new System.Windows.Forms.PictureBox();
            this.versionLabel = new System.Windows.Forms.Label();
            this.checkForUpdatesButton = new System.Windows.Forms.Button();
            this.openFirewallButton = new System.Windows.Forms.Button();
            this.forumLink = new System.Windows.Forms.LinkLabel();
            this.reportProblemLink = new System.Windows.Forms.LinkLabel();
            this.helpLink = new System.Windows.Forms.LinkLabel();
            this.autoRefreshTextBox = new System.Windows.Forms.TextBox();
            this.loggingSwitch = new System.Windows.Forms.CheckBox();
            this.popupsSwitch = new System.Windows.Forms.CheckBox();
            this.darkModeSwitch = new System.Windows.Forms.CheckBox();
            this.startOnStartupSwitch = new System.Windows.Forms.CheckBox();
            this.closeToTraySwitch = new System.Windows.Forms.CheckBox();
            this.mainSettingsPanel = new System.Windows.Forms.Panel();
            this.coffeePanel.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.coffeePictureBox)).BeginInit();
            this.mainSettingsPanel.SuspendLayout();
            this.SuspendLayout();
            // 
            // deleteAllRulesButton
            // 
            this.deleteAllRulesButton.FlatAppearance.BorderSize = 0;
            this.deleteAllRulesButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.deleteAllRulesButton.Location = new System.Drawing.Point(29, 700);
            this.deleteAllRulesButton.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.deleteAllRulesButton.Name = "deleteAllRulesButton";
            this.deleteAllRulesButton.Size = new System.Drawing.Size(240, 37);
            this.deleteAllRulesButton.TabIndex = 25;
            this.deleteAllRulesButton.Text = "Delete all Minimal Firewall rules";
            this.deleteAllRulesButton.UseVisualStyleBackColor = true;
            this.deleteAllRulesButton.Click += new System.EventHandler(this.deleteAllRulesButton_Click);
            // 
            // revertFirewallButton
            // 
            this.revertFirewallButton.FlatAppearance.BorderSize = 0;
            this.revertFirewallButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.revertFirewallButton.Location = new System.Drawing.Point(280, 700);
            this.revertFirewallButton.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.revertFirewallButton.Name = "revertFirewallButton";
            this.revertFirewallButton.Size = new System.Drawing.Size(240, 37);
            this.revertFirewallButton.TabIndex = 26;
            this.revertFirewallButton.Text = "Revert Windows Firewall";
            this.revertFirewallButton.UseVisualStyleBackColor = true;
            this.revertFirewallButton.Click += new System.EventHandler(this.revertFirewallButton_Click);
            // 
            // auditAlertsSwitch
            // 
            this.auditAlertsSwitch.AutoSize = true;
            this.auditAlertsSwitch.Location = new System.Drawing.Point(350, 153);
            this.auditAlertsSwitch.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.auditAlertsSwitch.Name = "auditAlertsSwitch";
            this.auditAlertsSwitch.Size = new System.Drawing.Size(211, 24);
            this.auditAlertsSwitch.TabIndex = 24;
            this.auditAlertsSwitch.Text = "Alert on new system rules";
            this.auditAlertsSwitch.UseVisualStyleBackColor = true;
            // 
            // managePublishersButton
            // 
            this.managePublishersButton.FlatAppearance.BorderSize = 0;
            this.managePublishersButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.managePublishersButton.Location = new System.Drawing.Point(29, 350);
            this.managePublishersButton.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.managePublishersButton.Name = "managePublishersButton";
            this.managePublishersButton.Size = new System.Drawing.Size(200, 37);
            this.managePublishersButton.TabIndex = 23;
            this.managePublishersButton.Text = "Manage Trusted Publishers";
            this.managePublishersButton.UseVisualStyleBackColor = true;
            this.managePublishersButton.Click += new System.EventHandler(this.managePublishersButton_Click);
            // 
            // autoAllowSystemTrustedCheck
            // 
            this.autoAllowSystemTrustedCheck.AutoSize = true;
            this.autoAllowSystemTrustedCheck.Location = new System.Drawing.Point(350, 200);
            this.autoAllowSystemTrustedCheck.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.autoAllowSystemTrustedCheck.Name = "autoAllowSystemTrustedCheck";
            this.autoAllowSystemTrustedCheck.Size = new System.Drawing.Size(276, 24);
            this.autoAllowSystemTrustedCheck.TabIndex = 22;
            this.autoAllowSystemTrustedCheck.Text = "Auto-allow apps trusted by Windows";
            this.autoAllowSystemTrustedCheck.UseVisualStyleBackColor = true;
            // 
            // showAppIconsSwitch
            // 
            this.showAppIconsSwitch.AutoSize = true;
            this.showAppIconsSwitch.Location = new System.Drawing.Point(350, 107);
            this.showAppIconsSwitch.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.showAppIconsSwitch.Name = "showAppIconsSwitch";
            this.showAppIconsSwitch.Size = new System.Drawing.Size(177, 24);
            this.showAppIconsSwitch.TabIndex = 21;
            this.showAppIconsSwitch.Text = "Show application icons";
            this.showAppIconsSwitch.UseVisualStyleBackColor = true;
            this.showAppIconsSwitch.CheckedChanged += new System.EventHandler(this.ShowAppIconsSwitch_CheckedChanged);
            // 
            // trafficMonitorSwitch
            // 
            this.trafficMonitorSwitch.AutoSize = true;
            this.trafficMonitorSwitch.Location = new System.Drawing.Point(350, 60);
            this.trafficMonitorSwitch.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.trafficMonitorSwitch.Name = "trafficMonitorSwitch";
            this.trafficMonitorSwitch.Size = new System.Drawing.Size(191, 24);
            this.trafficMonitorSwitch.TabIndex = 20;
            this.trafficMonitorSwitch.Text = "Enable Live Connections";
            this.trafficMonitorSwitch.UseVisualStyleBackColor = true;
            this.trafficMonitorSwitch.CheckedChanged += new System.EventHandler(this.TrafficMonitorSwitch_CheckedChanged);
            // 
            // autoRefreshLabel1
            // 
            this.autoRefreshLabel1.AutoSize = true;
            this.autoRefreshLabel1.Location = new System.Drawing.Point(29, 299);
            this.autoRefreshLabel1.Name = "autoRefreshLabel1";
            this.autoRefreshLabel1.Size = new System.Drawing.Size(117, 20);
            this.autoRefreshLabel1.TabIndex = 18;
            this.autoRefreshLabel1.Text = "List refresh time:";
            // 
            // autoRefreshLabel2
            // 
            this.autoRefreshLabel2.AutoSize = true;
            this.autoRefreshLabel2.Location = new System.Drawing.Point(251, 299);
            this.autoRefreshLabel2.Name = "autoRefreshLabel2";
            this.autoRefreshLabel2.Size = new System.Drawing.Size(61, 20);
            this.autoRefreshLabel2.TabIndex = 19;
            this.autoRefreshLabel2.Text = "minutes";
            // 
            // coffeePanel
            // 
            this.coffeePanel.BackColor = System.Drawing.Color.Transparent;
            this.coffeePanel.Controls.Add(this.coffeeLinkLabel);
            this.coffeePanel.Controls.Add(this.coffeePictureBox);
            this.coffeePanel.Cursor = System.Windows.Forms.Cursors.Hand;
            this.coffeePanel.Location = new System.Drawing.Point(21, 570);
            this.coffeePanel.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.coffeePanel.Name = "coffeePanel";
            this.coffeePanel.Size = new System.Drawing.Size(434, 107);
            this.coffeePanel.TabIndex = 17;
            this.coffeePanel.Click += new System.EventHandler(this.CoffeeLink_Click);
            // 
            // coffeeLinkLabel
            // 
            this.coffeeLinkLabel.ActiveLinkColor = System.Drawing.Color.DodgerBlue;
            this.coffeeLinkLabel.AutoSize = true;
            this.coffeeLinkLabel.Location = new System.Drawing.Point(69, 24);
            this.coffeeLinkLabel.MaximumSize = new System.Drawing.Size(366, 0);
            this.coffeeLinkLabel.Name = "coffeeLinkLabel";
            this.coffeeLinkLabel.Size = new System.Drawing.Size(335, 20);
            this.coffeeLinkLabel.TabIndex = 15;
            this.coffeeLinkLabel.TabStop = true;
            this.coffeeLinkLabel.Tag = "https://www.buymeacoffee.com/deminimis";
            this.coffeeLinkLabel.Text = "Support my caffeine addiction if you like this app";
            this.coffeeLinkLabel.Click += new System.EventHandler(this.CoffeeLink_Click);
            // 
            // coffeePictureBox
            // 
            this.coffeePictureBox.Cursor = System.Windows.Forms.Cursors.Hand;
            this.coffeePictureBox.Location = new System.Drawing.Point(0, 0);
            this.coffeePictureBox.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.coffeePictureBox.Name = "coffeePictureBox";
            this.coffeePictureBox.Size = new System.Drawing.Size(62, 72);
            this.coffeePictureBox.SizeMode = System.Windows.Forms.PictureBoxSizeMode.CenterImage;
            this.coffeePictureBox.TabIndex = 13;
            this.coffeePictureBox.TabStop = false;
            this.coffeePictureBox.Click += new System.EventHandler(this.CoffeeLink_Click);
            this.coffeePictureBox.MouseEnter += new System.EventHandler(this.CoffeePictureBox_MouseEnter);
            this.coffeePictureBox.MouseLeave += new System.EventHandler(this.CoffeePictureBox_MouseLeave);
            // 
            // versionLabel
            // 
            this.versionLabel.AutoSize = true;
            this.versionLabel.Font = new System.Drawing.Font("Segoe UI", 9F);
            this.versionLabel.Location = new System.Drawing.Point(223, 470);
            this.versionLabel.Name = "versionLabel";
            this.versionLabel.Size = new System.Drawing.Size(57, 20);
            this.versionLabel.TabIndex = 12;
            this.versionLabel.Text = "Version";
            // 
            // checkForUpdatesButton
            // 
            this.checkForUpdatesButton.FlatAppearance.BorderSize = 0;
            this.checkForUpdatesButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.checkForUpdatesButton.Location = new System.Drawing.Point(29, 460);
            this.checkForUpdatesButton.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.checkForUpdatesButton.Name = "checkForUpdatesButton";
            this.checkForUpdatesButton.Size = new System.Drawing.Size(183, 37);
            this.checkForUpdatesButton.TabIndex = 11;
            this.checkForUpdatesButton.Text = "Check for Updates";
            this.checkForUpdatesButton.Click += new System.EventHandler(this.CheckForUpdatesButton_Click);
            // 
            // openFirewallButton
            // 
            this.openFirewallButton.FlatAppearance.BorderSize = 0;
            this.openFirewallButton.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
            this.openFirewallButton.Location = new System.Drawing.Point(29, 420);
            this.openFirewallButton.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.openFirewallButton.Name = "openFirewallButton";
            this.openFirewallButton.Size = new System.Drawing.Size(183, 37);
            this.openFirewallButton.TabIndex = 10;
            this.openFirewallButton.Text = "Open Windows Firewall";
            this.openFirewallButton.Click += new System.EventHandler(this.OpenFirewallButton_Click);
            // 
            // forumLink
            // 
            this.forumLink.AutoSize = true;
            this.forumLink.Location = new System.Drawing.Point(29, 510);
            this.forumLink.Name = "forumLink";
            this.forumLink.Size = new System.Drawing.Size(140, 20);
            this.forumLink.TabIndex = 9;
            this.forumLink.TabStop = true;
            this.forumLink.Tag = "https://github.com/deminimis/minimalfirewall/discussions";
            this.forumLink.Text = "Forum / Discussions";
            this.forumLink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.LinkLabel_LinkClicked);
            // 
            // reportProblemLink
            // 
            this.reportProblemLink.AutoSize = true;
            this.reportProblemLink.Location = new System.Drawing.Point(29, 530);
            this.reportProblemLink.Name = "reportProblemLink";
            this.reportProblemLink.Size = new System.Drawing.Size(126, 20);
            this.reportProblemLink.TabIndex = 8;
            this.reportProblemLink.TabStop = true;
            this.reportProblemLink.Tag = "https://github.com/deminimis/minimalfirewall/issues";
            this.reportProblemLink.Text = "Report a Problem";
            this.reportProblemLink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.LinkLabel_LinkClicked);
            // 
            // helpLink
            // 
            this.helpLink.AutoSize = true;
            this.helpLink.Location = new System.Drawing.Point(29, 550);
            this.helpLink.Name = "helpLink";
            this.helpLink.Size = new System.Drawing.Size(158, 20);
            this.helpLink.TabIndex = 7;
            this.helpLink.TabStop = true;
            this.helpLink.Tag = "https://github.com/deminimis/minimalfirewall";
            this.helpLink.Text = "Help / Documentation";
            this.helpLink.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.LinkLabel_LinkClicked);
            // 
            // autoRefreshTextBox
            // 
            this.autoRefreshTextBox.Location = new System.Drawing.Point(171, 293);
            this.autoRefreshTextBox.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.autoRefreshTextBox.MaxLength = 3;
            this.autoRefreshTextBox.Name = "autoRefreshTextBox";
            this.autoRefreshTextBox.Size = new System.Drawing.Size(68, 27);
            this.autoRefreshTextBox.TabIndex = 5;
            this.autoRefreshTextBox.Text = "10";
            // 
            // loggingSwitch
            // 
            this.loggingSwitch.AutoSize = true;
            this.loggingSwitch.Location = new System.Drawing.Point(29, 247);
            this.loggingSwitch.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.loggingSwitch.Name = "loggingSwitch";
            this.loggingSwitch.Size = new System.Drawing.Size(132, 24);
            this.loggingSwitch.TabIndex = 4;
            this.loggingSwitch.Text = "Enable logging";
            this.loggingSwitch.UseVisualStyleBackColor = true;
            // 
            // popupsSwitch
            // 
            this.popupsSwitch.AutoSize = true;
            this.popupsSwitch.Location = new System.Drawing.Point(29, 200);
            this.popupsSwitch.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.popupsSwitch.Name = "popupsSwitch";
            this.popupsSwitch.Size = new System.Drawing.Size(216, 24);
            this.popupsSwitch.TabIndex = 3;
            this.popupsSwitch.Text = "Enable pop-up notifications";
            this.popupsSwitch.UseVisualStyleBackColor = true;
            this.popupsSwitch.CheckedChanged += new System.EventHandler(this.PopupsSwitch_CheckedChanged);
            // 
            // darkModeSwitch
            // 
            this.darkModeSwitch.AutoSize = true;
            this.darkModeSwitch.Location = new System.Drawing.Point(29, 153);
            this.darkModeSwitch.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.darkModeSwitch.Name = "darkModeSwitch";
            this.darkModeSwitch.Size = new System.Drawing.Size(105, 24);
            this.darkModeSwitch.TabIndex = 2;
            this.darkModeSwitch.Text = "Dark Mode";
            this.darkModeSwitch.UseVisualStyleBackColor = true;
            this.darkModeSwitch.CheckedChanged += new System.EventHandler(this.DarkModeSwitch_CheckedChanged);
            // 
            // startOnStartupSwitch
            // 
            this.startOnStartupSwitch.AutoSize = true;
            this.startOnStartupSwitch.Location = new System.Drawing.Point(29, 107);
            this.startOnStartupSwitch.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.startOnStartupSwitch.Name = "startOnStartupSwitch";
            this.startOnStartupSwitch.Size = new System.Drawing.Size(159, 24);
            this.startOnStartupSwitch.TabIndex = 1;
            this.startOnStartupSwitch.Text = "Start with Windows";
            this.startOnStartupSwitch.UseVisualStyleBackColor = true;
            this.startOnStartupSwitch.CheckedChanged += new System.EventHandler(this.startOnStartupSwitch_CheckedChanged);
            // 
            // closeToTraySwitch
            // 
            this.closeToTraySwitch.AutoSize = true;
            this.closeToTraySwitch.Checked = true;
            this.closeToTraySwitch.CheckState = System.Windows.Forms.CheckState.Checked;
            this.closeToTraySwitch.Location = new System.Drawing.Point(29, 60);
            this.closeToTraySwitch.Margin = new System.Windows.Forms.Padding(3, 4, 3, 4);
            this.closeToTraySwitch.Name = "closeToTraySwitch";
            this.closeToTraySwitch.Size = new System.Drawing.Size(114, 24);
            this.closeToTraySwitch.TabIndex = 0;
            this.closeToTraySwitch.Text = "Close to tray";
            this.closeToTraySwitch.UseVisualStyleBackColor = true;
            // 
            // mainSettingsPanel
            // 
            this.mainSettingsPanel.AutoScroll = true;
            this.mainSettingsPanel.Controls.Add(this.deleteAllRulesButton);
            this.mainSettingsPanel.Controls.Add(this.revertFirewallButton);
            this.mainSettingsPanel.Controls.Add(this.auditAlertsSwitch);
            this.mainSettingsPanel.Controls.Add(this.managePublishersButton);
            this.mainSettingsPanel.Controls.Add(this.autoAllowSystemTrustedCheck);
            this.mainSettingsPanel.Controls.Add(this.showAppIconsSwitch);
            this.mainSettingsPanel.Controls.Add(this.trafficMonitorSwitch);
            this.mainSettingsPanel.Controls.Add(this.autoRefreshLabel1);
            this.mainSettingsPanel.Controls.Add(this.autoRefreshLabel2);
            this.mainSettingsPanel.Controls.Add(this.coffeePanel);
            this.mainSettingsPanel.Controls.Add(this.versionLabel);
            this.mainSettingsPanel.Controls.Add(this.checkForUpdatesButton);
            this.mainSettingsPanel.Controls.Add(this.openFirewallButton);
            this.mainSettingsPanel.Controls.Add(this.forumLink);
            this.mainSettingsPanel.Controls.Add(this.reportProblemLink);
            this.mainSettingsPanel.Controls.Add(this.helpLink);
            this.mainSettingsPanel.Controls.Add(this.autoRefreshTextBox);
            this.mainSettingsPanel.Controls.Add(this.loggingSwitch);
            this.mainSettingsPanel.Controls.Add(this.popupsSwitch);
            this.mainSettingsPanel.Controls.Add(this.darkModeSwitch);
            this.mainSettingsPanel.Controls.Add(this.startOnStartupSwitch);
            this.mainSettingsPanel.Controls.Add(this.closeToTraySwitch);
            this.mainSettingsPanel.Dock = System.Windows.Forms.DockStyle.Fill;
            this.mainSettingsPanel.Location = new System.Drawing.Point(0, 0);
            this.mainSettingsPanel.Name = "mainSettingsPanel";
            this.mainSettingsPanel.Size = new System.Drawing.Size(1015, 925);
            this.mainSettingsPanel.TabIndex = 27;
            // 
            // SettingsControl
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 20F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.Controls.Add(this.mainSettingsPanel);
            this.Name = "SettingsControl";
            this.Size = new System.Drawing.Size(1015, 925);
            this.coffeePanel.ResumeLayout(false);
            this.coffeePanel.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.coffeePictureBox)).EndInit();
            this.mainSettingsPanel.ResumeLayout(false);
            this.mainSettingsPanel.PerformLayout();
            this.ResumeLayout(false);
        }

        #endregion
        private System.Windows.Forms.Button deleteAllRulesButton;
        private System.Windows.Forms.Button revertFirewallButton;
        private System.Windows.Forms.CheckBox auditAlertsSwitch;
        private System.Windows.Forms.Button managePublishersButton;
        private System.Windows.Forms.CheckBox autoAllowSystemTrustedCheck;
        private System.Windows.Forms.CheckBox showAppIconsSwitch;
        private System.Windows.Forms.CheckBox trafficMonitorSwitch;
        private System.Windows.Forms.Label autoRefreshLabel1;
        private System.Windows.Forms.Label autoRefreshLabel2;
        private System.Windows.Forms.Panel coffeePanel;
        private System.Windows.Forms.LinkLabel coffeeLinkLabel;
        private System.Windows.Forms.PictureBox coffeePictureBox;
        private System.Windows.Forms.Label versionLabel;
        private System.Windows.Forms.Button checkForUpdatesButton;
        private System.Windows.Forms.Button openFirewallButton;
        private System.Windows.Forms.LinkLabel forumLink;
        private System.Windows.Forms.LinkLabel reportProblemLink;
        private System.Windows.Forms.LinkLabel helpLink;
        private System.Windows.Forms.TextBox autoRefreshTextBox;
        private System.Windows.Forms.CheckBox loggingSwitch;
        private System.Windows.Forms.CheckBox popupsSwitch;
        private System.Windows.Forms.CheckBox darkModeSwitch;
        private System.Windows.Forms.CheckBox startOnStartupSwitch;
        private System.Windows.Forms.CheckBox closeToTraySwitch;
        private Panel mainSettingsPanel;
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/SignatureValidationService.cs
--------------------------------------------------------------------------------
﻿// File: SignatureValidationService.cs
using System.Diagnostics;
using System.IO;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;

namespace MinimalFirewall
{
    public static class SignatureValidationService
    {
        public static bool GetPublisherInfo(string filePath, out string? publisherName)
        {
            publisherName = null;
            if (string.IsNullOrEmpty(filePath) || !File.Exists(filePath))
            {
                return false;
            }

            try
            {
                using (var cert = X509Certificate.CreateFromSignedFile(filePath))
                {
                    publisherName = cert.Subject;
                    return !string.IsNullOrEmpty(publisherName);
                }
            }
            catch (CryptographicException)
            {
                return false;
            }
            catch (Exception ex) when (ex is IOException or UnauthorizedAccessException)
            {
                Debug.WriteLine($"[ERROR] Signature extraction failed for {filePath}: {ex.Message}");
                return false;
            }
        }

        public static bool IsSignatureTrusted(string filePath, out string? publisherName)
        {
            publisherName = null;
            if (!GetPublisherInfo(filePath, out publisherName))
            {
                return false;
            }

            try
            {
                using (var cert = X509Certificate.CreateFromSignedFile(filePath))
                using (var cert2 = new X509Certificate2(cert))
                using (var chain = new X509Chain())
                {
                    return chain.Build(cert2);
                }
            }
            catch (Exception ex) when (ex is CryptographicException or IOException or UnauthorizedAccessException)
            {
                Debug.WriteLine($"[ERROR] Signature chain validation failed for {filePath}: {ex.Message}");
                return false;
            }
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/StatusForm.cs
--------------------------------------------------------------------------------
﻿// File: StatusForm.cs
using DarkModeForms;
using System;
using System.Drawing;
using System.Windows.Forms;

namespace MinimalFirewall
{
    public partial class StatusForm : Form
    {
        private readonly DarkModeCS dm;
        private System.Windows.Forms.Timer _initialLoadTimer;
        private int _fakeProgress;
        private bool _realProgressStarted;

        public StatusForm(string title)
        {
            InitializeComponent();
            dm = new DarkModeCS(this);
            this.Text = title;
            this.statusLabel.Text = title;
            this.progressLabel.Text = "0%";
            this.progressBar.Value = 0;
            this.progressBar.Style = System.Windows.Forms.ProgressBarStyle.Blocks;

            _fakeProgress = 0;
            _realProgressStarted = false;

            _initialLoadTimer = new System.Windows.Forms.Timer
            {
                Interval = 150
            };
            _initialLoadTimer.Tick += InitialLoadTimer_Tick;
            _initialLoadTimer.Start();

            this.FormClosing += (s, e) => _initialLoadTimer?.Dispose();
        }

        private void InitialLoadTimer_Tick(object? sender, EventArgs e)
        {
            _fakeProgress++;
            progressBar.Value = _fakeProgress;
            progressLabel.Text = $"{_fakeProgress}%";

            if (_fakeProgress >= 10)
            {
                _initialLoadTimer.Stop();
            }
        }

        public void UpdateStatus(string message)
        {
            this.statusLabel.Text = message;
            Application.DoEvents();
        }

        public void UpdateProgress(int percentage)
        {
            if (this.InvokeRequired)
            {
                this.Invoke(() => UpdateProgress(percentage));
                return;
            }

            if (!_realProgressStarted)
            {
                _realProgressStarted = true;
                _initialLoadTimer.Stop();
            }

            int newProgress = Math.Max(_fakeProgress, percentage);
            progressBar.Value = Math.Clamp(newProgress, 0, 100);
            progressLabel.Text = $"{progressBar.Value}%";
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            if (Owner != null)
            {
                Location = new Point(Owner.Location.X + (Owner.Width - Width) / 2,
                                       Owner.Location.Y + (Owner.Height - Height) / 2);
            }
        }

        public void Complete(string message)
        {
            this.statusLabel.Text = message;
            this.progressBar.Visible = false;
            this.progressLabel.Visible = false;
            this.okButton.Visible = true;
            this.Text = "Scan Complete";
            this.okButton.Focus();
        }

        private void okButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/StatusForm.Designer.cs
--------------------------------------------------------------------------------
﻿// File: StatusForm.Designer.cs
namespace MinimalFirewall
{
    public partial class StatusForm
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.Label statusLabel;
        private System.Windows.Forms.ProgressBar progressBar;
        private System.Windows.Forms.Label progressLabel;
        private System.Windows.Forms.Button okButton;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        private void InitializeComponent()
        {
            this.statusLabel = new System.Windows.Forms.Label();
            this.okButton = new System.Windows.Forms.Button();
            this.progressBar = new System.Windows.Forms.ProgressBar();
            this.progressLabel = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // 
            // statusLabel
            // 
            this.statusLabel.Location = new System.Drawing.Point(6, 20);
            this.statusLabel.Name = "statusLabel";
            this.statusLabel.Size = new System.Drawing.Size(388, 23);
            this.statusLabel.TabIndex = 0;
            this.statusLabel.Text = "Scanning, please wait...";
            this.statusLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // okButton
            // 
            this.okButton.Location = new System.Drawing.Point(150, 90);
            this.okButton.Name = "okButton";
            this.okButton.Size = new System.Drawing.Size(100, 36);
            this.okButton.TabIndex = 2;
            this.okButton.Text = "OK";
            this.okButton.UseVisualStyleBackColor = true;
            this.okButton.Visible = false;
            this.okButton.Click += new System.EventHandler(this.okButton_Click);
            // 
            // progressBar
            // 
            this.progressBar.Location = new System.Drawing.Point(28, 60);
            this.progressBar.Name = "progressBar";
            this.progressBar.Size = new System.Drawing.Size(280, 23);
            this.progressBar.TabIndex = 1;
            // 
            // progressLabel
            // 
            this.progressLabel.Location = new System.Drawing.Point(314, 60);
            this.progressLabel.Name = "progressLabel";
            this.progressLabel.Size = new System.Drawing.Size(59, 23);
            this.progressLabel.TabIndex = 3;
            this.progressLabel.Text = "0%";
            this.progressLabel.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // StatusForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(400, 150);
            this.Controls.Add(this.progressLabel);
            this.Controls.Add(this.okButton);
            this.Controls.Add(this.progressBar);
            this.Controls.Add(this.statusLabel);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "StatusForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = "Scanning...";
            this.ResumeLayout(false);

        }

        #endregion
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/SystemDiscoveryService.cs
--------------------------------------------------------------------------------
﻿// File: SystemDiscoveryService.cs
using DarkModeForms;
using System.IO;
using System.Management;
using System.Diagnostics;

namespace MinimalFirewall
{
    public static class SystemDiscoveryService
    {
        private static bool _wmiQueryFailedMessageShown = false;

        public static List<ServiceViewModel> GetServicesWithExePaths()
        {
            var services = new List<ServiceViewModel>();
            try
            {
                var wmiQuery = new ObjectQuery("SELECT Name, DisplayName, PathName FROM Win32_Service WHERE PathName IS NOT NULL");
                using var searcher = new ManagementObjectSearcher(wmiQuery);
                foreach (ManagementObject service in searcher.Get().Cast<ManagementObject>())
                {
                    string rawPath = service["PathName"]?.ToString() ?? string.Empty;
                    if (string.IsNullOrEmpty(rawPath)) continue;

                    string pathName = rawPath.Trim('"');
                    int exeIndex = pathName.IndexOf(".exe", StringComparison.OrdinalIgnoreCase);
                    if (exeIndex > 0)
                    {
                        pathName = pathName[..(exeIndex + 4)];
                    }

                    if (!string.IsNullOrEmpty(pathName))
                    {
                        services.Add(new ServiceViewModel
                        {
                            ExePath = pathName,
                            DisplayName = service["DisplayName"]?.ToString() ?? "",
                            ServiceName = service["Name"]?.ToString() ?? ""
                        });
                    }
                }
            }
            catch (Exception ex) when (ex is ManagementException or System.Runtime.InteropServices.COMException)
            {
                Debug.WriteLine("WMI Query failed: " + ex.Message);
                if (!_wmiQueryFailedMessageShown)
                {
                    Messenger.MessageBox("Could not query Windows Services (WMI).", "Feature Unavailable", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    _wmiQueryFailedMessageShown = true;
                }
            }
            return services;
        }

        public static string GetServicesByPID(string processId)
        {
            if (string.IsNullOrEmpty(processId) || processId == "0") return string.Empty;
            try
            {
                var query = new ObjectQuery($"SELECT Name FROM Win32_Service WHERE ProcessId = {processId}");
                using var searcher = new ManagementObjectSearcher(query);
                var serviceNames = searcher.Get().Cast<ManagementObject>()
                                           .Select(s => s["Name"]?.ToString())
                                           .Where(n => !string.IsNullOrEmpty(n));
                return string.Join(", ", serviceNames);
            }
            catch (Exception ex) when (ex is ManagementException or System.Runtime.InteropServices.COMException)
            {
                Debug.WriteLine($"WMI Query for PID failed: {ex.Message}");
                return string.Empty;
            }
        }

        public static List<string> GetExecutablesInFolder(string directoryPath, string? exeName = null)
        {
            var files = new List<string>();
            string searchPattern = string.IsNullOrWhiteSpace(exeName) ? "*.exe" : exeName;
            GetExecutablesInFolderRecursive(directoryPath, searchPattern, files);
            return files;
        }

        private static void GetExecutablesInFolderRecursive(string directoryPath, string searchPattern, List<string> files)
        {
            try
            {
                files.AddRange(Directory.GetFiles(directoryPath, searchPattern));
                foreach (var directory in Directory.GetDirectories(directoryPath))
                {
                    GetExecutablesInFolderRecursive(directory, searchPattern, files);
                }
            }
            catch (UnauthorizedAccessException) { }
            catch (IOException ex)
            {
                Debug.WriteLine($"Error scanning folder {directoryPath}: {ex.Message}");
            }
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/TemporaryRuleManager.cs
--------------------------------------------------------------------------------
﻿// TemporaryRuleManager.cs
using System.Collections.Concurrent;
using System.Diagnostics;
using System.IO;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace MinimalFirewall
{
    public class TemporaryRuleManager
    {
        private readonly string _storagePath;
        private readonly ConcurrentDictionary<string, DateTime> _temporaryRules;

        public TemporaryRuleManager()
        {
            _storagePath = Path.Combine(AppContext.BaseDirectory, "temporary_rules.json");
            _temporaryRules = Load();
        }

        private ConcurrentDictionary<string, DateTime> Load()
        {
            try
            {
                if (File.Exists(_storagePath))
                {
                    string json = File.ReadAllText(_storagePath);
                    var rules = JsonSerializer.Deserialize(json, TempRuleJsonContext.Default.DictionaryStringDateTime);
                    return new ConcurrentDictionary<string, DateTime>(rules ?? new Dictionary<string, DateTime>(), StringComparer.OrdinalIgnoreCase);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ERROR] Failed to load temporary rules: {ex.Message}");
            }
            return new ConcurrentDictionary<string, DateTime>(StringComparer.OrdinalIgnoreCase);
        }

        private void Save()
        {
            try
            {
                var rulesToSave = new Dictionary<string, DateTime>(_temporaryRules, StringComparer.OrdinalIgnoreCase);
                string json = JsonSerializer.Serialize(rulesToSave, TempRuleJsonContext.Default.DictionaryStringDateTime);
                File.WriteAllText(_storagePath, json);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[ERROR] Failed to save temporary rules: {ex.Message}");
            }
        }

        public void Add(string ruleName, DateTime expiryTimeUtc)
        {
            _temporaryRules[ruleName] = expiryTimeUtc;
            Save();
        }

        public void Remove(string ruleName)
        {
            if (_temporaryRules.TryRemove(ruleName, out _))
            {
                Save();
            }
        }

        public Dictionary<string, DateTime> GetExpiredRules()
        {
            var now = DateTime.UtcNow;
            return _temporaryRules
                .Where(kvp => kvp.Value <= now)
                .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
        }
    }

    [JsonSourceGenerationOptions(WriteIndented = true)]
    [JsonSerializable(typeof(Dictionary<string, DateTime>))]
    internal partial class TempRuleJsonContext : JsonSerializerContext { }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/TypedObjects.cs
--------------------------------------------------------------------------------
﻿// File: TypedObjects.cs
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Net;
namespace MinimalFirewall.TypedObjects
{
    public enum Actions : byte
    {
        Block = 0,
        Allow = 1
    }

    [Flags]
    public enum Directions : byte
    {
        Incoming = 1,
        Outgoing = 2
    }

    [Flags]
    public enum InterfaceTypes : byte
    {

        All = RemoteAccess | Wireless | Lan,
        RemoteAccess = 1,
        Wireless = 2,
        Lan = 4
    }

    public enum SpecificLocalPort : byte
    {
        RPC,
        RPC_EPMap,
        IPHTTPS
    }

    public interface IFixedRange<TUnit>
    {
        TUnit
 Begin
        { get; }
        TUnit End
        {
            get;
        }
    }

    [Serializable]
    public class PortRange : IFixedRange<ushort>, IEquatable<PortRange>
    {
        private readonly bool _isSinglePort;
        private readonly SpecificLocalPort? _specificLocalPort;
        public ushort Begin { get; }
        public ushort End
        {
            get;
        }

        public PortRange(ushort singlePort) : this(singlePort, singlePort) { }

        public PortRange(ushort first, ushort second)
        {
            if (first > second)
            {
                Begin = second;
                End = first;
            }
            else
            {
                Begin = first;
                End = second;
            }
            _isSinglePort = (Begin == End);
            _specificLocalPort = null;
        }

        public PortRange(SpecificLocalPort specificLocalPort)
        {
            _specificLocalPort = specificLocalPort;
        }

        public static implicit operator PortRange(ushort port) => new PortRange(port);
        public static implicit operator PortRange(SpecificLocalPort port) => new PortRange(port);

        public static bool TryParse(string rangeString, [NotNullWhen(true)] out PortRange? range)
        {
            range = null;
            if (string.IsNullOrWhiteSpace(rangeString)) return false;

            if (Enum.TryParse<SpecificLocalPort>(rangeString.Replace("-", "_"), true, out var sp))
            {
                range = new PortRange(sp);
                return true;
            }

            var parts = rangeString.Split('-');
            if (parts.Length == 1 && ushort.TryParse(parts[0], out var port))
            {
                range = new PortRange(port);
                return true;
            }
            if (parts.Length == 2 && ushort.TryParse(parts[0], out var begin) && ushort.TryParse(parts[1], out var end))
            {
                range = new PortRange(begin, end);
                return true;
            }

            return false;
        }

        public bool Equals(PortRange? other)
        {
            if (other is null) return false;
            if (_specificLocalPort.HasValue) return _specificLocalPort.Value == other._specificLocalPort;
            return Begin == other.Begin && End == other.End;
        }

        public override int GetHashCode() => ToString().GetHashCode();
        public override string ToString()
        {
            if (_specificLocalPort.HasValue) return _specificLocalPort.Value.ToString().Replace("_", "-");
            if (_isSinglePort) return Begin.ToString();
            return $"{Begin}-{End}";
        }
    }

    [Serializable]
    public class IPAddressRange : IEnumerable<IPAddress>, IEquatable<IPAddressRange>, IFixedRange<IPAddress>
    {
        public IPAddress Begin
        {
            get;
            set;
        }
        public IPAddress End
        {
            get; set;
        }

        public IPAddressRange(IPAddress singleAddress)
        {
            if (singleAddress == null) throw new ArgumentNullException(nameof(singleAddress));
            Begin = End = singleAddress;
        }

        public IPAddressRange(IPAddress begin, IPAddress end)
        {
            if (begin.AddressFamily != end.AddressFamily) throw new ArgumentException("Addresses must be of the same family.");
            if (!Internal.Bits.GtECore(end.GetAddressBytes(), begin.GetAddressBytes())) throw new ArgumentException("Begin address must be smaller than End address.");
            Begin = begin;
            End = end;
        }

        public static IPAddressRange Parse(string ipRangeString)
        {
            if (!TryParse(ipRangeString, out IPAddressRange? range) || range == null)
            {
                throw new FormatException("Unknown IP range string format.");
            }
            return range;
        }

        public static bool TryParse(string ipRangeString, [NotNullWhen(true)] out IPAddressRange? range)
        {
            range = null;
            if (string.IsNullOrWhiteSpace(ipRangeString)) return false;
            ipRangeString = ipRangeString.Trim();

            var cidrParts = ipRangeString.Split('/');
            if (cidrParts.Length == 2 && IPAddress.TryParse(cidrParts[0], out var baseAddress) && int.TryParse(cidrParts[1], out var maskLen))
            {
                var baseAdrBytes = baseAddress.GetAddressBytes();
                if (baseAdrBytes.Length * 8 < maskLen) return false;
                var maskBytes = Internal.Bits.GetBitMask(baseAdrBytes.Length, maskLen);
                var beginBytes = Internal.Bits.And(baseAdrBytes, maskBytes);
                var endBytes = Internal.Bits.Or(beginBytes, Internal.Bits.Not(maskBytes));
                range = new IPAddressRange(new IPAddress(beginBytes), new IPAddress(endBytes));
                return true;
            }

            var rangeParts = ipRangeString.Split('-');
            if (rangeParts.Length == 2 && IPAddress.TryParse(rangeParts[0], out var begin) && IPAddress.TryParse(rangeParts[1], out var end))
            {
                range = new IPAddressRange(begin, end);
                return true;
            }

            if (IPAddress.TryParse(ipRangeString, out var singleAddress))
            {
                range = new IPAddressRange(singleAddress);
                return true;
            }

            return false;
        }


        public bool Contains(IPAddress ipaddress)
        {
            if (ipaddress.AddressFamily != Begin.AddressFamily) return false;
            var adrBytes = ipaddress.GetAddressBytes();
            return Internal.Bits.LtECore(Begin.GetAddressBytes(), adrBytes) && Internal.Bits.GtECore(End.GetAddressBytes(), adrBytes);
        }

        public bool Equals(IPAddressRange? other)
        {
            if (other is null) return false;
            return Begin.Equals(other.Begin) && End.Equals(other.End);
        }

        public override int GetHashCode() => (Begin, End).GetHashCode();
        public override string ToString()
        {
            return Begin.Equals(End) ?
 Begin.ToString() : $"{Begin}-{End}";
        }

        public IEnumerator<IPAddress> GetEnumerator()
        {
            var first = Begin.GetAddressBytes();
            var last = End.GetAddressBytes();
            for (var ip = first; Internal.Bits.LtECore(ip, last); ip = Internal.Bits.Increment(ip))
                yield return new IPAddress(ip);
        }

        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public static class RangeExtensions
    {
        public static PortRange To(this ushort from, ushort to)
        {
            return new PortRange(from, to);
        }
        public static IPAddressRange To(this IPAddress from, IPAddress to)
        {
            return new IPAddressRange(from, to);
        }
    }

    public struct ProtocolTypes : IEquatable<ProtocolTypes>
    {
        public static ProtocolTypes Any { get; } = new ProtocolTypes("Any", 256, false, false);
        public static ProtocolTypes TCP { get; } = new ProtocolTypes("TCP", 6, true, false);
        public static ProtocolTypes UDP { get; } = new ProtocolTypes("UDP", 17, true, false);
        public static ProtocolTypes ICMPv4 { get; } = new ProtocolTypes("ICMPv4", 1, false, true);
        public static ProtocolTypes ICMPv6 { get; } = new ProtocolTypes("ICMPv6", 58, false, true);
        public static ProtocolTypes IGMP { get; } = new ProtocolTypes("IGMP", 2, false, false);

        public string Name { get; }
        public int Value { get; }
        public bool SupportsPorts { get; }
        public bool SupportsIcmp { get; }

        private ProtocolTypes(string name, int value, bool supportsPorts, bool supportsIcmp)
        {
            Name = name;
            Value = value;
            SupportsPorts = supportsPorts;
            SupportsIcmp = supportsIcmp;
        }

        public override string ToString() => Name;
        public bool Equals(ProtocolTypes other) => this.Value == other.Value;
        public override bool Equals(object? obj) => obj is ProtocolTypes other && Equals(other);
        public override int GetHashCode() => Value.GetHashCode();
    }
}

namespace MinimalFirewall.TypedObjects.Internal
{
    internal static class Bits
    {
        public static byte[] Not(byte[] bytes) => bytes.Select(b => (byte)~b).ToArray();
        public static byte[] And(byte[] A, byte[] B) => A.Zip(B, (a, b) => (byte)(a & b)).ToArray();
        public static byte[] Or(byte[] A, byte[] B) => A.Zip(B, (a, b) => (byte)(a | b)).ToArray();
        public static bool GtECore(byte[] A, byte[] B, int offset = 0)
        {
            int length = Math.Min(A.Length, B.Length);
            for (var i = offset; i < length; i++)
            {
                if (A[i] != B[i]) return A[i] >= B[i];
            }
            return true;
        }
        public static bool LtECore(byte[] A, byte[] B, int offset = 0)
        {
            int length = Math.Min(A.Length, B.Length);
            for (var i = offset; i < length; i++)
            {
                if (A[i] != B[i]) return A[i] <= B[i];
            }
            return true;
        }
        public static byte[] GetBitMask(int sizeOfBuff, int bitLen)
        {
            var maskBytes = new byte[sizeOfBuff];
            int bytesLen = bitLen / 8;
            int bitsLen = bitLen % 8;
            for (var i = 0; i < bytesLen; i++) maskBytes[i] = 0xff;
            if (bitsLen > 0) maskBytes[bytesLen] = (byte)~(255 >> bitsLen);
            return maskBytes;
        }
        public static byte[] Increment(byte[] bytes)
        {
            var incrementIndex = Array.FindLastIndex(bytes, x => x < byte.MaxValue);
            if (incrementIndex < 0) throw new OverflowException();
            return bytes.Take(incrementIndex)
                        .Concat(new byte[] { (byte)(bytes[incrementIndex] + 1) })
                        .Concat(new byte[bytes.Length - incrementIndex - 1])
                        .ToArray();
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/UserActivityLogger.cs
--------------------------------------------------------------------------------
﻿// File: UserActivityLogger.cs
using System.IO;
using System.Text.Json;
using System.Collections.Generic;
using System.Diagnostics;

namespace MinimalFirewall
{
    public class UserActivityLogger
    {
        private readonly string _debugLogFilePath;
        private readonly string _changeLogFilePath;
        public bool IsEnabled { get; set; }

        public UserActivityLogger()
        {
            string baseDirectory = AppContext.BaseDirectory;
            _debugLogFilePath = Path.Combine(baseDirectory, "debug_log.txt");
            _changeLogFilePath = Path.Combine(baseDirectory, "changelog.json");
        }

        public void LogChange(string action, string details)
        {
            if (!IsEnabled) return;
            try
            {
                var newLogEntry = new { Timestamp = DateTime.Now, Action = action, Details = details };
                List<object> logEntries;

                if (File.Exists(_changeLogFilePath))
                {
                    string json = File.ReadAllText(_changeLogFilePath);
                    logEntries = JsonSerializer.Deserialize<List<object>>(json) ?? new List<object>();
                }
                else
                {
                    logEntries = new List<object>();
                }

                logEntries.Add(newLogEntry);
                string newJson = JsonSerializer.Serialize(logEntries, new JsonSerializerOptions { WriteIndented = true });
                File.WriteAllText(_changeLogFilePath, newJson);
            }
            catch (Exception ex) when (ex is IOException or UnauthorizedAccessException or JsonException)
            {
                Debug.WriteLine($"[FATAL LOGGING ERROR] {ex.Message}");
            }
        }

        public void LogDebug(string message)
        {
            if (!IsEnabled) return;
            try
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                string logEntry = $"[{timestamp}] {message}{Environment.NewLine}";
                File.AppendAllText(_debugLogFilePath, logEntry);
            }
            catch (Exception ex) when (ex is IOException or UnauthorizedAccessException)
            {
                Debug.WriteLine($"[FATAL DEBUG LOGGING ERROR] {ex.Message}");
            }
        }

        public void LogException(string context, Exception ex)
        {
            if (!IsEnabled) return;
            try
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                string hex = $"0x{ex.HResult:X8}";
                string type = ex.GetType().Name;
                string msg = ex.Message?.Replace(Environment.NewLine, " ").Trim() ?? "";
                string line = $"[{timestamp}] ERROR {context} {type} HResult={hex} Message={msg}{Environment.NewLine}";
                File.AppendAllText(_debugLogFilePath, line);
            }
            catch (Exception e) when (e is IOException or UnauthorizedAccessException)
            {
                Debug.WriteLine($"[FATAL EXCEPTION LOGGING ERROR] {e.Message}");
            }
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/Utilities.cs
--------------------------------------------------------------------------------
﻿// File: Utilities.cs
using System.Diagnostics.CodeAnalysis;
using System.Runtime.InteropServices;
using System.Text;

namespace MinimalFirewall
{
    public delegate bool TryParseHandler<T>(string value, [NotNullWhen(true)] out T? result);

    public static class ParsingUtility
    {
        public static List<T> ParseStringToList<T>(string? input, TryParseHandler<T> tryParse)
        {
            if (string.IsNullOrEmpty(input) || input.Trim() == "*")
            {
                return [];
            }
            var results = new List<T>();
            var parts = input.Split(',');
            foreach (var part in parts)
            {
                if (tryParse(part.Trim(), out T? result) && result != null)
                {
                    results.Add(result);
                }
            }
            return results;
        }
    }

    public static partial class PathResolver
    {
        private static readonly Dictionary<string, string> _deviceMap = [];
        static PathResolver()
        {
            var driveLetters = Directory.GetLogicalDrives().Select(d => d[0..2]);
            foreach (var drive in driveLetters)
            {
                var targetPath = new StringBuilder(260);
                if (QueryDosDevice(drive, targetPath, targetPath.Capacity) != 0)
                {
                    _deviceMap[targetPath.ToString()] = drive;
                }
            }
        }

        public static string NormalizePath(string path)
        {
            if (string.IsNullOrEmpty(path)) return string.Empty;
            try
            {
                string expandedPath = Environment.ExpandEnvironmentVariables(path);
                if (Path.IsPathRooted(expandedPath))
                {
                    return Path.GetFullPath(expandedPath);
                }

                string basePath = AppContext.BaseDirectory;
                return Path.GetFullPath(Path.Combine(basePath, expandedPath));
            }
            catch (ArgumentException)
            {
                return path;
            }
        }

        public static string ConvertDevicePathToDrivePath(string devicePath)
        {
            if (string.IsNullOrEmpty(devicePath) || (devicePath.Length > 1 && devicePath[1] == ':' && char.IsLetter(devicePath[0])))
                return devicePath;
            var matchingDevice = _deviceMap.Keys.FirstOrDefault(d => devicePath.StartsWith(d, StringComparison.OrdinalIgnoreCase));
            return matchingDevice != null ? string.Concat(_deviceMap[matchingDevice], devicePath.AsSpan(matchingDevice.Length)) : devicePath;
        }

        [DllImport("kernel32.dll", EntryPoint = "QueryDosDeviceW", CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern uint QueryDosDevice(string lpDeviceName, StringBuilder lpTargetPath, int ucchMax);
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/UtilityServices.cs
--------------------------------------------------------------------------------
﻿// File: UtilityServices.cs
using DarkModeForms;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using NetFwTypeLib;
using System;

namespace MinimalFirewall
{
    public static class AdminTaskService
    {
        public static void ResetFirewall()
        {
            try
            {
                Type fwMgrType = Type.GetTypeFromProgID("HNetCfg.FwMgr");
                if (fwMgrType != null)
                {
                    INetFwMgr fwMgr = (INetFwMgr)Activator.CreateInstance(fwMgrType);
                    fwMgr.RestoreDefaults();
                    Debug.WriteLine("[AdminTask] Firewall reset to defaults using COM interface.");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[AdminTask ERROR] Firewall reset failed: {ex.Message}");
                Messenger.MessageBox($"Could not reset Windows Firewall.\n\nError: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        public static void SetAuditPolicy(bool enable)
        {
            string[] guids =
            {
                "{0CCE9225-69AE-11D9-BED3-505054503030}",
                "{0CCE9226-69AE-11D9-BED3-505054503030}"
            };
            foreach (var guid in guids)
            {
                string arguments = $"/set /subcategory:{guid} /failure:{(enable ? "enable" : "disable")}";
                Execute(arguments, "auditpol.exe", out _);
            }
        }

        public static bool IsAuditPolicyEnabled()
        {
            var packetDropGuid = new Guid("{0CCE9225-69AE-11D9-BED3-505054503030}");
            var connectionGuid = new Guid("{0CCE9226-69AE-11D9-BED3-505054503030}");

            return IsAuditingEnabledForSubcategory(packetDropGuid) && IsAuditingEnabledForSubcategory(connectionGuid);
        }

        private const uint AUDIT_FAILURE = 0x00000002;
        [DllImport("advapi32.dll", SetLastError = true)]
        private static extern bool AuditQuerySystemPolicy(
            [In] Guid pSubCategoryGuids,
            [In] uint PolicyCount,
            [Out] out IntPtr ppPolicy
        );
        [DllImport("advapi32.dll", SetLastError = true)]
        private static extern bool AuditFree(
            [In] IntPtr pBuffer
        );
        [StructLayout(LayoutKind.Sequential)]
        private struct AUDIT_POLICY_INFORMATION
        {
            public Guid AuditSubCategoryGuid;
            public uint AuditingInformation;
        }

        private static bool IsAuditingEnabledForSubcategory(Guid subcategoryGuid)
        {
            if (!AuditQuerySystemPolicy(subcategoryGuid, 1, out IntPtr pPolicy))
            {
                Debug.WriteLine($"[AdminTask ERROR] AuditQuerySystemPolicy failed for GUID {subcategoryGuid}.");
                return false;
            }

            try
            {
                var policyInfo = Marshal.PtrToStructure<AUDIT_POLICY_INFORMATION>(pPolicy);
                return (policyInfo.AuditingInformation & AUDIT_FAILURE) == AUDIT_FAILURE;
            }
            finally
            {
                if (pPolicy != IntPtr.Zero)
                {
                    AuditFree(pPolicy);
                }
            }
        }

        private static void Execute(string arguments, string fileName, out string? output)
        {
            Debug.WriteLine($"[AdminTask] Preparing to execute: {fileName} {arguments}");
            output = null;
            var startInfo = new ProcessStartInfo()
            {
                FileName = fileName,
                Arguments = arguments,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardError = true,
                RedirectStandardOutput = true,
                StandardOutputEncoding = Encoding.UTF8,
                StandardErrorEncoding = Encoding.UTF8
            };
            try
            {
                using var process = new Process { StartInfo = startInfo };
                var outputBuilder = new StringBuilder();
                var errorBuilder = new StringBuilder();

                using var outputWaitHandle = new AutoResetEvent(false);
                using var errorWaitHandle = new AutoResetEvent(false);
                process.OutputDataReceived += (sender, e) =>
                {
                    if (e.Data == null) outputWaitHandle.Set();
                    else outputBuilder.AppendLine(e.Data);
                };
                process.ErrorDataReceived += (sender, e) =>
                {
                    if (e.Data == null) errorWaitHandle.Set();
                    else errorBuilder.AppendLine(e.Data);
                };

                process.Start();
                process.BeginOutputReadLine();
                process.BeginErrorReadLine();
                if (process.WaitForExit(5000) && outputWaitHandle.WaitOne(5000) && errorWaitHandle.WaitOne(5000))
                {
                    output = outputBuilder.ToString();
                    string errors = errorBuilder.ToString();

                    Debug.WriteLine($"[AdminTask] Exit Code: {process.ExitCode}");
                    if (!string.IsNullOrWhiteSpace(output))
                        Debug.WriteLine($"[AdminTask] Standard Output:\n{output}");
                    if (!string.IsNullOrWhiteSpace(errors))
                        Messenger.MessageBox($"An error occurred during an administrative task:\n\n{errors}", "Admin Task Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                }
                else
                {
                    Debug.WriteLine("[AdminTask ERROR] Process timed out or streams did not close.");
                    if (!process.HasExited) process.Kill();
                    Messenger.MessageBox("An administrative task timed out and may not have completed successfully.", "Execution Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
                Debug.WriteLine($"[AdminTask] Execution finished for: {fileName}");
            }
            catch (Exception ex) when (ex is System.ComponentModel.Win32Exception or ObjectDisposedException or InvalidOperationException)
            {
                Debug.WriteLine($"[AdminTask FATAL ERROR] {ex}");
                Messenger.MessageBox($"A critical error occurred while trying to run an administrative task:\n\n{ex.Message}", "Execution Exception", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }

    public class StartupService
    {
        private const string RegistryKeyPath = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run";
        private readonly string? _appName;
        private readonly string? _appPath;
        private readonly string _taskName;

        public StartupService()
        {
            _appName = Assembly.GetExecutingAssembly().GetName().Name;
            _appPath = Environment.ProcessPath;
            if (_appName != null)
            {
                _taskName = _appName + " Startup";
            }
            else
            {
                _taskName = "MinimalFirewall Startup";
            }
        }

        public void SetStartup(bool isEnabled)
        {
            if (string.IsNullOrEmpty(_appName) || string.IsNullOrEmpty(_appPath)) return;

            try
            {
                using var key = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(RegistryKeyPath, true);
                if (key?.GetValue(_appName) != null)
                {
                    key.DeleteValue(_appName, false);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[Startup] Failed to remove old registry key: {ex.Message}");
            }

            if (isEnabled)
            {
                string arguments = $"/create /tn \"{_taskName}\" /tr \"\\\"{_appPath}\\\" -tray\" /sc onlogon /rl highest /f";
                Execute("schtasks.exe", arguments);
            }
            else
            {
                string arguments = $"/delete /tn \"{_taskName}\" /f";
                Execute("schtasks.exe", arguments);
            }
        }

        private void Execute(string fileName, string arguments)
        {
            Debug.WriteLine($"[Startup] Executing: {fileName} {arguments}");
            var startInfo = new ProcessStartInfo()
            {
                FileName = fileName,
                Arguments = arguments,
                UseShellExecute = false,
                CreateNoWindow = true,
                RedirectStandardError = true,
                RedirectStandardOutput = true,
            };
            try
            {
                using var process = Process.Start(startInfo);
                if (process != null)
                {
                    string? stdOut = process.StandardOutput.ReadToEnd();
                    string? stdErr = process.StandardError.ReadToEnd();
                    process.WaitForExit(5000);

                    if (process.ExitCode != 0)
                    {
                        Debug.WriteLine($"[Startup ERROR] Process exited with code {process.ExitCode}.");
                        if (!string.IsNullOrEmpty(stdOut)) Debug.WriteLine($"[Startup ERROR] STDOUT: {stdOut}");
                        if (!string.IsNullOrEmpty(stdErr)) Debug.WriteLine($"[Startup ERROR] STDERR: {stdErr}");
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[Startup FATAL ERROR] {ex.Message}");
            }
        }
    }
}



--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/UwpService.cs
--------------------------------------------------------------------------------
﻿// File: UwpService.cs
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;

namespace MinimalFirewall
{
    public class UwpService
    {
        private readonly string _cachePath;
        public UwpService()
        {
            string baseDirectory = AppContext.BaseDirectory;
            _cachePath = Path.Combine(baseDirectory, "uwp_apps.json");
        }

        public async Task<List<UwpApp>> GetUwpAppsAsync(CancellationToken token)
        {
            return await Task.Run(() =>
            {
                var psi = new ProcessStartInfo
                {
                    FileName = "powershell",
                    Arguments = "-NoProfile -ExecutionPolicy Bypass -Command \"Get-AppxPackage | Where-Object { !$_.IsFramework -and !$_.IsResourcePackage } | Select-Object Name, PackageFamilyName, Publisher | ConvertTo-Json\"",
                    RedirectStandardOutput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true,
                    StandardOutputEncoding = Encoding.UTF8
                };

                try
                {
                    using (var process = Process.Start(psi))
                    {
                        if (process == null) return new List<UwpApp>();
                        var output = process.StandardOutput.ReadToEnd();
                        process.WaitForExit();

                        if (token.IsCancellationRequested) return new List<UwpApp>();

                        if (string.IsNullOrWhiteSpace(output))
                        {
                            return new List<UwpApp>();
                        }

                        var apps = JsonSerializer.Deserialize(output, UwpAppJsonContext.Default.ListUwpApp);
                        var sortedApps = (apps ?? new List<UwpApp>()).OrderBy(app => app.Name).ToList();

                        SaveUwpAppsToCache(sortedApps);
                        return sortedApps;
                    }
                }
                catch (Exception ex) when (ex is System.ComponentModel.Win32Exception or InvalidOperationException or JsonException)
                {
                    Debug.WriteLine("[ERROR] Failed to scan for UWP apps via PowerShell: " + ex.Message);
                    return new List<UwpApp>();
                }
            }, token).ConfigureAwait(false);
        }

        public List<UwpApp> LoadUwpAppsFromCache()
        {
            try
            {
                if (File.Exists(_cachePath))
                {
                    string json = File.ReadAllText(_cachePath);
                    var apps = JsonSerializer.Deserialize(json, UwpAppJsonContext.Default.ListUwpApp);
                    return apps ?? new List<UwpApp>();
                }
            }
            catch (Exception ex) when (ex is IOException or UnauthorizedAccessException or JsonException)
            {
                Debug.WriteLine("[ERROR] Failed to load UWP cache: " + ex.Message);
            }
            return new List<UwpApp>();
        }

        private void SaveUwpAppsToCache(List<UwpApp> apps)
        {
            try
            {
                string json = JsonSerializer.Serialize(apps, UwpAppJsonContext.Default.ListUwpApp);
                File.WriteAllText(_cachePath, json);
            }
            catch (Exception ex) when (ex is IOException or UnauthorizedAccessException)
            {
                Debug.WriteLine("[ERROR] Failed to save UWP cache: " + ex.Message);
            }
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/WildcardCreatorForm.cs
--------------------------------------------------------------------------------
﻿// File: WildcardCreatorForm.cs
using System.IO;
using DarkModeForms;

namespace MinimalFirewall
{
    public partial class WildcardCreatorForm : Form
    {
        private readonly WildcardRuleService _wildcardRuleService;
        private string _folderPath = string.Empty;
        private readonly DarkModeCS dm;

        public string FolderPath { get; private set; } = string.Empty;
        public string ExeName { get; private set; } = string.Empty;
        public string FinalAction { get; private set; } = string.Empty;
        public WildcardCreatorForm(WildcardRuleService wildcardRuleService)
        {
            InitializeComponent();
            dm = new DarkModeCS(this);
            _wildcardRuleService = wildcardRuleService;

            directionCombo.SelectedIndex = 0;
        }

        public WildcardCreatorForm(WildcardRuleService wildcardRuleService, string initialAppPath) : this(wildcardRuleService)
        {
            string? dirPath = Path.GetDirectoryName(initialAppPath);
            if (!string.IsNullOrEmpty(dirPath) && Directory.Exists(dirPath))
            {
                _folderPath = dirPath;
                folderPathTextBox.Text = _folderPath;
                exeNameTextBox.Text = Path.GetFileName(initialAppPath);
            }
        }

        private void browseButton_Click(object sender, EventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    _folderPath = dialog.SelectedPath;
                    folderPathTextBox.Text = _folderPath;
                }
            }
        }

        private void okButton_Click(object sender, EventArgs e)
        {
            _folderPath = folderPathTextBox.Text;
            string expandedPath = Environment.ExpandEnvironmentVariables(_folderPath);
            if (string.IsNullOrWhiteSpace(_folderPath) || !Directory.Exists(expandedPath))
            {
                Messenger.MessageBox("Please select or enter a valid folder path.", "Invalid Path", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            this.FolderPath = PathResolver.NormalizePath(_folderPath);
            this.ExeName = exeNameTextBox.Text;
            string action = allowRadio.Checked ? "Allow" : "Block";
            string direction = directionCombo.Text;
            this.FinalAction = $"{action} ({direction})";
            DialogResult = DialogResult.OK;
        }

        private void cancelButton_Click(object sender, EventArgs e)
        {
            DialogResult = DialogResult.Cancel;
        }
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/WildcardCreatorForm.Designer.cs
--------------------------------------------------------------------------------
﻿// File: WildcardCreatorForm.Designer.cs
namespace MinimalFirewall
{
    public partial class WildcardCreatorForm
    {
        private System.ComponentModel.IContainer components = null;
        private System.Windows.Forms.Button browseButton;
        private System.Windows.Forms.TextBox folderPathTextBox;
        private System.Windows.Forms.TextBox exeNameTextBox;
        private System.Windows.Forms.RadioButton allowRadio;
        private System.Windows.Forms.RadioButton blockRadio;
        private DarkModeForms.FlatComboBox directionCombo;
        private System.Windows.Forms.Button okButton;
        private System.Windows.Forms.Button cancelButton;
        private System.Windows.Forms.GroupBox actionGroupBox;
        private System.Windows.Forms.Label instructionLabel;
        private System.Windows.Forms.Label exeNameNoteLabel;
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        private void InitializeComponent()
        {
            this.browseButton = new System.Windows.Forms.Button();
            this.folderPathTextBox = new System.Windows.Forms.TextBox();
            this.exeNameTextBox = new System.Windows.Forms.TextBox();
            this.actionGroupBox = new System.Windows.Forms.GroupBox();
            this.directionCombo = new DarkModeForms.FlatComboBox();
            this.blockRadio = new System.Windows.Forms.RadioButton();
            this.allowRadio = new System.Windows.Forms.RadioButton();
            this.okButton = new System.Windows.Forms.Button();
            this.cancelButton = new System.Windows.Forms.Button();
            this.instructionLabel = new System.Windows.Forms.Label();
            this.exeNameNoteLabel = new System.Windows.Forms.Label();
            this.actionGroupBox.SuspendLayout();
            this.SuspendLayout();
            // 
            // browseButton
            // 
            this.browseButton.Location = new System.Drawing.Point(377, 120);
            this.browseButton.Name = "browseButton";
            this.browseButton.Size = new System.Drawing.Size(100, 23);
            this.browseButton.TabIndex = 0;
            this.browseButton.Text = "Browse...";
            this.browseButton.UseVisualStyleBackColor = true;
            this.browseButton.Click += new System.EventHandler(this.browseButton_Click);
            // 
            // folderPathTextBox
            // 
            this.folderPathTextBox.Location = new System.Drawing.Point(23, 120);
            this.folderPathTextBox.Name = "folderPathTextBox";
            this.folderPathTextBox.Size = new System.Drawing.Size(347, 23);
            this.folderPathTextBox.TabIndex = 1;
            this.folderPathTextBox.PlaceholderText = "Enter folder path";
            // 
            // exeNameTextBox
            // 
            this.exeNameTextBox.Location = new System.Drawing.Point(23, 170);
            this.exeNameTextBox.Name = "exeNameTextBox";
            this.exeNameTextBox.Size = new System.Drawing.Size(454, 23);
            this.exeNameTextBox.TabIndex = 2;
            this.exeNameTextBox.PlaceholderText = "Optional: Filter by .exe name (e.g., svchost.exe or vs_*.exe)";
            // 
            // actionGroupBox
            // 
            this.actionGroupBox.Controls.Add(this.directionCombo);
            this.actionGroupBox.Controls.Add(this.blockRadio);
            this.actionGroupBox.Controls.Add(this.allowRadio);
            this.actionGroupBox.Location = new System.Drawing.Point(23, 240);
            this.actionGroupBox.Name = "actionGroupBox";
            this.actionGroupBox.Size = new System.Drawing.Size(454, 150);
            this.actionGroupBox.TabIndex = 3;
            this.actionGroupBox.TabStop = false;
            this.actionGroupBox.Text = "Action";
            // 
            // directionCombo
            // 
            this.directionCombo.BorderColor = System.Drawing.Color.Gray;
            this.directionCombo.ButtonColor = System.Drawing.Color.LightGray;
            this.directionCombo.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.directionCombo.FormattingEnabled = true;
            this.directionCombo.Items.AddRange(new object[] {
            "Outbound",
            "Inbound",
            "All"});
            this.directionCombo.Location = new System.Drawing.Point(150, 60);
            this.directionCombo.Name = "directionCombo";
            this.directionCombo.Size = new System.Drawing.Size(280, 23);
            this.directionCombo.TabIndex = 2;
            // 
            // blockRadio
            // 
            this.blockRadio.AutoSize = true;
            this.blockRadio.Location = new System.Drawing.Point(20, 90);
            this.blockRadio.Name = "blockRadio";
            this.blockRadio.Size = new System.Drawing.Size(54, 19);
            this.blockRadio.TabIndex = 1;
            this.blockRadio.TabStop = true;
            this.blockRadio.Text = "Block";
            this.blockRadio.UseVisualStyleBackColor = true;
            // 
            // allowRadio
            // 
            this.allowRadio.AutoSize = true;
            this.allowRadio.Checked = true;
            this.allowRadio.Location = new System.Drawing.Point(20, 30);
            this.allowRadio.Name = "allowRadio";
            this.allowRadio.Size = new System.Drawing.Size(55, 19);
            this.allowRadio.TabIndex = 0;
            this.allowRadio.TabStop = true;
            this.allowRadio.Text = "Allow";
            this.allowRadio.UseVisualStyleBackColor = true;
            // 
            // okButton
            // 
            this.okButton.Location = new System.Drawing.Point(260, 410);
            this.okButton.Name = "okButton";
            this.okButton.Size = new System.Drawing.Size(100, 36);
            this.okButton.TabIndex = 4;
            this.okButton.Text = "OK";
            this.okButton.UseVisualStyleBackColor = true;
            this.okButton.Click += new System.EventHandler(this.okButton_Click);
            // 
            // cancelButton
            // 
            this.cancelButton.DialogResult = System.Windows.Forms.DialogResult.Cancel;
            this.cancelButton.Location = new System.Drawing.Point(377, 410);
            this.cancelButton.Name = "cancelButton";
            this.cancelButton.Size = new System.Drawing.Size(100, 36);
            this.cancelButton.TabIndex = 5;
            this.cancelButton.Text = "Cancel";
            this.cancelButton.UseVisualStyleBackColor = true;
            this.cancelButton.Click += new System.EventHandler(this.cancelButton_Click);
            // 
            // instructionLabel
            // 
            this.instructionLabel.Location = new System.Drawing.Point(23, 20);
            this.instructionLabel.Name = "instructionLabel";
            this.instructionLabel.Size = new System.Drawing.Size(454, 80);
            this.instructionLabel.TabIndex = 6;
            this.instructionLabel.Text = "Enter a folder path below, or use the Browse button. The rule will apply to all matching executables within that folder and its subfolders.\r\n\r\nFor temporary folders, you can type in environment variables directly. Common examples: %APPDATA% ; %Temp% ;  %LOCALAPPDATA%\\Temp ";
            // 
            // exeNameNoteLabel
            // 
            this.exeNameNoteLabel.AutoSize = true;
            this.exeNameNoteLabel.ForeColor = System.Drawing.SystemColors.GrayText;
            this.exeNameNoteLabel.Location = new System.Drawing.Point(23, 196);
            this.exeNameNoteLabel.Name = "exeNameNoteLabel";
            this.exeNameNoteLabel.Size = new System.Drawing.Size(447, 15);
            this.exeNameNoteLabel.TabIndex = 7;
            this.exeNameNoteLabel.Text = "If left blank, the rule will apply to all executables in the selected folder and subfolders.";
            // 
            // WildcardCreatorForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(500, 470);
            this.Controls.Add(this.exeNameNoteLabel);
            this.Controls.Add(this.instructionLabel);
            this.Controls.Add(this.cancelButton);
            this.Controls.Add(this.okButton);
            this.Controls.Add(this.actionGroupBox);
            this.Controls.Add(this.exeNameTextBox);
            this.Controls.Add(this.folderPathTextBox);
            this.Controls.Add(this.browseButton);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
            this.MinimizeBox = false;
            this.Name = "WildcardCreatorForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
            this.Text = "Create Wildcard Rule";
            this.actionGroupBox.ResumeLayout(false);
            this.actionGroupBox.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();
        }
        #endregion
    }
}

--------------------------------------------------------------------------------
// File: C:/Users/anon/PROGRAMMING/C#/SimpleFirewall/VS Minimal Firewall/MinimalFirewall-NET8/MinimalFirewall-WindowsStore/WildCardRuleService.cs
--------------------------------------------------------------------------------
﻿// File: WildcardRuleService.cs
using System.Diagnostics;
using System.IO;
using System.Text.Json;

namespace MinimalFirewall
{
    public class WildcardRuleService
    {
        private readonly string _configPath;
        private List<WildcardRule> _rules = [];

        public WildcardRuleService()
        {
            string baseDirectory = AppContext.BaseDirectory;
            _configPath = Path.Combine(baseDirectory, "wildcard_rules.json");
            LoadRules();
        }

        public List<WildcardRule> GetRules()
        {
            return _rules;
        }

        public void AddRule(WildcardRule rule)
        {
            if (!_rules.Any(r => r.FolderPath.Equals(rule.FolderPath, StringComparison.OrdinalIgnoreCase) && r.ExeName.Equals(rule.ExeName, StringComparison.OrdinalIgnoreCase)))
            {
                _rules.Add(rule);
                SaveRules();
            }
        }

        public void RemoveRule(WildcardRule rule)
        {
            var ruleToRemove = _rules.FirstOrDefault(r => r.FolderPath.Equals(rule.FolderPath, StringComparison.OrdinalIgnoreCase));
            if (ruleToRemove != null)
            {
                _rules.Remove(ruleToRemove);
                SaveRules();
            }
        }

        public void ClearRules()
        {
            _rules.Clear();
            SaveRules();
        }

        private void LoadRules()
        {
            try
            {
                if (File.Exists(_configPath))
                {
                    string json = File.ReadAllText(_configPath);
                    _rules = JsonSerializer.Deserialize(json, WildcardRuleJsonContext.Default.ListWildcardRule) ?? [];
                }
                else
                {
                    _rules = [];
                }
            }
            catch (Exception ex) when (ex is IOException or UnauthorizedAccessException or JsonException)
            {
                Debug.WriteLine("[ERROR] Failed to load wildcard rules: " + ex.Message);
                _rules = [];
            }
        }

        private void SaveRules()
        {
            try
            {
                string json = JsonSerializer.Serialize(_rules, WildcardRuleJsonContext.Default.ListWildcardRule);
                File.WriteAllText(_configPath, json);
            }
            catch (Exception ex) when (ex is IOException or UnauthorizedAccessException)
            {
                Debug.WriteLine("[ERROR] Failed to save wildcard rules: " + ex.Message);
            }
        }

        public WildcardRule? Match(string path)
        {
            if (string.IsNullOrEmpty(path))
            {
                return null;
            }

            string normalizedPath = PathResolver.NormalizePath(path);
            string fileName = Path.GetFileName(normalizedPath);

            foreach (var rule in _rules)
            {
                string expandedFolderPath = PathResolver.NormalizePath(rule.FolderPath);

                if (normalizedPath.StartsWith(expandedFolderPath, StringComparison.OrdinalIgnoreCase))
                {
                    string exePattern = string.IsNullOrWhiteSpace(rule.ExeName) ? "*" : rule.ExeName.Trim();

                    if (exePattern == "*" || exePattern == "*.exe")
                    {
                        return rule;
                    }

                    if (exePattern.StartsWith("*") && exePattern.EndsWith("*"))
                    {
                        if (fileName.Contains(exePattern.Trim('*'), StringComparison.OrdinalIgnoreCase)) return rule;
                    }
                    else if (exePattern.StartsWith("*"))
                    {
                        if (fileName.EndsWith(exePattern.TrimStart('*'), StringComparison.OrdinalIgnoreCase)) return rule;
                    }
                    else if (exePattern.EndsWith("*"))
                    {
                        if (fileName.StartsWith(exePattern.TrimEnd('*'), StringComparison.OrdinalIgnoreCase)) return rule;
                    }
                    else
                    {
                        if (fileName.Equals(exePattern, StringComparison.OrdinalIgnoreCase)) return rule;
                    }
                }
            }
            return null;
        }
    }
}



# Update: 2025-10-12

# Update: 2025-10-19
